/*  This file is part of Chummer5a.
 *
 *  Chummer5a is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Chummer5a is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Chummer5a.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  You can obtain the full source code for Chummer5a at
 *  https://github.com/chummer5a/chummer5a
 */

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using System.Xml.XPath;
using Chummer.Backend.Attributes;
using Chummer.Backend.Equipment;
using Chummer.Backend.Skills;
using Chummer.Backend.Uniques;
using NLog;

namespace Chummer
{
    [DesignerCategory("Form")]
    public partial class CharacterCreate : CharacterShared
    {
        private static readonly Lazy<Logger> s_ObjLogger = new Lazy<Logger>(LogManager.GetCurrentClassLogger);
        private static Logger Log => s_ObjLogger.Value;

        private bool _blnReapplyImprovements;
        private bool _blnFreestyle;
        public bool IsReopenQueued { get; private set; }
        private int _intDragLevel;
        private StoryBuilder _objStoryBuilder;

        private decimal _decStartingLifestyleNuyen;

        public TabControl TabCharacterTabs => tabCharacterTabs;

        private readonly Font _fntNormal;
        private readonly Font _fntStrikeout;

        #region Form Events

        private void ConstructorCommon()
        {
            InitializeComponent();
            tabSkillsUc.MyToken = GenericToken;
            tabPowerUc.MyToken = GenericToken;
            Disposed += (sender, args) =>
            {
                _fntNormal.Dispose();
                _fntStrikeout.Dispose();
                // These tabs might not necessarily be present in our form, so check to dispose them manually
                if (!tabInitiation.IsDisposed)
                {
                    tabInitiation.Dispose();
                }

                if (!tabMagician.IsDisposed)
                {
                    tabMagician.Dispose();
                }

                if (!tabAdept.IsDisposed)
                {
                    tabAdept.Dispose();
                }

                if (!tabTechnomancer.IsDisposed)
                {
                    tabTechnomancer.Dispose();
                }

                if (!tabAdvancedPrograms.IsDisposed)
                {
                    tabAdvancedPrograms.Dispose();
                }

                if (!tabCritter.IsDisposed)
                {
                    tabCritter.Dispose();
                }

                if (!tabEnemies.IsDisposed)
                {
                    tabEnemies.Dispose();
                }
            };
        }

        [Obsolete("This constructor is for use by form designers only.", true)]
        public CharacterCreate()
        {
            ConstructorCommon();
            _fntNormal = new Font(treQualities.Font, FontStyle.Regular);
            _fntStrikeout = new Font(treQualities.Font, FontStyle.Strikeout);
        }

        public CharacterCreate(Character objCharacter) : base(objCharacter)
        {
            ConstructorCommon();
            _fntNormal = new Font(treQualities.Font, FontStyle.Regular);
            _fntStrikeout = new Font(treQualities.Font, FontStyle.Strikeout);
            tabSkillsUc.CachedCharacter = objCharacter;
            tabPowerUc.CachedCharacter = objCharacter;

            GlobalSettings.ClipboardChanged += RefreshPasteStatus;
            tabCharacterTabs.MouseWheel += CommonFunctions.ShiftTabsOnMouseScroll;
            tabInfo.MouseWheel += CommonFunctions.ShiftTabsOnMouseScroll;
            tabLongTexts.MouseWheel += CommonFunctions.ShiftTabsOnMouseScroll;
            tabPeople.MouseWheel += CommonFunctions.ShiftTabsOnMouseScroll;
            tabStreetGearTabs.MouseWheel += CommonFunctions.ShiftTabsOnMouseScroll;

            // Add EventHandlers for the various events MAG, RES, Qualities, etc.
            using (objCharacter.LockObject.EnterWriteLock())
            {
                objCharacter.PropertyChanged += OnCharacterPropertyChanged;
                objCharacter.SettingsPropertyChanged += OnCharacterSettingsPropertyChanged;
            }

            tabSkillsUc.MakeDirtyWithCharacterUpdate += MakeDirtyWithCharacterUpdate;
            lmtControl.MakeDirtyWithCharacterUpdate += MakeDirtyWithCharacterUpdate;
            lmtControl.MakeDirty += MakeDirty;

            this.UpdateLightDarkMode();
            this.TranslateWinForm();
            ContextMenuStrip[] lstCMSToTranslate =
            {
                cmsAdvancedLifestyle,
                cmsAdvancedProgram,
                cmsArmor,
                cmsArmorGear,
                cmsArmorLocation,
                cmsArmorMod,
                cmsBioware,
                cmsComplexForm,
                cmsCritterPowers,
                cmsCyberware,
                cmsCyberwareGear,
                cmsVehicleCyberware,
                cmsVehicleCyberwareGear,
                cmsGear,
                cmsGearAllowRename,
                cmsGearButton,
                cmsGearLocation,
                cmsInitiationNotes,
                cmsLifestyle,
                cmsLifestyleNotes,
                cmsMartialArts,
                cmsMetamagic,
                cmsQuality,
                cmsSpell,
                cmsSpellButton,
                cmsTechnique,
                cmsVehicle,
                cmsVehicleGear,
                cmsVehicleLocation,
                cmsVehicleWeapon,
                cmsVehicleWeaponAccessory,
                cmsVehicleWeaponAccessoryGear,
                cmsWeapon,
                cmsWeaponAccessory,
                cmsWeaponAccessoryGear,
                cmsWeaponLocation,
                cmsWeaponMount
            };

            // Update the text in the Menus so they can be merged with frmMain properly.
            foreach (ToolStripMenuItem tssItem in mnuCreateMenu.Items.OfType<ToolStripMenuItem>())
            {
                tssItem.UpdateLightDarkMode();
                tssItem.TranslateToolStripItemsRecursively();
            }

            foreach (ContextMenuStrip objCMS in lstCMSToTranslate)
            {
                if (objCMS != null)
                {
                    foreach (ToolStripMenuItem tssItem in objCMS.Items.OfType<ToolStripMenuItem>())
                    {
                        tssItem.UpdateLightDarkMode();
                        tssItem.TranslateToolStripItemsRecursively();
                    }
                }
            }
        }

        private void TreeView_MouseDown(object sender, MouseEventArgs e)
        {
            // Generic event for all TreeViews to allow right-clicking to select a TreeNode so the proper ContextMenu is shown.
            //if (e.Button == System.Windows.Forms.MouseButtons.Right)
            //{
            TreeView objTree = (TreeView)sender;
            objTree.SelectedNode = objTree.HitTest(e.X, e.Y).Node;
            //}
            if (ModifierKeys != Keys.Control)
                return;
            if (objTree.SelectedNode?.IsExpanded == false)
            {
                foreach (TreeNode objNode in objTree.SelectedNode.Nodes)
                {
                    objNode.ExpandAll();
                }
            }
            else if (objTree.SelectedNode?.Nodes != null)
            {
                foreach (TreeNode objNode in objTree.SelectedNode.Nodes)
                {
                    objNode.Collapse();
                }
            }
        }

        private async void CharacterCreate_Load(object sender, EventArgs e)
        {
            try
            {
                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    using (CustomActivity op_load_frm_create = Timekeeper.StartSyncron(
                               "load_frm_create", null, CustomActivity.OperationType.RequestOperation,
                               CharacterObject?.FileName))
                    {
                        await this.DoThreadSafeAsync(x => x.SuspendLayout(), GenericToken).ConfigureAwait(false);
                        try
                        {
                            try
                            {
                                if (CharacterObject == null)
                                {
                                    // Stupid hack to get the MDI icon to show up properly.
                                    await this.DoThreadSafeFuncAsync(x => x.Icon = x.Icon.Clone() as Icon,
                                                                     GenericToken).ConfigureAwait(false);
                                    return;
                                }

                                if (!CharacterObject.IsCritter
                                    && !CharacterObject.EffectiveBuildMethodIsLifeModule
                                    && CharacterObjectSettings.BuildKarma == 0)
                                {
                                    _blnFreestyle = true;
                                    await tsMain.DoThreadSafeAsync(() =>
                                    {
                                        tslKarmaRemaining.Visible = false;
                                        tslKarmaRemainingLabel.Visible = false;
                                    }, GenericToken).ConfigureAwait(false);
                                }

                                using (Timekeeper.StartSyncron(
                                           "load_frm_create_BuildMethod", op_load_frm_create))
                                {
                                    // Initialize elements if we're using Priority to build.
                                    if (CharacterObject.EffectiveBuildMethodUsesPriorityTables)
                                    {
                                        string strText
                                            = await LanguageManager.GetStringAsync("Menu_SpecialChangePriorities",
                                                                        token: GenericToken).ConfigureAwait(false);
                                        await mnuCreateMenu.DoThreadSafeAsync(() =>
                                        {
                                            mnuSpecialChangeMetatype.Tag = "Menu_SpecialChangePriorities";
                                            mnuSpecialChangeMetatype.Text = strText;
                                        }, GenericToken).ConfigureAwait(false);
                                    }
                                }

                                using (Timekeeper.StartSyncron(
                                           "load_frm_create_databinding", op_load_frm_create))
                                {
                                    await lblNuyenTotal.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                           nameof(Character.DisplayTotalStartingNuyen), GenericToken)
                                                       .ConfigureAwait(false);
                                    await lblStolenNuyen.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.DisplayStolenNuyen), GenericToken).ConfigureAwait(false);
                                    await lblAttributesBase.DoOneWayDataBindingAsync("Visible", CharacterObject,
                                                               nameof(Character
                                                                          .EffectiveBuildMethodUsesPriorityTables),
                                                               GenericToken)
                                                           .ConfigureAwait(false);

                                    await txtGroupName
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.GroupName),
                                                              GenericToken).ConfigureAwait(false);
                                    await txtGroupNotes
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.GroupNotes),
                                                              GenericToken).ConfigureAwait(false);

                                    await txtCharacterName
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.Name),
                                                              GenericToken).ConfigureAwait(false);
                                    await txtGender
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.Gender),
                                                              GenericToken).ConfigureAwait(false);
                                    await txtAge
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.Age),
                                                              GenericToken).ConfigureAwait(false);
                                    await txtEyes
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.Eyes),
                                                              GenericToken).ConfigureAwait(false);
                                    await txtHeight
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.Height),
                                                              GenericToken).ConfigureAwait(false);
                                    await txtWeight
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.Weight),
                                                              GenericToken).ConfigureAwait(false);
                                    await txtSkin
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.Skin),
                                                              GenericToken).ConfigureAwait(false);
                                    await txtHair
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.Hair),
                                                              GenericToken).ConfigureAwait(false);
                                    await rtfDescription
                                          .DoDataBindingAsync("Rtf", CharacterObject, nameof(Character.Description),
                                                              GenericToken).ConfigureAwait(false);
                                    await rtfBackground
                                          .DoDataBindingAsync("Rtf", CharacterObject, nameof(Character.Background),
                                                              GenericToken).ConfigureAwait(false);
                                    await rtfConcept
                                          .DoDataBindingAsync("Rtf", CharacterObject, nameof(Character.Concept),
                                                              GenericToken).ConfigureAwait(false);
                                    await rtfNotes
                                          .DoDataBindingAsync("Rtf", CharacterObject, nameof(Character.Notes),
                                                              GenericToken).ConfigureAwait(false);
                                    await txtAlias
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.Alias),
                                                              GenericToken).ConfigureAwait(false);
                                    await txtPlayerName
                                          .DoDataBindingAsync("Text", CharacterObject, nameof(Character.PlayerName),
                                                              GenericToken).ConfigureAwait(false);

                                    await lblPositiveQualitiesBP.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character
                                                   .DisplayPositiveQualityKarma), GenericToken).ConfigureAwait(false);
                                    await lblNegativeQualitiesBP.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character
                                                   .DisplayNegativeQualityKarma), GenericToken).ConfigureAwait(false);
                                    await lblMetagenicQualities.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character
                                                   .DisplayMetagenicQualityKarma), GenericToken).ConfigureAwait(false);
                                    await lblMetagenicQualities.DoOneWayDataBindingAsync("Visible", CharacterObject,
                                        nameof(Character.IsChangeling), GenericToken).ConfigureAwait(false);
                                    await lblMetagenicQualitiesLabel.DoOneWayDataBindingAsync(
                                                                        "Visible", CharacterObject,
                                                                        nameof(Character.IsChangeling), GenericToken)
                                                                    .ConfigureAwait(false);
                                    await lblEnemiesBP.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.DisplayEnemyKarma), GenericToken).ConfigureAwait(false);

                                    string strKarma = await LanguageManager.GetStringAsync("Label_Karma", token: GenericToken)
                                                                           .ConfigureAwait(false);
                                    string strKarmaRemaining
                                        = await LanguageManager.GetStringAsync("Label_KarmaRemaining", token: GenericToken)
                                                               .ConfigureAwait(false);
                                    string strBPSummaryKarma
                                        = await LanguageManager.GetStringAsync("Tab_BPSummary_Karma", token: GenericToken)
                                                               .ConfigureAwait(false);
                                    await tsMain.DoThreadSafeAsync(() =>
                                    {
                                        tslKarmaLabel.Text = strKarma;
                                        tslKarmaRemainingLabel.Text = strKarmaRemaining;
                                    }, GenericToken).ConfigureAwait(false);
                                    await tabBPSummary.DoThreadSafeAsync(x => x.Text = strBPSummaryKarma, GenericToken)
                                                      .ConfigureAwait(false);
                                    await lblQualityBPLabel.DoThreadSafeAsync(x => x.Text = strKarma, GenericToken)
                                                           .ConfigureAwait(false);

                                    await lblMetatype.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                               nameof(Character.FormattedMetatype),
                                                                               GenericToken).ConfigureAwait(false);

                                    // Set the visibility of the Bioware Suites menu options.
                                    await mnuCreateMenu.DoThreadSafeAsync(() =>
                                    {
                                        mnuSpecialAddBiowareSuite.Visible = CharacterObjectSettings.AllowBiowareSuites;
                                        mnuSpecialCreateBiowareSuite.Visible
                                            = CharacterObjectSettings.AllowBiowareSuites;
                                    }, GenericToken).ConfigureAwait(false);

                                    await chkJoinGroup.DoDataBindingAsync("Checked", CharacterObject,
                                                                          nameof(Character.GroupMember), GenericToken)
                                                      .ConfigureAwait(false);
                                    await chkInitiationGroup.DoOneWayDataBindingAsync("Enabled", CharacterObject,
                                        nameof(Character.GroupMember), GenericToken).ConfigureAwait(false);

                                    await chkCyberwareBlackMarketDiscount.DoOneWayDataBindingAsync(
                                                                             "Visible", CharacterObject,
                                                                             nameof(Character.BlackMarketDiscount),
                                                                             GenericToken)
                                                                         .ConfigureAwait(false);
                                    await chkGearBlackMarketDiscount.DoOneWayDataBindingAsync(
                                                                        "Visible", CharacterObject,
                                                                        nameof(Character.BlackMarketDiscount),
                                                                        GenericToken)
                                                                    .ConfigureAwait(false);
                                    await chkWeaponBlackMarketDiscount.DoOneWayDataBindingAsync(
                                                                          "Visible", CharacterObject,
                                                                          nameof(Character.BlackMarketDiscount),
                                                                          GenericToken)
                                                                      .ConfigureAwait(false);
                                    await chkArmorBlackMarketDiscount.DoOneWayDataBindingAsync(
                                                                         "Visible", CharacterObject,
                                                                         nameof(Character.BlackMarketDiscount),
                                                                         GenericToken)
                                                                     .ConfigureAwait(false);
                                    await chkVehicleBlackMarketDiscount.DoOneWayDataBindingAsync(
                                                                           "Visible", CharacterObject,
                                                                           nameof(Character.BlackMarketDiscount),
                                                                           GenericToken)
                                                                       .ConfigureAwait(false);

                                    // If the character has a mugshot, decode it and put it in the PictureBox.
                                    if (CharacterObject.Mugshots.Count > 0)
                                    {
                                        await nudMugshotIndex.DoThreadSafeAsync(x =>
                                        {
                                            x.Minimum = 1;
                                            x.Maximum = CharacterObject.Mugshots.Count;
                                            x.Value = Math.Max(CharacterObject.MainMugshotIndex, 0) + 1;
                                        }, GenericToken).ConfigureAwait(false);
                                    }
                                    else
                                    {
                                        await nudMugshotIndex.DoThreadSafeAsync(x =>
                                        {
                                            x.Minimum = 0;
                                            x.Maximum = 0;
                                            x.Value = 0;
                                        }, GenericToken).ConfigureAwait(false);
                                    }

                                    string strNumMugshots
                                        = await LanguageManager.GetStringAsync("String_Of", token: GenericToken).ConfigureAwait(false) +
                                          CharacterObject.Mugshots.Count.ToString(
                                              GlobalSettings.CultureInfo);
                                    await lblNumMugshots.DoThreadSafeAsync(x => x.Text = strNumMugshots, GenericToken)
                                                        .ConfigureAwait(false);
                                }

                                if (!await CharacterObjectSettings.BookEnabledAsync("RF", GenericToken)
                                                                  .ConfigureAwait(false))
                                {
                                    await cmdAddLifestyle.DoThreadSafeAsync(x => x.SplitMenuStrip = null, GenericToken)
                                                         .ConfigureAwait(false);
                                }

                                if (!await CharacterObjectSettings.BookEnabledAsync("FA", GenericToken)
                                                                  .ConfigureAwait(false))
                                {
                                    await lblWildReputation.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                                           .ConfigureAwait(false);
                                    await lblWildReputationTotal.DoThreadSafeAsync(
                                        x => x.Visible = false, GenericToken).ConfigureAwait(false);
                                    if (!await CharacterObjectSettings.BookEnabledAsync("SG", GenericToken)
                                                                      .ConfigureAwait(false))
                                    {
                                        await lblAstralReputation.DoThreadSafeAsync(
                                            x => x.Visible = false, GenericToken).ConfigureAwait(false);
                                        await lblAstralReputationTotal.DoThreadSafeAsync(
                                            x => x.Visible = false, GenericToken).ConfigureAwait(false);
                                    }
                                }

                                if (!CharacterObjectSettings.EnableEnemyTracking)
                                {
                                    await tabPeople.DoThreadSafeAsync(x => x.TabPages.Remove(tabEnemies), GenericToken)
                                                   .ConfigureAwait(false);
                                }

                                await splitMagician.DoThreadSafeAsync(x => x.SplitterDistance
                                                                          = Math.Max(x.SplitterDistance,
                                                                              ((x.Height - x.SplitterWidth) * 2 + 2)
                                                                              / 3), GenericToken).ConfigureAwait(false);
                                await splitTechnomancer.DoThreadSafeAsync(
                                    x => x.SplitterDistance
                                        = Math.Max(x.SplitterDistance, ((x.Height - x.SplitterWidth) * 2 + 2) / 3),
                                    GenericToken).ConfigureAwait(false);

                                using (Timekeeper.StartSyncron(
                                           "load_frm_create_tradition", op_load_frm_create))
                                {
                                    // Populate the Magician Traditions list.
                                    XPathNavigator xmlTraditionsBaseChummerNode =
                                        await (await CharacterObject.LoadDataXPathAsync(
                                                  "traditions.xml", token: GenericToken).ConfigureAwait(false))
                                              .SelectSingleNodeAndCacheExpressionAsync("/chummer", GenericToken)
                                              .ConfigureAwait(false);
                                    using (new FetchSafelyFromPool<List<ListItem>>(Utils.ListItemListPool,
                                               out List<ListItem> lstTraditions))
                                    {
                                        if (xmlTraditionsBaseChummerNode != null)
                                        {
                                            foreach (XPathNavigator xmlTradition in xmlTraditionsBaseChummerNode.Select(
                                                         "traditions/tradition["
                                                         + await CharacterObjectSettings
                                                                 .BookXPathAsync(token: GenericToken)
                                                                 .ConfigureAwait(false)
                                                         + ']'))
                                            {
                                                string strName
                                                    = (await xmlTradition.SelectSingleNodeAndCacheExpressionAsync(
                                                        "name", GenericToken).ConfigureAwait(false))
                                                    ?.Value;
                                                if (!string.IsNullOrEmpty(strName))
                                                    lstTraditions.Add(new ListItem(
                                                                          (await xmlTradition
                                                                              .SelectSingleNodeAndCacheExpressionAsync(
                                                                                  "id", GenericToken).ConfigureAwait(false))
                                                                          ?.Value ?? strName,
                                                                          (await xmlTradition
                                                                              .SelectSingleNodeAndCacheExpressionAsync(
                                                                                  "translate", GenericToken).ConfigureAwait(false))
                                                                          ?.Value ?? strName));
                                            }
                                        }

                                        if (lstTraditions.Count > 1)
                                        {
                                            lstTraditions.Sort(CompareListItems.CompareNames);
                                            lstTraditions.Insert(0,
                                                                 new ListItem(
                                                                     "None",
                                                                     await LanguageManager
                                                                           .GetStringAsync("String_None", token: GenericToken)
                                                                           .ConfigureAwait(false)));
                                            await cboTradition.PopulateWithListItemsAsync(lstTraditions, GenericToken)
                                                              .ConfigureAwait(false);
                                        }
                                        else
                                        {
                                            await this.DoThreadSafeAsync(() =>
                                            {
                                                cboTradition.Visible = false;
                                                lblTraditionLabel.Visible = false;
                                            }, GenericToken).ConfigureAwait(false);
                                        }
                                    }

                                    // Populate the Magician Custom Drain Options list.
                                    using (new FetchSafelyFromPool<List<ListItem>>(Utils.ListItemListPool,
                                               out List<ListItem> lstDrainAttributes))
                                    {
                                        if (xmlTraditionsBaseChummerNode != null)
                                        {
                                            foreach (XPathNavigator xmlDrain in xmlTraditionsBaseChummerNode.Select(
                                                         "drainattributes/drainattribute"))
                                            {
                                                string strName
                                                    = (await xmlDrain.SelectSingleNodeAndCacheExpressionAsync("name", GenericToken)
                                                                     .ConfigureAwait(false))
                                                    ?.Value;
                                                if (!string.IsNullOrEmpty(strName)
                                                    && lstDrainAttributes.All(x => x.Value.ToString() != strName))
                                                {
                                                    string strTranslatedName = (await xmlDrain
                                                        .SelectSingleNodeAndCacheExpressionAsync(
                                                            "translate", GenericToken).ConfigureAwait(false))?.Value ?? strName;
                                                    lstDrainAttributes.Add(new ListItem(strName, strTranslatedName));
                                                }
                                            }
                                        }

                                        lstDrainAttributes.Sort(CompareListItems.CompareNames);
                                        lstDrainAttributes.Insert(0, ListItem.Blank);
                                        await cboDrain.PopulateWithListItemsAsync(lstDrainAttributes, GenericToken)
                                                      .ConfigureAwait(false);
                                        await cboDrain.DoDataBindingAsync(
                                            "SelectedValue", CharacterObject.MagicTradition,
                                            nameof(Tradition.DrainExpression), GenericToken).ConfigureAwait(false);
                                    }

                                    await lblDrainAttributes.DoOneWayDataBindingAsync(
                                        "Text", CharacterObject.MagicTradition,
                                        nameof(Tradition.DisplayDrainExpression), GenericToken).ConfigureAwait(false);
                                    await lblDrainAttributesValue.DoOneWayDataBindingAsync(
                                        "Text", CharacterObject.MagicTradition,
                                        nameof(Tradition.DrainValue), GenericToken).ConfigureAwait(false);
                                    await lblDrainAttributesValue.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject.MagicTradition,
                                        nameof(Tradition.DrainValueToolTip), GenericToken).ConfigureAwait(false);
                                    await CharacterObject.MagicTradition.SetSourceDetailAsync(
                                        lblTraditionSource, GenericToken).ConfigureAwait(false);

                                    await lblFadingAttributes.DoOneWayDataBindingAsync(
                                        "Text", CharacterObject.MagicTradition,
                                        nameof(Tradition.DisplayDrainExpression), GenericToken).ConfigureAwait(false);
                                    await lblFadingAttributesValue.DoOneWayDataBindingAsync(
                                        "Text", CharacterObject.MagicTradition,
                                        nameof(Tradition.DrainValue), GenericToken).ConfigureAwait(false);
                                    await lblFadingAttributesValue.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject.MagicTradition,
                                        nameof(Tradition.DrainValueToolTip), GenericToken).ConfigureAwait(false);

                                    using (new FetchSafelyFromPool<HashSet<string>>(Utils.StringHashSetPool,
                                               out HashSet<string> limit))
                                    {
                                        foreach (Improvement improvement in await ImprovementManager
                                                     .GetCachedImprovementListForValueOfAsync(
                                                         CharacterObject,
                                                         Improvement.ImprovementType.LimitSpiritCategory, token: GenericToken)
                                                     .ConfigureAwait(false))
                                        {
                                            limit.Add(improvement.ImprovedName);
                                        }

                                        /* Populate drugs. //TODO: fix
                                        foreach (Drug objDrug in CharacterObj.Drugs)
                                        {
                                            treCustomDrugs.Add(objDrug);
                                        }
                                        */

                                        // Populate the Magician Custom Spirits lists - Combat.
                                        using (new FetchSafelyFromPool<List<ListItem>>(Utils.ListItemListPool,
                                                   out List<ListItem> lstSpirit))
                                        {
                                            if (xmlTraditionsBaseChummerNode != null)
                                            {
                                                foreach (XPathNavigator xmlSpirit in await xmlTraditionsBaseChummerNode
                                                             .SelectAndCacheExpressionAsync("spirits/spirit", GenericToken)
                                                             .ConfigureAwait(false))
                                                {
                                                    string strSpiritName
                                                        = (await xmlSpirit.SelectSingleNodeAndCacheExpressionAsync(
                                                            "name", GenericToken).ConfigureAwait(false))
                                                        ?.Value;
                                                    if (!string.IsNullOrEmpty(strSpiritName)
                                                        && (limit.Count == 0 || limit.Contains(strSpiritName)))
                                                    {
                                                        lstSpirit.Add(new ListItem(strSpiritName,
                                                                          (await xmlSpirit
                                                                              .SelectSingleNodeAndCacheExpressionAsync(
                                                                                  "translate", GenericToken).ConfigureAwait(false))
                                                                          ?.Value
                                                                          ?? strSpiritName));
                                                    }
                                                }
                                            }

                                            lstSpirit.Sort(CompareListItems.CompareNames);
                                            lstSpirit.Insert(0, ListItem.Blank);

                                            async ValueTask BindSpiritVisibility(ElasticComboBox cboBox, Label lblName,
                                                string strSpirit)
                                            {
                                                await cboBox.PopulateWithListItemsAsync(lstSpirit, GenericToken)
                                                            .ConfigureAwait(false);
                                                await cboBox.DoDataBindingAsync(
                                                    "SelectedValue", CharacterObject.MagicTradition, strSpirit,
                                                    GenericToken).ConfigureAwait(false);
                                                await lblName.DoThreadSafeAsync(x => x.Visible
                                                        = CharacterObject.MagicTradition.Type == TraditionType.MAG,
                                                    GenericToken).ConfigureAwait(false);
                                                await cboBox.DoThreadSafeAsync(x =>
                                                {
                                                    x.Visible
                                                        = CharacterObject.MagicTradition.Type == TraditionType.MAG;
                                                    x.Enabled
                                                        = CharacterObject.MagicTradition.IsCustomTradition;
                                                }, GenericToken).ConfigureAwait(false);
                                            }

                                            await BindSpiritVisibility(cboSpiritCombat, lblSpiritCombat,
                                                                       nameof(Tradition.SpiritCombat))
                                                .ConfigureAwait(false);
                                            await BindSpiritVisibility(cboSpiritDetection, lblSpiritDetection,
                                                                       nameof(Tradition.SpiritDetection))
                                                .ConfigureAwait(false);
                                            await BindSpiritVisibility(cboSpiritHealth, lblSpiritHealth,
                                                                       nameof(Tradition.SpiritHealth))
                                                .ConfigureAwait(false);
                                            await BindSpiritVisibility(cboSpiritIllusion, lblSpiritIllusion,
                                                                       nameof(Tradition.SpiritIllusion))
                                                .ConfigureAwait(false);
                                            await BindSpiritVisibility(cboSpiritManipulation, lblSpiritManipulation,
                                                                       nameof(Tradition.SpiritManipulation))
                                                .ConfigureAwait(false);
                                        }
                                    }

                                    // Populate the Technomancer Streams list.
                                    xmlTraditionsBaseChummerNode =
                                        await (await CharacterObject.LoadDataXPathAsync(
                                                  "streams.xml", token: GenericToken).ConfigureAwait(false))
                                              .SelectSingleNodeAndCacheExpressionAsync("/chummer", GenericToken)
                                              .ConfigureAwait(false);
                                    using (new FetchSafelyFromPool<List<ListItem>>(Utils.ListItemListPool,
                                               out List<ListItem> lstStreams))
                                    {
                                        if (xmlTraditionsBaseChummerNode != null)
                                        {
                                            foreach (XPathNavigator xmlTradition in xmlTraditionsBaseChummerNode.Select(
                                                         "traditions/tradition["
                                                         + await CharacterObjectSettings
                                                                 .BookXPathAsync(token: GenericToken)
                                                                 .ConfigureAwait(false)
                                                         + ']'))
                                            {
                                                string strName
                                                    = (await xmlTradition.SelectSingleNodeAndCacheExpressionAsync(
                                                        "name", GenericToken).ConfigureAwait(false))
                                                    ?.Value;
                                                if (!string.IsNullOrEmpty(strName))
                                                    lstStreams.Add(new ListItem(
                                                                       (await xmlTradition
                                                                              .SelectSingleNodeAndCacheExpressionAsync(
                                                                                  "id", GenericToken).ConfigureAwait(false))
                                                                       ?.Value
                                                                       ?? strName,
                                                                       (await xmlTradition
                                                                              .SelectSingleNodeAndCacheExpressionAsync(
                                                                                  "translate", GenericToken).ConfigureAwait(false))
                                                                       ?.Value ?? strName));
                                            }
                                        }

                                        if (lstStreams.Count > 1)
                                        {
                                            lstStreams.Sort(CompareListItems.CompareNames);
                                            lstStreams.Insert(0,
                                                              new ListItem(
                                                                  "None",
                                                                  await LanguageManager.GetStringAsync("String_None", token: GenericToken)
                                                                      .ConfigureAwait(false)));
                                            await cboStream.PopulateWithListItemsAsync(lstStreams, GenericToken)
                                                           .ConfigureAwait(false);
                                        }
                                        else
                                        {
                                            await cboStream.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                                           .ConfigureAwait(false);
                                            await lblStreamLabel.DoThreadSafeAsync(
                                                x => x.Visible = false, GenericToken).ConfigureAwait(false);
                                        }
                                    }

                                    await nudMysticAdeptMAGMagician.DoOneWayDataBindingAsync(
                                        "Maximum", CharacterObject.MAG,
                                        nameof(CharacterAttrib.Value), GenericToken).ConfigureAwait(false);
                                    await nudMysticAdeptMAGMagician.DoDataBindingAsync("Value", CharacterObject,
                                        nameof(Character.MysticAdeptPowerPoints), GenericToken).ConfigureAwait(false);

                                    await this.DoThreadSafeAsync(() =>
                                    {
                                        if (CharacterObject.MagicTradition.Type == TraditionType.MAG)
                                            cboTradition.SelectedValue = CharacterObject.MagicTradition.SourceIDString;
                                        else if (cboTradition.SelectedIndex == -1 && cboTradition.Items.Count > 0)
                                            cboTradition.SelectedIndex = 0;
                                        if (CharacterObject.MagicTradition.Type == TraditionType.RES)
                                            cboStream.SelectedValue = CharacterObject.MagicTradition.SourceIDString;
                                        else if (cboStream.SelectedIndex == -1 && cboStream.Items.Count > 0)
                                            cboStream.SelectedIndex = 0;
                                    }, GenericToken).ConfigureAwait(false);
                                    await txtTraditionName.DoDataBindingAsync("Text", CharacterObject.MagicTradition,
                                                                              nameof(Tradition.Name), GenericToken)
                                                          .ConfigureAwait(false);
                                }

                                using (Timekeeper.StartSyncron(
                                           "load_frm_create_databinding2", op_load_frm_create))
                                {
                                    await this.DoThreadSafeAsync(() =>
                                    {
                                        treGear.ItemDrag += treGear_ItemDrag;
                                        treGear.DragEnter += treGear_DragEnter;
                                        treGear.DragDrop += treGear_DragDrop;
                                        /*
                                        treLifestyles.ItemDrag += treLifestyles_ItemDrag;
                                        treLifestyles.DragEnter += treLifestyles_DragEnter;
                                        treLifestyles.DragDrop += treLifestyles_DragDrop;
                                        */
                                        treArmor.ItemDrag += treArmor_ItemDrag;
                                        treArmor.DragEnter += treArmor_DragEnter;
                                        treArmor.DragDrop += treArmor_DragDrop;
                                        treWeapons.ItemDrag += treWeapons_ItemDrag;
                                        treWeapons.DragEnter += treWeapons_DragEnter;
                                        treWeapons.DragDrop += treWeapons_DragDrop;
                                        treVehicles.ItemDrag += treVehicles_ItemDrag;
                                        treVehicles.DragEnter += treVehicles_DragEnter;
                                        treVehicles.DragDrop += treVehicles_DragDrop;
                                    }, GenericToken).ConfigureAwait(false);

                                    // Merge the ToolStrips.
                                    ToolStripManager.RevertMerge("toolStrip");
                                    ToolStripManager.Merge(tsMain, "toolStrip");

                                    await nudNuyen
                                          .DoDataBindingAsync("Value", CharacterObject, nameof(Character.NuyenBP),
                                                              GenericToken).ConfigureAwait(false);
                                    await nudNuyen.DoOneWayDataBindingAsync("Maximum", CharacterObject,
                                                                            nameof(Character.TotalNuyenMaximumBP),
                                                                            GenericToken).ConfigureAwait(false);

                                    await lblCMPhysical.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                        nameof(Character.PhysicalCMToolTip), GenericToken).ConfigureAwait(false);
                                    await lblCMPhysical.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.PhysicalCM), GenericToken).ConfigureAwait(false);
                                    await lblCMPhysicalLabel.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.PhysicalCMLabelText), GenericToken).ConfigureAwait(false);
                                    await lblCMStun.RegisterOneWayAsyncDataBindingAsync(
                                                       (x, y) => x.Text = y, CharacterObject,
                                                       nameof(Character.DisplayStunCM),
                                                       x => x.GetDisplayStunCMAsync(GenericToken), GenericToken,
                                                       GenericToken)
                                                   .ConfigureAwait(false);
                                    await lblCMStun.RegisterOneWayAsyncDataBindingAsync(
                                                       (x, y) => x.ToolTipText = y, CharacterObject,
                                                       nameof(Character.StunCMToolTip),
                                                       x => x.GetStunCMToolTipAsync(GenericToken), GenericToken,
                                                       GenericToken)
                                                   .ConfigureAwait(false);
                                    await lblCMStunLabel.RegisterOneWayAsyncDataBindingAsync(
                                                            (x, y) => x.Text = y, CharacterObject,
                                                            nameof(Character.StunCMLabelText),
                                                            x => x.GetStunCMLabelTextAsync(GenericToken), GenericToken,
                                                            GenericToken)
                                                        .ConfigureAwait(false);

                                    await lblESSMax.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                             nameof(Character.DisplayEssence),
                                                                             GenericToken).ConfigureAwait(false);
                                    await lblCyberwareESS.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.DisplayCyberwareEssence), GenericToken).ConfigureAwait(false);
                                    await lblBiowareESS.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.DisplayBiowareEssence), GenericToken).ConfigureAwait(false);
                                    await lblEssenceHoleESS.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.DisplayEssenceHole), GenericToken).ConfigureAwait(false);

                                    await lblPrototypeTranshumanESS.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                       nameof(Character
                                                                                  .DisplayPrototypeTranshumanEssenceUsed),
                                                                       GenericToken)
                                                                   .ConfigureAwait(false);

                                    await lblArmor.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                            nameof(Character.TotalArmorRating),
                                                                            GenericToken).ConfigureAwait(false);
                                    await lblArmor.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                                                            nameof(Character.TotalArmorRatingToolTip),
                                                                            GenericToken).ConfigureAwait(false);

                                    await lblDodge.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                            nameof(Character.DisplayDodge),
                                                                            GenericToken).ConfigureAwait(false);
                                    await lblDodge.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                                                            nameof(Character.DodgeToolTip),
                                                                            GenericToken).ConfigureAwait(false);

                                    await lblSpellDefenseIndirectDodge.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                          nameof(Character
                                                                              .DisplaySpellDefenseIndirectDodge),
                                                                          GenericToken)
                                                                      .ConfigureAwait(false);
                                    await lblSpellDefenseIndirectDodge.DoOneWayDataBindingAsync(
                                                                          "ToolTipText", CharacterObject,
                                                                          nameof(Character
                                                                              .SpellDefenseIndirectDodgeToolTip),
                                                                          GenericToken)
                                                                      .ConfigureAwait(false);
                                    await lblSpellDefenseIndirectSoak.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                         nameof(Character
                                                                             .DisplaySpellDefenseIndirectSoak),
                                                                         GenericToken)
                                                                     .ConfigureAwait(false);
                                    await lblSpellDefenseIndirectSoak.DoOneWayDataBindingAsync(
                                                                         "ToolTipText", CharacterObject,
                                                                         nameof(Character
                                                                             .SpellDefenseIndirectSoakToolTip),
                                                                         GenericToken)
                                                                     .ConfigureAwait(false);
                                    await lblSpellDefenseDirectSoakMana.DoOneWayDataBindingAsync(
                                                                           "Text", CharacterObject,
                                                                           nameof(Character
                                                                               .DisplaySpellDefenseDirectSoakMana),
                                                                           GenericToken)
                                                                       .ConfigureAwait(false);
                                    await lblSpellDefenseDirectSoakMana.DoOneWayDataBindingAsync(
                                                                           "ToolTipText", CharacterObject,
                                                                           nameof(Character
                                                                               .SpellDefenseDirectSoakManaToolTip),
                                                                           GenericToken)
                                                                       .ConfigureAwait(false);
                                    await lblSpellDefenseDirectSoakPhysical.DoOneWayDataBindingAsync(
                                        "Text", CharacterObject,
                                        nameof(Character.DisplaySpellDefenseDirectSoakPhysical), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDirectSoakPhysical.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(Character.SpellDefenseDirectSoakPhysicalToolTip), GenericToken).ConfigureAwait(false);

                                    await lblSpellDefenseDetection.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character
                                                   .DisplaySpellDefenseDetection), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDetection.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(Character
                                                   .SpellDefenseDetectionToolTip), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttBOD.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(
                                            Character
                                                .DisplaySpellDefenseDecreaseBOD), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttBOD.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(
                                            Character
                                                .SpellDefenseDecreaseBODToolTip), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttAGI.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(
                                            Character
                                                .DisplaySpellDefenseDecreaseAGI), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttAGI.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(
                                            Character
                                                .SpellDefenseDecreaseAGIToolTip), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttREA.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(
                                            Character
                                                .DisplaySpellDefenseDecreaseREA), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttREA.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(
                                            Character
                                                .SpellDefenseDecreaseREAToolTip), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttSTR.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(
                                            Character
                                                .DisplaySpellDefenseDecreaseSTR), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttSTR.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(
                                            Character
                                                .SpellDefenseDecreaseSTRToolTip), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttCHA.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(
                                            Character
                                                .DisplaySpellDefenseDecreaseCHA), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttCHA.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(
                                            Character
                                                .SpellDefenseDecreaseCHAToolTip), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttINT.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(
                                            Character
                                                .DisplaySpellDefenseDecreaseINT), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttINT.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(
                                            Character
                                                .SpellDefenseDecreaseINTToolTip), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttLOG.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(
                                            Character
                                                .DisplaySpellDefenseDecreaseLOG), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttLOG.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(
                                            Character
                                                .SpellDefenseDecreaseLOGToolTip), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttWIL.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(
                                            Character
                                                .DisplaySpellDefenseDecreaseWIL), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseDecAttWIL.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(
                                            Character
                                                .SpellDefenseDecreaseWILToolTip), GenericToken).ConfigureAwait(false);

                                    await lblSpellDefenseIllusionMana.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                         nameof(Character
                                                                             .DisplaySpellDefenseIllusionMana),
                                                                         GenericToken)
                                                                     .ConfigureAwait(false);
                                    await lblSpellDefenseIllusionMana.DoOneWayDataBindingAsync(
                                                                         "ToolTipText", CharacterObject,
                                                                         nameof(Character
                                                                             .SpellDefenseIllusionManaToolTip),
                                                                         GenericToken)
                                                                     .ConfigureAwait(false);
                                    await lblSpellDefenseIllusionPhysical.DoOneWayDataBindingAsync(
                                        "Text", CharacterObject,
                                        nameof(Character.DisplaySpellDefenseIllusionPhysical), GenericToken).ConfigureAwait(false);
                                    await lblSpellDefenseIllusionPhysical.DoOneWayDataBindingAsync(
                                                                             "ToolTipText", CharacterObject,
                                                                             nameof(Character
                                                                                 .SpellDefenseIllusionPhysicalToolTip),
                                                                             GenericToken)
                                                                         .ConfigureAwait(false);
                                    await lblSpellDefenseManipMental.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                        nameof(Character
                                                                                   .DisplaySpellDefenseManipulationMental),
                                                                        GenericToken)
                                                                    .ConfigureAwait(false);
                                    await lblSpellDefenseManipMental.DoOneWayDataBindingAsync(
                                                                        "ToolTipText", CharacterObject,
                                                                        nameof(Character
                                                                                   .SpellDefenseManipulationMentalToolTip),
                                                                        GenericToken)
                                                                    .ConfigureAwait(false);
                                    await lblSpellDefenseManipPhysical.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                          nameof(Character
                                                                              .DisplaySpellDefenseManipulationPhysical),
                                                                          GenericToken)
                                                                      .ConfigureAwait(false);
                                    await lblSpellDefenseManipPhysical.DoOneWayDataBindingAsync(
                                                                          "ToolTipText", CharacterObject,
                                                                          nameof(Character
                                                                              .SpellDefenseManipulationPhysicalToolTip),
                                                                          GenericToken)
                                                                      .ConfigureAwait(false);
                                    await nudCounterspellingDice.DoDataBindingAsync("Value", CharacterObject,
                                                                    nameof(Character.CurrentCounterspellingDice),
                                                                    GenericToken)
                                                                .ConfigureAwait(false);

                                    await nudLiftCarryHits.DoDataBindingAsync("Value", CharacterObject,
                                                                              nameof(Character.CurrentLiftCarryHits), GenericToken)
                                                          .ConfigureAwait(false);

                                    await lblMovement.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                               nameof(Character.DisplayMovement),
                                                                               GenericToken).ConfigureAwait(false);
                                    await lblSwim
                                          .DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                    nameof(Character.DisplaySwim), GenericToken)
                                          .ConfigureAwait(false);
                                    await lblFly
                                          .DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                    nameof(Character.DisplayFly), GenericToken)
                                          .ConfigureAwait(false);

                                    await lblRemainingNuyen.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.DisplayNuyen), GenericToken).ConfigureAwait(false);

                                    await lblStreetCredTotal.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.TotalStreetCred), GenericToken).ConfigureAwait(false);
                                    await lblStreetCredTotal.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                        nameof(Character.StreetCredTooltip), GenericToken).ConfigureAwait(false);
                                    await lblNotorietyTotal.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.TotalNotoriety), GenericToken).ConfigureAwait(false);
                                    await lblNotorietyTotal.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                        nameof(Character.NotorietyTooltip), GenericToken).ConfigureAwait(false);
                                    await lblPublicAwareTotal.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.TotalPublicAwareness), GenericToken).ConfigureAwait(false);
                                    await lblPublicAwareTotal.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                        nameof(Character.PublicAwarenessTooltip), GenericToken).ConfigureAwait(false);
                                    await lblAstralReputationTotal.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.TotalAstralReputation), GenericToken).ConfigureAwait(false);
                                    await lblAstralReputationTotal.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(Character.AstralReputationTooltip), GenericToken).ConfigureAwait(false);
                                    await lblWildReputationTotal.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.TotalWildReputation), GenericToken).ConfigureAwait(false);
                                    await lblWildReputationTotal.DoOneWayDataBindingAsync(
                                        "ToolTipText", CharacterObject,
                                        nameof(Character.WildReputationTooltip), GenericToken).ConfigureAwait(false);

                                    await lblMentorSpirit.RegisterOneWayAsyncDataBindingAsync(
                                        (x, y) => x.Text = y, CharacterObject,
                                        nameof(Character.FirstMentorSpiritDisplayName),
                                        x => x.GetFirstMentorSpiritDisplayNameAsync(GenericToken), GenericToken,
                                        GenericToken).ConfigureAwait(false);
                                    await lblMentorSpiritInformation.RegisterOneWayAsyncDataBindingAsync(
                                        (x, y) => x.Text = y, CharacterObject,
                                        nameof(Character.FirstMentorSpiritDisplayInformation),
                                        x => x.GetFirstMentorSpiritDisplayInformationAsync(GenericToken), GenericToken,
                                        GenericToken).ConfigureAwait(false);
                                    await lblParagon.RegisterOneWayAsyncDataBindingAsync(
                                        (x, y) => x.Text = y, CharacterObject,
                                        nameof(Character.FirstMentorSpiritDisplayName),
                                        x => x.GetFirstMentorSpiritDisplayNameAsync(GenericToken), GenericToken,
                                        GenericToken).ConfigureAwait(false);
                                    await lblParagonInformation.RegisterOneWayAsyncDataBindingAsync(
                                        (x, y) => x.Text = y, CharacterObject,
                                        nameof(Character.FirstMentorSpiritDisplayInformation),
                                        x => x.GetFirstMentorSpiritDisplayInformationAsync(GenericToken), GenericToken,
                                        GenericToken).ConfigureAwait(false);

                                    await lblComposure.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                        nameof(Character.ComposureToolTip), GenericToken).ConfigureAwait(false);
                                    await lblComposure.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.Composure), GenericToken).ConfigureAwait(false);
                                    await lblSurprise.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                                                               nameof(Character.SurpriseToolTip),
                                                                               GenericToken).ConfigureAwait(false);
                                    await lblSurprise.DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                               nameof(Character.Surprise), GenericToken)
                                                     .ConfigureAwait(false);
                                    await lblJudgeIntentions.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                        nameof(Character.JudgeIntentionsToolTip), GenericToken).ConfigureAwait(false);
                                    await lblJudgeIntentions.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.JudgeIntentions), GenericToken).ConfigureAwait(false);
                                    await lblLiftCarry.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                        nameof(Character.LiftAndCarryToolTip), GenericToken).ConfigureAwait(false);
                                    await lblLiftCarry.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.LiftAndCarry), GenericToken).ConfigureAwait(false);
                                    await lblMemory.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                                                             nameof(Character.MemoryToolTip),
                                                                             GenericToken).ConfigureAwait(false);
                                    await lblMemory
                                          .DoOneWayDataBindingAsync("Text", CharacterObject, nameof(Character.Memory),
                                                                    GenericToken).ConfigureAwait(false);

                                    await lblLiftCarryLimits.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.LiftAndCarryLimits), GenericToken).ConfigureAwait(false);

                                    await lblINI.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                                                          nameof(Character.InitiativeToolTip),
                                                                          GenericToken).ConfigureAwait(false);
                                    await lblINI
                                          .DoOneWayDataBindingAsync("Text", CharacterObject,
                                                                    nameof(Character.Initiative), GenericToken)
                                          .ConfigureAwait(false);
                                    await lblAstralINI.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                        nameof(Character.AstralInitiativeToolTip), GenericToken).ConfigureAwait(false);
                                    await lblAstralINI.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.AstralInitiative), GenericToken).ConfigureAwait(false);
                                    await lblMatrixINI.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                        nameof(Character.MatrixInitiativeToolTip), GenericToken).ConfigureAwait(false);
                                    await lblMatrixINI.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.MatrixInitiative), GenericToken).ConfigureAwait(false);
                                    await lblMatrixINICold.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                                              nameof(Character.MatrixInitiativeColdToolTip),
                                                              GenericToken)
                                                          .ConfigureAwait(false);
                                    await lblMatrixINICold.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.MatrixInitiativeCold), GenericToken).ConfigureAwait(false);
                                    await lblMatrixINIHot.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                                             nameof(Character.MatrixInitiativeHotToolTip), GenericToken)
                                                         .ConfigureAwait(false);
                                    await lblMatrixINIHot.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.MatrixInitiativeHot), GenericToken).ConfigureAwait(false);
                                    await lblRiggingINI.DoOneWayDataBindingAsync("ToolTipText", CharacterObject,
                                        nameof(Character.InitiativeToolTip), GenericToken).ConfigureAwait(false);
                                    await lblRiggingINI.DoOneWayDataBindingAsync("Text", CharacterObject,
                                        nameof(Character.Initiative), GenericToken).ConfigureAwait(false);
                                }

                                using (Timekeeper.StartSyncron(
                                           "load_frm_create_vehicle", op_load_frm_create))
                                {
                                    // Populate vehicle weapon fire mode list.
                                    using (new FetchSafelyFromPool<List<ListItem>>(Utils.ListItemListPool,
                                               out List<ListItem> lstFireModes))
                                    {
                                        foreach (Weapon.FiringMode mode in Enum.GetValues(typeof(Weapon.FiringMode)))
                                        {
                                            if (mode == Weapon.FiringMode.NumFiringModes)
                                                continue;
                                            lstFireModes.Add(new ListItem(mode,
                                                                          await LanguageManager
                                                                              .GetStringAsync("Enum_" + mode, token: GenericToken)
                                                                              .ConfigureAwait(false)));
                                        }

                                        await cboVehicleWeaponFiringMode.PopulateWithListItemsAsync(
                                            lstFireModes, GenericToken).ConfigureAwait(false);
                                    }
                                }

                                using (Timekeeper.StartSyncron("load_frm_create_miscstuff",
                                                                              op_load_frm_create))
                                {
                                    await SetTooltips(GenericToken).ConfigureAwait(false);
                                    await RefreshAttributes(pnlAttributes, null, lblAttributes,
                                                            await lblKarma.DoThreadSafeFuncAsync(x =>
                                                                              x.PreferredWidth, GenericToken)
                                                                          .ConfigureAwait(false),
                                                            await lblAttributesAug.DoThreadSafeFuncAsync(
                                                                    x => x.PreferredWidth, GenericToken)
                                                                .ConfigureAwait(false),
                                                            await lblAttributesMetatype.DoThreadSafeFuncAsync(
                                                                    x => x.PreferredWidth, GenericToken)
                                                                .ConfigureAwait(false),
                                                            GenericToken).ConfigureAwait(false);

                                    CharacterObject.AttributeSection.Attributes.CollectionChanged
                                        += AttributeCollectionChanged;

                                    await DoRefreshPasteStatus(GenericToken).ConfigureAwait(false);
                                    await ProcessMugshot(GenericToken).ConfigureAwait(false);

                                    // Stupid hack to get the MDI icon to show up properly.
                                    await this.DoThreadSafeFuncAsync(x => x.Icon = x.Icon.Clone() as Icon, GenericToken)
                                              .ConfigureAwait(false);
                                }

                                using (CustomActivity op_load_frm_create_longloads
                                       = Timekeeper.StartSyncron("load_frm_create_longloads",
                                                                            op_load_frm_create))
                                {
                                    using (Timekeeper.StartSyncron(
                                               "load_frm_create_Run through all appropriate property changers",
                                               op_load_frm_create_longloads))
                                    {
                                        // Run through all appropriate property changers
                                        foreach (PropertyInfo objProperty in typeof(Character).GetProperties())
                                            await DoOnCharacterPropertyChanged(
                                                new PropertyChangedEventArgs(objProperty.Name)).ConfigureAwait(false);
                                    }

                                    using (Timekeeper.StartSyncron(
                                               "load_frm_create_tabPowerUc.RealLoad()",
                                               op_load_frm_create_longloads))
                                    {
                                        await tabPowerUc.RealLoad(GenericToken, GenericToken).ConfigureAwait(false);
                                    }

                                    using (Timekeeper.StartSyncron(
                                               "load_frm_create_tabSkillsUc.RealLoad()",
                                               op_load_frm_create_longloads))
                                    {
                                        await tabSkillsUc.RealLoad(GenericToken, GenericToken).ConfigureAwait(false);
                                    }
                                }

                                using (Timekeeper.StartSyncron(
                                           "load_frm_create_refresh", op_load_frm_create))
                                {
                                    await cmdAddMetamagic.DoOneWayDataBindingAsync("Enabled", CharacterObject,
                                        nameof(Character.AddInitiationsAllowed), GenericToken).ConfigureAwait(false);

                                    await cmdLifeModule.DoOneWayDataBindingAsync("Visible", CharacterObject,
                                                           nameof(Character
                                                                      .EffectiveBuildMethodIsLifeModule), GenericToken)
                                                       .ConfigureAwait(false);
                                    await btnCreateBackstory.DoOneWayDataBindingAsync("Visible", CharacterObject,
                                        nameof(Character
                                                   .EnableAutomaticStoryButton), GenericToken).ConfigureAwait(false);

                                    if (!await CharacterObjectSettings.BookEnabledAsync("RF", GenericToken)
                                                                      .ConfigureAwait(false))
                                    {
                                        await cmdAddLifestyle.DoThreadSafeAsync(
                                            x => x.SplitMenuStrip = null, GenericToken).ConfigureAwait(false);
                                    }

                                    if (!await CharacterObjectSettings.BookEnabledAsync("FA", GenericToken)
                                                                      .ConfigureAwait(false))
                                    {
                                        await lblWildReputation.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                                               .ConfigureAwait(false);
                                        await lblWildReputationTotal.DoThreadSafeAsync(
                                            x => x.Visible = false, GenericToken).ConfigureAwait(false);
                                        if (!await CharacterObjectSettings.BookEnabledAsync("SG", GenericToken)
                                                                          .ConfigureAwait(false))
                                        {
                                            await lblAstralReputation.DoThreadSafeAsync(
                                                x => x.Visible = false, GenericToken).ConfigureAwait(false);
                                            await lblAstralReputationTotal.DoThreadSafeAsync(
                                                x => x.Visible = false, GenericToken).ConfigureAwait(false);
                                        }
                                    }

                                    if (!CharacterObjectSettings.EnableEnemyTracking)
                                    {
                                        await tabPeople.DoThreadSafeAsync(
                                            x => x.TabPages.Remove(tabEnemies), GenericToken).ConfigureAwait(false);
                                        await lblEnemiesBP.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                                          .ConfigureAwait(false);
                                        await lblBuildEnemies.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                                             .ConfigureAwait(false);
                                    }

                                    await RefreshQualities(treQualities, cmsQuality, _fntNormal, _fntStrikeout,
                                                           token: GenericToken).ConfigureAwait(false);
                                    await RefreshSpirits(panSpirits, panSprites, token: GenericToken)
                                        .ConfigureAwait(false);
                                    await RefreshSpells(treSpells, treMetamagic, cmsSpell, cmsInitiationNotes,
                                                        token: GenericToken).ConfigureAwait(false);
                                    await RefreshComplexForms(treComplexForms, treMetamagic, cmsComplexForm,
                                                              cmsInitiationNotes, token: GenericToken)
                                        .ConfigureAwait(false);
                                    await RefreshPowerCollectionListChanged(
                                            treMetamagic, cmsMetamagic, cmsInitiationNotes, token: GenericToken)
                                        .ConfigureAwait(false);
                                    await RefreshInitiationGrades(treMetamagic, cmsMetamagic, cmsInitiationNotes,
                                                                  token: GenericToken).ConfigureAwait(false);
                                    await RefreshAIPrograms(treAIPrograms, cmsAdvancedProgram, token: GenericToken)
                                        .ConfigureAwait(false);
                                    await RefreshCritterPowers(treCritterPowers, cmsCritterPowers, token: GenericToken)
                                        .ConfigureAwait(false);
                                    await RefreshMartialArts(treMartialArts, cmsMartialArts, cmsTechnique,
                                                             token: GenericToken).ConfigureAwait(false);
                                    await RefreshLifestyles(treLifestyles, cmsLifestyleNotes, cmsAdvancedLifestyle,
                                                            token: GenericToken).ConfigureAwait(false);
                                    await RefreshContacts(panContacts, panEnemies, panPets, token: GenericToken)
                                        .ConfigureAwait(false);

                                    await RefreshArmor(treArmor, cmsArmorLocation, cmsArmor, cmsArmorMod, cmsArmorGear,
                                                       token: GenericToken).ConfigureAwait(false);
                                    await RefreshGears(treGear, cmsGearLocation, cmsGear, cmsGearAllowRename,
                                                       await chkCommlinks.DoThreadSafeFuncAsync(
                                                           x => x.Checked, GenericToken).ConfigureAwait(false), false,
                                                       token: GenericToken).ConfigureAwait(false);
                                    await RefreshFociFromGear(treFoci, null, token: GenericToken).ConfigureAwait(false);
                                    await RefreshCyberware(treCyberware, cmsCyberware, cmsCyberwareGear,
                                                           token: GenericToken).ConfigureAwait(false);
                                    await RefreshWeapons(treWeapons, cmsWeaponLocation, cmsWeapon, cmsWeaponAccessory,
                                                         cmsWeaponAccessoryGear, token: GenericToken)
                                        .ConfigureAwait(false);
                                    await RefreshVehicles(treVehicles, cmsVehicleLocation, cmsVehicle, cmsVehicleWeapon,
                                                          cmsVehicleWeaponAccessory, cmsVehicleWeaponAccessoryGear,
                                                          cmsVehicleGear,
                                                          cmsWeaponMount,
                                                          cmsVehicleCyberware, cmsVehicleCyberwareGear,
                                                          token: GenericToken).ConfigureAwait(false);
                                    await RefreshDrugs(treCustomDrugs, token: GenericToken).ConfigureAwait(false);
                                }

                                using (Timekeeper.StartSyncron(
                                           "load_frm_create_sortAndCallback", op_load_frm_create))
                                {
                                    await treWeapons.DoThreadSafeAsync(x => x.SortCustomOrder(), GenericToken)
                                                    .ConfigureAwait(false);
                                    await treArmor.DoThreadSafeAsync(x => x.SortCustomOrder(), GenericToken)
                                                  .ConfigureAwait(false);
                                    await treGear.DoThreadSafeAsync(x => x.SortCustomOrder(), GenericToken)
                                                 .ConfigureAwait(false);
                                    await treLifestyles.DoThreadSafeAsync(x => x.SortCustomOrder(), GenericToken)
                                                       .ConfigureAwait(false);
                                    await treCustomDrugs.DoThreadSafeAsync(x => x.SortCustomOrder(), GenericToken)
                                                        .ConfigureAwait(false);
                                    await treCyberware.DoThreadSafeAsync(x => x.SortCustomOrder(true), GenericToken)
                                                      .ConfigureAwait(false);
                                    await treVehicles.DoThreadSafeAsync(x => x.SortCustomOrder(), GenericToken)
                                                     .ConfigureAwait(false);
                                    await treCritterPowers.DoThreadSafeAsync(x => x.SortCustomOrder(), GenericToken)
                                                          .ConfigureAwait(false);

                                    // Set up events that would change various lists
                                    CharacterObject.Spells.CollectionChanged += SpellCollectionChanged;
                                    CharacterObject.ComplexForms.CollectionChanged += ComplexFormCollectionChanged;
                                    CharacterObject.Arts.CollectionChanged += ArtCollectionChanged;
                                    CharacterObject.Enhancements.CollectionChanged += EnhancementCollectionChanged;
                                    CharacterObject.Metamagics.CollectionChanged += MetamagicCollectionChanged;
                                    CharacterObject.InitiationGrades.CollectionChanged
                                        += InitiationGradeCollectionChanged;
                                    CharacterObject.Powers.ListChanged += PowersListChanged;
                                    CharacterObject.Powers.BeforeRemove += PowersBeforeRemove;
                                    CharacterObject.AIPrograms.CollectionChanged += AIProgramCollectionChanged;
                                    CharacterObject.CritterPowers.CollectionChanged += CritterPowerCollectionChanged;
                                    CharacterObject.Qualities.CollectionChanged += QualityCollectionChanged;
                                    CharacterObject.MartialArts.CollectionChanged += MartialArtCollectionChanged;
                                    CharacterObject.Lifestyles.CollectionChanged += LifestyleCollectionChanged;
                                    CharacterObject.Contacts.CollectionChanged += ContactCollectionChanged;
                                    CharacterObject.Spirits.CollectionChanged += SpiritCollectionChanged;
                                    CharacterObject.Armor.CollectionChanged += ArmorCollectionChanged;
                                    CharacterObject.ArmorLocations.CollectionChanged += ArmorLocationCollectionChanged;
                                    CharacterObject.Weapons.CollectionChanged += WeaponCollectionChanged;
                                    CharacterObject.WeaponLocations.CollectionChanged
                                        += WeaponLocationCollectionChanged;
                                    CharacterObject.Gear.CollectionChanged += GearCollectionChanged;
                                    CharacterObject.GearLocations.CollectionChanged += GearLocationCollectionChanged;
                                    CharacterObject.Drugs.CollectionChanged += DrugCollectionChanged;
                                    CharacterObject.Cyberware.CollectionChanged += CyberwareCollectionChanged;
                                    CharacterObject.Vehicles.CollectionChanged += VehicleCollectionChanged;
                                    CharacterObject.VehicleLocations.CollectionChanged
                                        += VehicleLocationCollectionChanged;

                                    SetupCommonCollectionDatabindings(true);
                                }
                            }
                            finally
                            {
                                IsLoading = false;
                            }

                            using (Timekeeper.StartSyncron("load_frm_create_finish", op_load_frm_create))
                            {
                                Task tskUpdate = await RequestCharacterUpdate().ConfigureAwait(false);
                                // Directly awaiting here so that we can properly unset the dirty flag after the update
                                await tskUpdate.ConfigureAwait(false);
                                // Clear the Dirty flag which gets set when creating a new Character.
                                if (!CharacterObject.LoadAsDirty)
                                    IsDirty = false;

                                await Program.PluginLoader.CallPlugins(this, op_load_frm_create, GenericToken).ConfigureAwait(false);
                            }

                            ConcurrentBag<string> lstInternalIdsNeedingReapplyImprovements
                                = await CharacterObject.TakeInternalIdsNeedingReapplyImprovementsAsync(GenericToken)
                                                       .ConfigureAwait(false);
                            if (lstInternalIdsNeedingReapplyImprovements?.Count > 0
                                && !Utils.IsUnitTest
                                && Program.ShowScrollableMessageBox(this,
                                                          await LanguageManager.GetStringAsync(
                                                              "Message_ImprovementLoadError", token: GenericToken).ConfigureAwait(false),
                                                          await LanguageManager.GetStringAsync(
                                                                                   "MessageTitle_ImprovementLoadError", token: GenericToken)
                                                                               .ConfigureAwait(false),
                                                          MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation)
                                == DialogResult.Yes)
                            {
                                await DoReapplyImprovements(lstInternalIdsNeedingReapplyImprovements,
                                                            GenericToken).ConfigureAwait(false);
                            }

                            op_load_frm_create.SetSuccess(true);
                        }
                        catch (OperationCanceledException)
                        {
                            //swallow this
                            op_load_frm_create?.SetSuccess(false);
                        }
                        catch (Exception ex)
                        {
                            if (op_load_frm_create != null)
                            {
                                op_load_frm_create.SetSuccess(false);
                                op_load_frm_create.MyTelemetryClient.TrackException(ex);
                            }

                            Log.Error(ex);
                            throw;
                        }
                        finally
                        {
                            await this.DoThreadSafeAsync(x => x.ResumeLayout(true), GenericToken).ConfigureAwait(false);
                        }
                    }
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            finally
            {
                IsFinishedInitializing = true;
            }
        }

        private async void CharacterCreate_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    IsLoading = true;
                    try
                    {
                        // If there are unsaved changes to the character, as the user if they would like to save their changes.
                        if (IsDirty && !Utils.IsUnitTest)
                        {
                            string strCharacterName = await CharacterObject.GetCharacterNameAsync(GenericToken)
                                                                           .ConfigureAwait(false);
                            DialogResult eResult = Program.ShowScrollableMessageBox(
                                this,
                                string.Format(GlobalSettings.CultureInfo,
                                              await LanguageManager
                                                    .GetStringAsync("Message_UnsavedChanges", token: GenericToken)
                                                    .ConfigureAwait(false),
                                              strCharacterName),
                                await LanguageManager.GetStringAsync("MessageTitle_UnsavedChanges", token: GenericToken)
                                                     .ConfigureAwait(false),
                                MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                            switch (eResult)
                            {
                                case DialogResult.Yes:
                                {
                                    // Attempt to save the Character. If the user cancels the Save As dialogue that may open, cancel the closing event so that changes are not lost.
                                    bool blnResult = await SaveCharacter(token: GenericToken).ConfigureAwait(false);
                                    if (!blnResult)
                                        e.Cancel = true;
                                    break;
                                }
                                case DialogResult.Cancel:
                                    e.Cancel = true;
                                    break;
                            }
                        }

                        if (e.Cancel)
                            throw new OperationCanceledException();

                        await this.DoThreadSafeAsync(x => x.UseWaitCursor = true, GenericToken).ConfigureAwait(false);
                        GenericCancellationTokenSource?.Cancel(false);

                        // Reset the ToolStrip so the Save button is removed for the currently closing window.
                        if (Program.MainForm.ActiveMdiChild == this)
                            ToolStripManager.RevertMerge("toolStrip");

                        // Unsubscribe from events.
                        GlobalSettings.ClipboardChanged -= RefreshPasteStatus;
                        CharacterObject.AttributeSection.Attributes.CollectionChanged -= AttributeCollectionChanged;
                        CharacterObject.Spells.CollectionChanged -= SpellCollectionChanged;
                        CharacterObject.ComplexForms.CollectionChanged -= ComplexFormCollectionChanged;
                        CharacterObject.Arts.CollectionChanged -= ArtCollectionChanged;
                        CharacterObject.Enhancements.CollectionChanged -= EnhancementCollectionChanged;
                        CharacterObject.Metamagics.CollectionChanged -= MetamagicCollectionChanged;
                        CharacterObject.InitiationGrades.CollectionChanged -= InitiationGradeCollectionChanged;
                        CharacterObject.Powers.ListChanged -= PowersListChanged;
                        CharacterObject.Powers.BeforeRemove -= PowersBeforeRemove;
                        CharacterObject.AIPrograms.CollectionChanged -= AIProgramCollectionChanged;
                        CharacterObject.CritterPowers.CollectionChanged -= CritterPowerCollectionChanged;
                        CharacterObject.Qualities.CollectionChanged -= QualityCollectionChanged;
                        CharacterObject.MartialArts.CollectionChanged -= MartialArtCollectionChanged;
                        CharacterObject.Lifestyles.CollectionChanged -= LifestyleCollectionChanged;
                        CharacterObject.Contacts.CollectionChanged -= ContactCollectionChanged;
                        CharacterObject.Spirits.CollectionChanged -= SpiritCollectionChanged;
                        CharacterObject.Armor.CollectionChanged -= ArmorCollectionChanged;
                        CharacterObject.ArmorLocations.CollectionChanged -= ArmorLocationCollectionChanged;
                        CharacterObject.Weapons.CollectionChanged -= WeaponCollectionChanged;
                        CharacterObject.Drugs.CollectionChanged -= DrugCollectionChanged;
                        CharacterObject.WeaponLocations.CollectionChanged -= WeaponLocationCollectionChanged;
                        CharacterObject.Gear.CollectionChanged -= GearCollectionChanged;
                        CharacterObject.GearLocations.CollectionChanged -= GearLocationCollectionChanged;
                        CharacterObject.Cyberware.CollectionChanged -= CyberwareCollectionChanged;
                        CharacterObject.Vehicles.CollectionChanged -= VehicleCollectionChanged;
                        CharacterObject.VehicleLocations.CollectionChanged -= VehicleLocationCollectionChanged;
                        using (CharacterObject.LockObject.EnterWriteLock(CancellationToken.None))
                        {
                            CharacterObject.PropertyChanged -= OnCharacterPropertyChanged;
                            CharacterObject.SettingsPropertyChanged -= OnCharacterSettingsPropertyChanged;
                        }

                        SetupCommonCollectionDatabindings(false);

                        treGear.ItemDrag -= treGear_ItemDrag;
                        treGear.DragEnter -= treGear_DragEnter;
                        treGear.DragDrop -= treGear_DragDrop;

                        /*
                        treLifestyles.ItemDrag -= treLifestyles_ItemDrag;
                        treLifestyles.DragEnter -= treLifestyles_DragEnter;
                        treLifestyles.DragDrop -= treLifestyles_DragDrop;
                        */

                        treArmor.ItemDrag -= treArmor_ItemDrag;
                        treArmor.DragEnter -= treArmor_DragEnter;
                        treArmor.DragDrop -= treArmor_DragDrop;

                        treWeapons.ItemDrag -= treWeapons_ItemDrag;
                        treWeapons.DragEnter -= treWeapons_DragEnter;
                        treWeapons.DragDrop -= treWeapons_DragDrop;

                        treVehicles.ItemDrag -= treVehicles_ItemDrag;
                        treVehicles.DragEnter -= treVehicles_DragEnter;
                        treVehicles.DragDrop -= treVehicles_DragDrop;

                        foreach (ContactControl objContactControl in panContacts.Controls.OfType<ContactControl>())
                        {
                            objContactControl.ContactDetailChanged -= MakeDirtyWithCharacterUpdate;
                            objContactControl.DeleteContact -= DeleteContact;
                            objContactControl.MouseDown -= DragContactControl;
                        }

                        foreach (ContactControl objContactControl in panEnemies.Controls.OfType<ContactControl>())
                        {
                            objContactControl.ContactDetailChanged -= MakeDirtyWithCharacterUpdate;
                            objContactControl.DeleteContact -= DeleteEnemy;
                            objContactControl.MouseDown -= DragContactControl;
                        }

                        foreach (PetControl objPetControl in panPets.Controls.OfType<PetControl>())
                        {
                            objPetControl.DeleteContact -= DeletePet;
                            objPetControl.ContactDetailChanged -= MakeDirtyWithCharacterUpdate;
                        }

                        foreach (SpiritControl objSpiritControl in panSpirits.Controls.OfType<SpiritControl>())
                        {
                            objSpiritControl.ContactDetailChanged -= MakeDirtyWithCharacterUpdate;
                            objSpiritControl.DeleteSpirit -= DeleteSpirit;
                        }

                        foreach (SpiritControl objSpiritControl in panSprites.Controls.OfType<SpiritControl>())
                        {
                            objSpiritControl.ContactDetailChanged -= MakeDirtyWithCharacterUpdate;
                            objSpiritControl.DeleteSpirit -= DeleteSpirit;
                        }

                        try
                        {
                            await UpdateCharacterInfoTask.ConfigureAwait(false);
                        }
                        catch (OperationCanceledException)
                        {
                            // Swallow this
                        }
                    }
                    catch
                    {
                        IsLoading = false;
                        throw;
                    }
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private void CharacterCreate_Activated(object sender, EventArgs e)
        {
            // Merge the ToolStrips.
            ToolStripManager.RevertMerge("toolStrip");
            ToolStripManager.Merge(tsMain, "toolStrip");
        }

        #endregion Form Events

        #region Character Events

        private async void OnCharacterPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            await DoOnCharacterPropertyChanged(e).ConfigureAwait(false);
        }

        private async ValueTask DoOnCharacterPropertyChanged(PropertyChangedEventArgs e)
        {
            if (_blnReapplyImprovements)
                return;
            try
            {
                await SetDirty(true).ConfigureAwait(false);
                switch (e.PropertyName)
                {
                    case nameof(Character.CharacterName):
                        await UpdateWindowTitleAsync(false, GenericToken).ConfigureAwait(false);
                        break;

                    case nameof(Character.DisplayNuyen):
                        await StatusStrip.DoThreadSafeAsync(() => tslNuyenRemaining.Text = CharacterObject.DisplayNuyen,
                                                            GenericToken).ConfigureAwait(false);
                        break;

                    case nameof(Character.StolenNuyen):
                        bool show = await ImprovementManager.ValueOfAsync(
                                                                CharacterObject, Improvement.ImprovementType.Nuyen,
                                                                strImprovedName: "Stolen", token: GenericToken)
                                                            .ConfigureAwait(false) != 0;

                        await lblStolenNuyen.DoThreadSafeAsync(x => x.Visible = show, GenericToken)
                                            .ConfigureAwait(false);
                        await lblStolenNuyenLabel.DoThreadSafeAsync(x => x.Visible = show, GenericToken)
                                                 .ConfigureAwait(false);
                        break;

                    case nameof(Character.DisplayEssence):
                        await StatusStrip.DoThreadSafeAsync(() => tslEssence.Text = CharacterObject.DisplayEssence,
                                                            GenericToken).ConfigureAwait(false);
                        break;

                    case nameof(Character.DisplayTotalCarriedWeight):
                        await StatusStrip.DoThreadSafeAsync(
                                             () => tslCarriedWeight.Text = CharacterObject.DisplayTotalCarriedWeight,
                                             GenericToken)
                                         .ConfigureAwait(false);
                        break;

                    case nameof(Character.Encumbrance):
                        Color objControlTextColor
                            = await ColorManager.GetControlTextAsync(GenericToken).ConfigureAwait(false);
                        await StatusStrip.DoThreadSafeAsync(() => tslCarriedWeight.ForeColor
                                                                = CharacterObject.Encumbrance > 0
                                                                    ? ColorManager.ErrorColor
                                                                    : objControlTextColor, GenericToken)
                                         .ConfigureAwait(false);
                        break;

                    case nameof(Character.NuyenBP):
                    case nameof(Character.MetatypeBP):
                    case nameof(Character.ContactPoints):
                    case nameof(Character.FreeSpells):
                    case nameof(Character.CFPLimit):
                    case nameof(Character.AIAdvancedProgramLimit):
                    case nameof(Character.SpellKarmaCost):
                    case nameof(Character.ComplexFormKarmaCost):
                    case nameof(Character.AIProgramKarmaCost):
                    case nameof(Character.AIAdvancedProgramKarmaCost):
                    case nameof(Character.MysticAdeptPowerPoints):
                    case nameof(Character.MagicTradition):
                    case nameof(Character.GroupMember):
                    case nameof(Character.HomeNode):
                    case nameof(Character.ActiveCommlink):
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        break;

                    case nameof(Character.Source):
                    case nameof(Character.Page):
                        await CharacterObject.SetSourceDetailAsync(lblMetatypeSource, GenericToken)
                                             .ConfigureAwait(false);
                        break;

                    case nameof(Character.MAGEnabled):
                    {
                        if (CharacterObject.MAGEnabled)
                        {
                            await tabCharacterTabs.DoThreadSafeAsync(x =>
                            {
                                if (!x.TabPages.Contains(tabInitiation))
                                    x.TabPages.Insert(3, tabInitiation);
                            }, GenericToken).ConfigureAwait(false);

                            await UpdateInitiationCost(GenericToken).ConfigureAwait(false);

                            string strTemp = await LanguageManager.GetStringAsync("Tab_Initiation", token: GenericToken)
                                                                  .ConfigureAwait(false);
                            await tabInitiation.DoThreadSafeAsync(x => x.Text = strTemp, GenericToken)
                                               .ConfigureAwait(false);
                            string strTemp2 = await LanguageManager
                                                    .GetStringAsync("Button_AddMetamagic", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await cmsMetamagic.DoThreadSafeAsync(() => tsMetamagicAddMetamagic.Text = strTemp2,
                                                                 GenericToken).ConfigureAwait(false);
                            string strTemp3 = await LanguageManager
                                                    .GetStringAsync("Button_AddInitiateGrade", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await cmdAddMetamagic.DoThreadSafeAsync(x => x.Text = strTemp3, GenericToken)
                                                 .ConfigureAwait(false);
                            string strTemp4 = await LanguageManager
                                                    .GetStringAsync("Button_RemoveInitiateGrade", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await cmdDeleteMetamagic.DoThreadSafeAsync(x => x.Text = strTemp4, GenericToken)
                                                    .ConfigureAwait(false);
                            string strTemp5 = await LanguageManager
                                                    .GetStringAsync("String_InitiationType", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await gpbInitiationType.DoThreadSafeAsync(x => x.Text = strTemp5, GenericToken)
                                                   .ConfigureAwait(false);
                            string strTemp6 = await LanguageManager
                                                    .GetStringAsync("String_InitiationGroup", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await gpbInitiationGroup.DoThreadSafeAsync(x => x.Text = strTemp6, GenericToken)
                                                    .ConfigureAwait(false);
                            string strText1 = string.Format(GlobalSettings.CultureInfo, await LanguageManager
                                                                .GetStringAsync(
                                                                    "Checkbox_InitiationOrdeal", token: GenericToken).ConfigureAwait(false),
                                                            CharacterObjectSettings.KarmaMAGInitiationOrdealPercent
                                                                .ToString(
                                                                    "P", GlobalSettings.CultureInfo));
                            await chkInitiationOrdeal.DoThreadSafeAsync(x => x.Text = strText1, GenericToken)
                                                     .ConfigureAwait(false);
                            string strText2 = string.Format(GlobalSettings.CultureInfo, await LanguageManager
                                                                .GetStringAsync(
                                                                    "Checkbox_InitiationGroup", token: GenericToken).ConfigureAwait(false),
                                                            CharacterObjectSettings.KarmaMAGInitiationGroupPercent
                                                                .ToString(
                                                                    "P", GlobalSettings.CultureInfo));
                            await chkInitiationGroup.DoThreadSafeAsync(x => x.Text = strText2, GenericToken)
                                                    .ConfigureAwait(false);
                            string strText3 = string.Format(GlobalSettings.CultureInfo, await LanguageManager
                                                                .GetStringAsync(
                                                                    "Checkbox_InitiationSchooling", token: GenericToken)
                                                                .ConfigureAwait(false),
                                                            CharacterObjectSettings.KarmaMAGInitiationSchoolingPercent
                                                                .ToString(
                                                                    "P", GlobalSettings.CultureInfo));
                            await chkInitiationSchooling.DoThreadSafeAsync(x =>
                            {
                                x.Text = strText3;
                                x.Enabled = true;
                            }, GenericToken).ConfigureAwait(false);
                            await cmsMetamagic.DoThreadSafeAsync(() =>
                            {
                                tsMetamagicAddArt.Visible = true;
                                tsMetamagicAddEnchantment.Visible = true;
                                tsMetamagicAddEnhancement.Visible = true;
                                tsMetamagicAddRitual.Visible = true;
                            }, GenericToken).ConfigureAwait(false);
                            string strInitTip = string.Format(GlobalSettings.CultureInfo,
                                                              await LanguageManager.GetStringAsync(
                                                                  "Tip_ImproveInitiateGrade", token: GenericToken).ConfigureAwait(false),
                                                              CharacterObject.InitiateGrade + 1,
                                                              CharacterObjectSettings.KarmaInitiationFlat + (CharacterObject.InitiateGrade + 1) * CharacterObjectSettings.KarmaInitiation);
                            await cmdAddMetamagic.SetToolTipAsync(strInitTip, GenericToken).ConfigureAwait(false);
                            string strTemp7 = await LanguageManager
                                                    .GetStringAsync("Checkbox_JoinedGroup", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await chkJoinGroup.DoThreadSafeAsync(x => x.Text = strTemp7, GenericToken)
                                              .ConfigureAwait(false);

                            if (!await CharacterObject.AttributeSection.Attributes
                                                      .ContainsAsync(CharacterObject.MAG, GenericToken)
                                                      .ConfigureAwait(false))
                            {
                                await CharacterObject.AttributeSection.Attributes
                                                     .AddAsync(CharacterObject.MAG, GenericToken).ConfigureAwait(false);
                            }

                            if (CharacterObjectSettings.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept)
                            {
                                CharacterAttrib objMAGAdept =
                                    await CharacterObject.AttributeSection
                                                         .GetAttributeByNameAsync("MAGAdept", GenericToken)
                                                         .ConfigureAwait(false);
                                if (!await CharacterObject.AttributeSection.Attributes
                                                          .ContainsAsync(objMAGAdept, GenericToken)
                                                          .ConfigureAwait(false))
                                {
                                    await CharacterObject.AttributeSection.Attributes
                                                         .AddAsync(objMAGAdept, GenericToken).ConfigureAwait(false);
                                }
                            }
                        }
                        else
                        {
                            if (!CharacterObject.RESEnabled)
                                await tabCharacterTabs
                                      .DoThreadSafeAsync(x => x.TabPages.Remove(tabInitiation), GenericToken)
                                      .ConfigureAwait(false);

                            if (CharacterObject.AttributeSection.Attributes != null)
                            {
                                await CharacterObject.AttributeSection.Attributes
                                                     .RemoveAsync(CharacterObject.MAG, GenericToken)
                                                     .ConfigureAwait(false);
                                await CharacterObject.AttributeSection.Attributes
                                                     .RemoveAsync(CharacterObject.MAGAdept, GenericToken)
                                                     .ConfigureAwait(false);
                            }
                        }

                        await gpbGearBondedFoci
                              .DoThreadSafeAsync(x => x.Visible = CharacterObject.MAGEnabled, GenericToken)
                              .ConfigureAwait(false);
                        await lblAstralINI.DoThreadSafeAsync(x => x.Visible = CharacterObject.MAGEnabled, GenericToken)
                                          .ConfigureAwait(false);

                        await RequestCharacterUpdate().ConfigureAwait(false);
                    }
                        break;

                    case nameof(Character.RESEnabled):
                    {
                        // Change to the status of RES being enabled.
                        if (CharacterObject.RESEnabled)
                        {
                            await tabCharacterTabs.DoThreadSafeAsync(x =>
                            {
                                if (!x.TabPages.Contains(tabInitiation))
                                    x.TabPages.Insert(3, tabInitiation);
                            }, GenericToken).ConfigureAwait(false);

                            /*
                            int intEssenceLoss = 0;
                            if (!CharacterObjectSettings.ESSLossReducesMaximumOnly)
                                intEssenceLoss = _objCharacter.EssencePenalty;
                            // If the character options permit submersion in create mode, show the Initiation page.
                            */

                            await UpdateInitiationCost(GenericToken).ConfigureAwait(false);

                            string strTemp1 = await LanguageManager
                                                    .GetStringAsync("Tab_Submersion", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await tabInitiation.DoThreadSafeAsync(x => x.Text = strTemp1, GenericToken)
                                               .ConfigureAwait(false);
                            string strTemp2 = await LanguageManager
                                                    .GetStringAsync("Button_AddEcho", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await cmsMetamagic.DoThreadSafeAsync(() => tsMetamagicAddMetamagic.Text = strTemp2,
                                                                 GenericToken).ConfigureAwait(false);
                            string strTemp3 = await LanguageManager
                                                    .GetStringAsync("Button_AddSubmersionGrade", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await cmdAddMetamagic.DoThreadSafeAsync(x => x.Text = strTemp3, GenericToken)
                                                 .ConfigureAwait(false);
                            string strTemp4 = await LanguageManager
                                                    .GetStringAsync("Button_RemoveSubmersionGrade", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await cmdDeleteMetamagic.DoThreadSafeAsync(x => x.Text = strTemp4, GenericToken)
                                                    .ConfigureAwait(false);
                            string strTemp5 = await LanguageManager
                                                    .GetStringAsync("String_SubmersionType", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await gpbInitiationType.DoThreadSafeAsync(x => x.Text = strTemp5, GenericToken)
                                                   .ConfigureAwait(false);
                            string strTemp6 = await LanguageManager
                                                    .GetStringAsync("String_SubmersionNetwork", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await gpbInitiationGroup.DoThreadSafeAsync(x => x.Text = strTemp6, GenericToken)
                                                    .ConfigureAwait(false);
                            string strText1 = string.Format(GlobalSettings.CultureInfo, await LanguageManager
                                                                .GetStringAsync(
                                                                    "Checkbox_SubmersionTask", token: GenericToken).ConfigureAwait(false),
                                                            CharacterObjectSettings.KarmaRESInitiationOrdealPercent
                                                                .ToString(
                                                                    "P", GlobalSettings.CultureInfo));
                            await chkInitiationOrdeal.DoThreadSafeAsync(x => x.Text = strText1, GenericToken)
                                                     .ConfigureAwait(false);
                            string strText2 = string.Format(GlobalSettings.CultureInfo, await LanguageManager
                                                                .GetStringAsync(
                                                                    "Checkbox_NetworkSubmersion", token: GenericToken).ConfigureAwait(false),
                                                            CharacterObjectSettings.KarmaRESInitiationGroupPercent
                                                                .ToString(
                                                                    "P", GlobalSettings.CultureInfo));
                            await chkInitiationGroup.DoThreadSafeAsync(x => x.Text = strText2, GenericToken)
                                                    .ConfigureAwait(false);
                            string strText3 = string.Format(GlobalSettings.CultureInfo, await LanguageManager
                                                                .GetStringAsync(
                                                                    "Checkbox_InitiationSchooling", token: GenericToken)
                                                                .ConfigureAwait(false),
                                                            CharacterObjectSettings.KarmaRESInitiationSchoolingPercent
                                                                .ToString(
                                                                    "P", GlobalSettings.CultureInfo));
                            await chkInitiationSchooling.DoThreadSafeAsync(x =>
                            {
                                x.Text = strText3;
                                x.Enabled = CharacterObjectSettings.AllowTechnomancerSchooling;
                            }, GenericToken).ConfigureAwait(false);
                            await cmsMetamagic.DoThreadSafeAsync(() =>
                            {
                                tsMetamagicAddArt.Visible = false;
                                tsMetamagicAddEnchantment.Visible = false;
                                tsMetamagicAddEnhancement.Visible = false;
                                tsMetamagicAddRitual.Visible = false;
                            }, GenericToken).ConfigureAwait(false);
                            string strInitTip = string.Format(GlobalSettings.CultureInfo,
                                                              await LanguageManager.GetStringAsync(
                                                                  "Tip_ImproveSubmersionGrade", token: GenericToken).ConfigureAwait(false),
                                                              CharacterObject.SubmersionGrade + 1,
                                                              CharacterObjectSettings.KarmaInitiationFlat + (CharacterObject.SubmersionGrade + 1) * CharacterObjectSettings.KarmaInitiation);
                            await cmdAddMetamagic.SetToolTipAsync(strInitTip, GenericToken).ConfigureAwait(false);
                            string strTemp7 = await LanguageManager
                                                    .GetStringAsync("Checkbox_JoinedNetwork", token: GenericToken)
                                                    .ConfigureAwait(false);
                            await chkJoinGroup.DoThreadSafeAsync(x => x.Text = strTemp7, GenericToken)
                                              .ConfigureAwait(false);

                            if (CharacterObject.AttributeSection.Attributes != null
                                && !await CharacterObject.AttributeSection.Attributes.ContainsAsync(
                                    CharacterObject.RES, GenericToken).ConfigureAwait(false))
                            {
                                await CharacterObject.AttributeSection.Attributes.AddAsync(
                                    CharacterObject.RES, GenericToken).ConfigureAwait(false);
                            }
                        }
                        else
                        {
                            if (!CharacterObject.MAGEnabled)
                                await tabCharacterTabs
                                      .DoThreadSafeAsync(x => x.TabPages.Remove(tabInitiation), GenericToken)
                                      .ConfigureAwait(false);
                            if (CharacterObject.AttributeSection.Attributes != null)
                            {
                                await CharacterObject.AttributeSection.Attributes
                                                     .RemoveAsync(CharacterObject.RES, GenericToken)
                                                     .ConfigureAwait(false);
                            }
                        }

                        await RequestCharacterUpdate().ConfigureAwait(false);
                    }
                        break;

                    case nameof(Character.DEPEnabled):
                    {
                        if (CharacterObject.DEPEnabled)
                        {
                            if (!(await CharacterObject.AttributeSection.Attributes
                                                       .ContainsAsync(CharacterObject.DEP, GenericToken)
                                                       .ConfigureAwait(false)))
                            {
                                await CharacterObject.AttributeSection.Attributes
                                                     .AddAsync(CharacterObject.DEP, GenericToken).ConfigureAwait(false);
                            }
                        }
                        else if (await CharacterObject.AttributeSection.Attributes
                                                      .ContainsAsync(CharacterObject.DEP, GenericToken)
                                                      .ConfigureAwait(false))
                        {
                            await CharacterObject.AttributeSection.Attributes
                                                 .RemoveAsync(CharacterObject.DEP, GenericToken).ConfigureAwait(false);
                        }
                    }
                        break;

                    case nameof(Character.Ambidextrous):
                    {
                        using (new FetchSafelyFromPool<List<ListItem>>(Utils.ListItemListPool,
                                                                       out List<ListItem> lstPrimaryArm))
                        {
                            if (await CharacterObject.GetAmbidextrousAsync(GenericToken).ConfigureAwait(false))
                            {
                                lstPrimaryArm.Add(new ListItem("Ambidextrous",
                                                               await LanguageManager.GetStringAsync(
                                                                   "String_Ambidextrous", token: GenericToken).ConfigureAwait(false)));
                                await cboPrimaryArm.DoThreadSafeAsync(x => x.Enabled = false, GenericToken)
                                                   .ConfigureAwait(false);
                            }
                            else
                            {
                                //Create the dropdown for the character's primary arm.
                                lstPrimaryArm.Add(new ListItem(
                                                      "Left",
                                                      await LanguageManager.GetStringAsync(
                                                          "String_Improvement_SideLeft", token: GenericToken).ConfigureAwait(false)));
                                lstPrimaryArm.Add(new ListItem(
                                                      "Right",
                                                      await LanguageManager.GetStringAsync(
                                                          "String_Improvement_SideRight", token: GenericToken).ConfigureAwait(false)));
                                lstPrimaryArm.Sort(CompareListItems.CompareNames);
                                await cboPrimaryArm.DoThreadSafeAsync(x => x.Enabled = true, GenericToken)
                                                   .ConfigureAwait(false);
                            }

                            string strPrimaryArm = CharacterObject.PrimaryArm;

                            await cboPrimaryArm.PopulateWithListItemsAsync(lstPrimaryArm, GenericToken)
                                               .ConfigureAwait(false);
                            await cboPrimaryArm.DoThreadSafeAsync(x =>
                            {
                                x.SelectedValue = strPrimaryArm;
                                if (x.SelectedIndex == -1)
                                    x.SelectedIndex = 0;
                            }, GenericToken).ConfigureAwait(false);
                        }
                    }
                        break;

                    case nameof(Character.MagicianEnabled):
                    {
                        // Change to the status of Magician being enabled.
                        if (CharacterObject.MagicianEnabled || CharacterObject.AdeptEnabled)
                        {
                            await tabCharacterTabs.DoThreadSafeAsync(x =>
                            {
                                if (!x.TabPages.Contains(tabMagician))
                                    x.TabPages.Insert(3, tabMagician);
                            }, GenericToken).ConfigureAwait(false);
                            await cmdAddSpell.DoThreadSafeAsync(x => x.Enabled = true, GenericToken)
                                             .ConfigureAwait(false);
                            if (CharacterObjectSettings.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept
                                && CharacterObject.AttributeSection.Attributes != null)
                            {
                                CharacterAttrib objMAGAdept =
                                    await CharacterObject.AttributeSection
                                                         .GetAttributeByNameAsync("MAGAdept", GenericToken)
                                                         .ConfigureAwait(false);
                                await CharacterObject.AttributeSection.Attributes.TryAddAsync(objMAGAdept, GenericToken)
                                                     .ConfigureAwait(false);
                            }
                        }
                        else
                        {
                            await tabCharacterTabs.DoThreadSafeAsync(x => x.TabPages.Remove(tabMagician), GenericToken)
                                                  .ConfigureAwait(false);
                            await cmdAddSpell.DoThreadSafeAsync(x => x.Enabled = false, GenericToken)
                                             .ConfigureAwait(false);
                            if (CharacterObjectSettings.MysAdeptSecondMAGAttribute
                                && CharacterObject.AttributeSection.Attributes != null)
                            {
                                CharacterAttrib objMAGAdept =
                                    await CharacterObject.AttributeSection
                                                         .GetAttributeByNameAsync("MAGAdept", GenericToken)
                                                         .ConfigureAwait(false);
                                await CharacterObject.AttributeSection.Attributes.RemoveAsync(objMAGAdept, GenericToken)
                                                     .ConfigureAwait(false);
                            }
                        }

                        await cmdAddSpirit.DoThreadSafeAsync(x => x.Visible = CharacterObject.MagicianEnabled,
                                                             GenericToken).ConfigureAwait(false);
                        await panSpirits.DoThreadSafeAsync(x => x.Visible = CharacterObject.MagicianEnabled,
                                                           GenericToken).ConfigureAwait(false);
                    }
                        break;

                    case nameof(Character.AdeptEnabled):
                    {
                        // Change to the status of Adept being enabled.
                        if (CharacterObject.AdeptEnabled)
                        {
                            await tabCharacterTabs.DoThreadSafeAsync(x =>
                            {
                                if (!x.TabPages.Contains(tabMagician))
                                    x.TabPages.Insert(3, tabMagician);
                            }, GenericToken).ConfigureAwait(false);
                            await cmdAddSpell.DoThreadSafeAsync(x => x.Enabled = true, GenericToken)
                                             .ConfigureAwait(false);
                            if (CharacterObjectSettings.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept
                                && CharacterObject.AttributeSection.Attributes != null)
                            {
                                CharacterAttrib objMAGAdept =
                                    await CharacterObject.AttributeSection
                                                         .GetAttributeByNameAsync("MAGAdept", GenericToken)
                                                         .ConfigureAwait(false);
                                await CharacterObject.AttributeSection.Attributes.TryAddAsync(objMAGAdept, GenericToken)
                                                     .ConfigureAwait(false);
                            }

                            await tabCharacterTabs.DoThreadSafeAsync(x =>
                            {
                                if (!x.TabPages.Contains(tabAdept))
                                    x.TabPages.Insert(3, tabAdept);
                            }, GenericToken).ConfigureAwait(false);
                        }
                        else
                        {
                            if (!CharacterObject.MagicianEnabled)
                            {
                                await tabCharacterTabs
                                      .DoThreadSafeAsync(x => x.TabPages.Remove(tabMagician), GenericToken)
                                      .ConfigureAwait(false);
                                await cmdAddSpell.DoThreadSafeAsync(x => x.Enabled = false, GenericToken)
                                                 .ConfigureAwait(false);
                                if (CharacterObjectSettings.MysAdeptSecondMAGAttribute
                                    && CharacterObject.AttributeSection.Attributes != null)
                                {
                                    CharacterAttrib objMAGAdept =
                                        await CharacterObject.AttributeSection
                                                             .GetAttributeByNameAsync("MAGAdept", GenericToken)
                                                             .ConfigureAwait(false);
                                    await CharacterObject.AttributeSection.Attributes.RemoveAsync(objMAGAdept, GenericToken)
                                                         .ConfigureAwait(false);
                                }
                            }
                            else
                                await cmdAddSpell.DoThreadSafeAsync(x => x.Enabled = true, GenericToken)
                                                 .ConfigureAwait(false);

                            await tabCharacterTabs.DoThreadSafeAsync(x => x.TabPages.Remove(tabAdept), GenericToken)
                                                  .ConfigureAwait(false);
                        }
                    }
                        break;

                    case nameof(Character.TechnomancerEnabled):
                    {
                        // Change to the status of Technomancer being enabled.
                        if (CharacterObject.TechnomancerEnabled)
                        {
                            await tabCharacterTabs.DoThreadSafeAsync(x =>
                            {
                                if (!x.TabPages.Contains(tabTechnomancer))
                                    x.TabPages.Insert(3, tabTechnomancer);
                            }, GenericToken).ConfigureAwait(false);
                        }
                        else
                        {
                            await tabCharacterTabs
                                  .DoThreadSafeAsync(x => x.TabPages.Remove(tabTechnomancer), GenericToken)
                                  .ConfigureAwait(false);
                        }
                    }
                        break;

                    case nameof(Character.AdvancedProgramsEnabled):
                    {
                        // Change to the status of Advanced Programs being enabled.
                        if (CharacterObject.AdvancedProgramsEnabled)
                        {
                            await tabCharacterTabs.DoThreadSafeAsync(x =>
                            {
                                if (!x.TabPages.Contains(tabAdvancedPrograms))
                                    x.TabPages.Insert(3, tabAdvancedPrograms);
                            }, GenericToken).ConfigureAwait(false);
                        }
                        else
                        {
                            await tabCharacterTabs
                                  .DoThreadSafeAsync(x => x.TabPages.Remove(tabAdvancedPrograms), GenericToken)
                                  .ConfigureAwait(false);
                        }
                    }
                        break;

                    case nameof(Character.CritterEnabled):
                    {
                        // Change the status of Critter being enabled.
                        if (CharacterObject.CritterEnabled)
                        {
                            await tabCharacterTabs.DoThreadSafeAsync(x =>
                            {
                                if (!x.TabPages.Contains(tabCritter))
                                    x.TabPages.Insert(3, tabCritter);
                            }, GenericToken).ConfigureAwait(false);
                        }
                        else
                        {
                            await tabCharacterTabs.DoThreadSafeAsync(x => x.TabPages.Remove(tabCritter), GenericToken)
                                                  .ConfigureAwait(false);
                        }
                    }
                        break;

                    case nameof(Character.AddBiowareEnabled):
                    {
                        if (!CharacterObject.AddBiowareEnabled)
                        {
                            bool blnDoRefresh = false;
                            foreach (Cyberware objCyberware in await CharacterObject.Cyberware.DeepWhereAsync(
                                         x => x.Children, async x =>
                                             x.SourceType == Improvement.ImprovementSource.Bioware
                                             && x.SourceID != Cyberware.EssenceHoleGUID
                                             && x.SourceID != Cyberware.EssenceAntiHoleGUID
                                             && await x.GetIsModularCurrentlyEquippedAsync(GenericToken).ConfigureAwait(false)
                                             && (!string.IsNullOrEmpty(x.PlugsIntoModularMount)
                                                 || x.CanRemoveThroughImprovements), GenericToken).ConfigureAwait(false))
                            {
                                if (!string.IsNullOrEmpty(objCyberware.PlugsIntoModularMount))
                                {
                                    if (objCyberware.Parent != null)
                                        await objCyberware.Parent.Children.RemoveAsync(objCyberware, GenericToken)
                                                          .ConfigureAwait(false);
                                    await CharacterObject.Cyberware.AddAsync(objCyberware, GenericToken)
                                                         .ConfigureAwait(false);
                                    await objCyberware.ChangeModularEquipAsync(false, token: GenericToken)
                                                      .ConfigureAwait(false);
                                }
                                else
                                {
                                    await objCyberware.DeleteCyberwareAsync(token: GenericToken).ConfigureAwait(false);
                                    blnDoRefresh = true;
                                }
                            }

                            if (blnDoRefresh)
                            {
                                await RequestCharacterUpdate().ConfigureAwait(false);
                            }
                        }
                    }
                        break;

                    case nameof(Character.AddCyberwareEnabled):
                    {
                        if (!CharacterObject.AddCyberwareEnabled)
                        {
                            bool blnDoRefresh = false;
                            foreach (Cyberware objCyberware in await CharacterObject.Cyberware.DeepWhereAsync(
                                             x => x.Children, async x =>
                                                 x.SourceType == Improvement.ImprovementSource.Cyberware
                                                 && x.SourceID != Cyberware.EssenceHoleGUID
                                                 && x.SourceID != Cyberware.EssenceAntiHoleGUID
                                                 && await x.GetIsModularCurrentlyEquippedAsync(GenericToken).ConfigureAwait(false)
                                                 && (!string.IsNullOrEmpty(x.PlugsIntoModularMount)
                                                     || x.CanRemoveThroughImprovements), GenericToken)
                                         .ConfigureAwait(false))
                            {
                                if (!string.IsNullOrEmpty(objCyberware.PlugsIntoModularMount))
                                {
                                    await objCyberware.ChangeModularEquipAsync(false, token: GenericToken)
                                                      .ConfigureAwait(false);
                                    if (objCyberware.Parent != null)
                                        await objCyberware.Parent.Children.RemoveAsync(objCyberware, GenericToken)
                                                          .ConfigureAwait(false);
                                    await CharacterObject.Cyberware.AddAsync(objCyberware, GenericToken)
                                                         .ConfigureAwait(false);
                                }
                                else
                                {
                                    await objCyberware.DeleteCyberwareAsync(token: GenericToken).ConfigureAwait(false);
                                    blnDoRefresh = true;
                                }
                            }

                            if (blnDoRefresh)
                            {
                                await RequestCharacterUpdate().ConfigureAwait(false);
                            }
                        }
                    }
                        break;

                    case nameof(Character.ExCon):
                    {
                        if (CharacterObject.ExCon)
                        {
                            bool blnDoRefresh = false;
                            foreach (Cyberware objCyberware in await CharacterObject.Cyberware.DeepWhereAsync(
                                             x => x.Children, async x =>
                                                 x.SourceID != Cyberware.EssenceHoleGUID
                                                 && x.SourceID != Cyberware.EssenceAntiHoleGUID
                                                 && x.Grade.Name != "None"
                                                 && await x.GetIsModularCurrentlyEquippedAsync(GenericToken).ConfigureAwait(false)
                                                 && (!string.IsNullOrEmpty(x.PlugsIntoModularMount)
                                                     || x.CanRemoveThroughImprovements), GenericToken)
                                         .ConfigureAwait(false))
                            {
                                char chrAvail = (await objCyberware.TotalAvailTupleAsync(false, GenericToken)
                                                                   .ConfigureAwait(false)).Suffix;
                                if (chrAvail != 'R' && chrAvail != 'F')
                                    continue;
                                if (!string.IsNullOrEmpty(objCyberware.PlugsIntoModularMount))
                                {
                                    if (objCyberware.Parent != null)
                                        await objCyberware.Parent.Children.RemoveAsync(objCyberware, GenericToken)
                                                          .ConfigureAwait(false);
                                    await CharacterObject.Cyberware.AddAsync(objCyberware, GenericToken)
                                                         .ConfigureAwait(false);
                                    await objCyberware.ChangeModularEquipAsync(false, token: GenericToken)
                                                      .ConfigureAwait(false);
                                }
                                else
                                {
                                    await objCyberware.DeleteCyberwareAsync(token: GenericToken).ConfigureAwait(false);
                                    blnDoRefresh = true;
                                }
                            }

                            if (blnDoRefresh)
                            {
                                await RequestCharacterUpdate().ConfigureAwait(false);
                            }
                        }
                    }
                        break;

                    case nameof(Character.InitiationEnabled):
                    {
                        // Change the status of the Initiation tab being show.
                        if (CharacterObject.InitiationEnabled)
                        {
                            await tabCharacterTabs.DoThreadSafeAsync(x =>
                            {
                                if (!x.TabPages.Contains(tabInitiation))
                                    x.TabPages.Insert(3, tabInitiation);
                            }, GenericToken).ConfigureAwait(false);
                        }
                        else
                        {
                            await tabCharacterTabs
                                  .DoThreadSafeAsync(x => x.TabPages.Remove(tabInitiation), GenericToken)
                                  .ConfigureAwait(false);
                        }

                        await gpbInitiationType.DoThreadSafeAsync(x => x.Visible = CharacterObject.InitiationEnabled,
                                                                  GenericToken).ConfigureAwait(false);
                        await gpbInitiationGroup.DoThreadSafeAsync(x => x.Visible = CharacterObject.InitiationEnabled,
                                                                   GenericToken).ConfigureAwait(false);
                    }
                        break;

                    case nameof(Character.FirstMentorSpiritDisplayName):
                    {
                        MentorSpirit objMentor = await CharacterObject.MentorSpirits.FirstOrDefaultAsync(GenericToken)
                                                                      .ConfigureAwait(false);
                        if (objMentor != null)
                        {
                            await objMentor.SetSourceDetailAsync(lblMentorSpiritSource, GenericToken)
                                           .ConfigureAwait(false);
                            await objMentor.SetSourceDetailAsync(lblParagonSource, GenericToken).ConfigureAwait(false);
                        }

                        break;
                    }
                    case nameof(Character.HasMentorSpirit):
                    {
                        await gpbMagicianMentorSpirit.DoThreadSafeAsync(
                            x => x.Visible = CharacterObject.HasMentorSpirit, GenericToken).ConfigureAwait(false);
                        await gpbTechnomancerParagon.DoThreadSafeAsync(x => x.Visible = CharacterObject.HasMentorSpirit,
                                                                       GenericToken).ConfigureAwait(false);
                        break;
                    }
                    case nameof(Character.UseMysticAdeptPPs):
                    {
                        await lblMysticAdeptAssignment.DoThreadSafeAsync(
                            x => x.Visible = CharacterObject.UseMysticAdeptPPs, GenericToken).ConfigureAwait(false);
                        await nudMysticAdeptMAGMagician.DoThreadSafeAsync(
                            x => x.Visible = CharacterObject.UseMysticAdeptPPs, GenericToken).ConfigureAwait(false);
                        break;
                    }
                    case nameof(Character.IsPrototypeTranshuman):
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await lblPrototypeTranshumanESS.DoThreadSafeAsync(
                            x => x.Visible = CharacterObject.IsPrototypeTranshuman, GenericToken).ConfigureAwait(false);
                        await lblPrototypeTranshumanESSLabel.DoThreadSafeAsync(
                            x => x.Visible = CharacterObject.IsPrototypeTranshuman, GenericToken).ConfigureAwait(false);
                        break;
                    }
                    case nameof(Character.MetatypeCategory):
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await mnuCreateMenu.DoThreadSafeAsync(
                            () => mnuSpecialCyberzombie.Visible = CharacterObject.MetatypeCategory != "Cyberzombie",
                            GenericToken).ConfigureAwait(false);
                        break;
                    }
                    case nameof(Character.IsSprite):
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await mnuCreateMenu.DoThreadSafeAsync(
                                               () => mnuSpecialConvertToFreeSprite.Visible = CharacterObject.IsSprite,
                                               GenericToken)
                                           .ConfigureAwait(false);
                        break;
                    }
                    case nameof(Character.BlackMarketDiscount):
                    {
                        await Task.WhenAll(RefreshSelectedCyberware(GenericToken),
                                           RefreshSelectedArmor(GenericToken),
                                           RefreshSelectedGear(GenericToken),
                                           RefreshSelectedVehicle(GenericToken),
                                           RefreshSelectedWeapon(GenericToken)).ConfigureAwait(false);
                        break;
                    }
                    case nameof(Character.Settings):
                    {
                        if (!IsLoading)
                        {
                            foreach (PropertyInfo objProperty in typeof(CharacterSettings).GetProperties())
                                await DoOnCharacterSettingsPropertyChanged(
                                    new PropertyChangedEventArgs(objProperty.Name)).ConfigureAwait(false);
                        }

                        break;
                    }
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void OnCharacterSettingsPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            await DoOnCharacterSettingsPropertyChanged(e).ConfigureAwait(false);
        }

        private async ValueTask DoOnCharacterSettingsPropertyChanged(PropertyChangedEventArgs e)
        {
            try
            {
                switch (e.PropertyName)
                {
                    case nameof(CharacterSettings.Books):
                    {
                        if (IsLoading)
                            break;
                        CursorWait objCursorWait
                            = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                        try
                        {
                            await this.DoThreadSafeAsync(x => x.SuspendLayout(), GenericToken).ConfigureAwait(false);
                            try
                            {
                                if (await CharacterObjectSettings.BookEnabledAsync("RF", GenericToken)
                                                                 .ConfigureAwait(false))
                                    await cmdAddLifestyle
                                          .DoThreadSafeAsync(x => x.SplitMenuStrip = cmsAdvancedLifestyle, GenericToken)
                                          .ConfigureAwait(false);
                                else
                                    await cmdAddLifestyle.DoThreadSafeAsync(x => x.SplitMenuStrip = null, GenericToken)
                                                         .ConfigureAwait(false);
                                if (!await CharacterObjectSettings.BookEnabledAsync("FA", GenericToken)
                                                                  .ConfigureAwait(false))
                                {
                                    await this.DoThreadSafeAsync(() =>
                                    {
                                        lblWildReputation.Visible = false;
                                        lblWildReputationTotal.Visible = false;
                                    }, GenericToken).ConfigureAwait(false);
                                    if (!await CharacterObjectSettings.BookEnabledAsync("SG", GenericToken)
                                                                      .ConfigureAwait(false))
                                    {
                                        await this.DoThreadSafeAsync(() =>
                                        {
                                            lblAstralReputation.Visible = false;
                                            lblAstralReputationTotal.Visible = false;
                                        }, GenericToken).ConfigureAwait(false);
                                    }
                                    else
                                    {
                                        await this.DoThreadSafeAsync(() =>
                                        {
                                            lblAstralReputation.Visible = true;
                                            lblAstralReputationTotal.Visible = true;
                                        }, GenericToken).ConfigureAwait(false);
                                    }
                                }
                                else
                                {
                                    await this.DoThreadSafeAsync(() =>
                                    {
                                        lblWildReputation.Visible = true;
                                        lblWildReputationTotal.Visible = true;
                                        lblAstralReputation.Visible = true;
                                        lblAstralReputationTotal.Visible = true;
                                    }, GenericToken).ConfigureAwait(false);
                                }

                                // Refresh all trees because enabled sources can change the nodes that are visible
                                await RefreshQualities(treQualities, cmsQuality, _fntNormal, _fntStrikeout,
                                                       token: GenericToken).ConfigureAwait(false);
                                await RefreshSpirits(panSpirits, panSprites, token: GenericToken).ConfigureAwait(false);
                                await RefreshSpells(treSpells, treMetamagic, cmsSpell, cmsInitiationNotes,
                                                    token: GenericToken).ConfigureAwait(false);
                                await RefreshComplexForms(treComplexForms, treMetamagic, cmsComplexForm,
                                                          cmsInitiationNotes, token: GenericToken)
                                    .ConfigureAwait(false);
                                await RefreshPowerCollectionListChanged(treMetamagic, cmsMetamagic, cmsInitiationNotes,
                                                                        token: GenericToken).ConfigureAwait(false);
                                await RefreshInitiationGrades(treMetamagic, cmsMetamagic, cmsInitiationNotes,
                                                              token: GenericToken).ConfigureAwait(false);
                                await RefreshAIPrograms(treAIPrograms, cmsAdvancedProgram, token: GenericToken)
                                    .ConfigureAwait(false);
                                await RefreshCritterPowers(treCritterPowers, cmsCritterPowers, token: GenericToken)
                                    .ConfigureAwait(false);
                                await RefreshMartialArts(treMartialArts, cmsMartialArts, cmsTechnique,
                                                         token: GenericToken).ConfigureAwait(false);
                                await RefreshLifestyles(treLifestyles, cmsLifestyleNotes, cmsAdvancedLifestyle,
                                                        token: GenericToken).ConfigureAwait(false);
                                await RefreshContacts(panContacts, panEnemies, panPets, token: GenericToken)
                                    .ConfigureAwait(false);

                                await RefreshArmor(treArmor, cmsArmorLocation, cmsArmor, cmsArmorMod, cmsArmorGear,
                                                   token: GenericToken).ConfigureAwait(false);
                                await RefreshGears(treGear, cmsGearLocation, cmsGear, cmsGearAllowRename,
                                                   await chkCommlinks.DoThreadSafeFuncAsync(
                                                       x => x.Checked, GenericToken).ConfigureAwait(false), false,
                                                   token: GenericToken).ConfigureAwait(false);
                                await RefreshFociFromGear(treFoci, null, token: GenericToken).ConfigureAwait(false);
                                await RefreshCyberware(treCyberware, cmsCyberware, cmsCyberwareGear,
                                                       token: GenericToken).ConfigureAwait(false);
                                await RefreshWeapons(treWeapons, cmsWeaponLocation, cmsWeapon, cmsWeaponAccessory,
                                                     cmsWeaponAccessoryGear, token: GenericToken).ConfigureAwait(false);
                                await RefreshVehicles(treVehicles, cmsVehicleLocation, cmsVehicle, cmsVehicleWeapon,
                                                      cmsVehicleWeaponAccessory, cmsVehicleWeaponAccessoryGear,
                                                      cmsVehicleGear,
                                                      cmsWeaponMount,
                                                      cmsVehicleCyberware, cmsVehicleCyberwareGear, token: GenericToken)
                                    .ConfigureAwait(false);
                                await RefreshDrugs(treCustomDrugs, token: GenericToken).ConfigureAwait(false);
                                await this.DoThreadSafeAsync(() =>
                                {
                                    treWeapons.SortCustomOrder();
                                    treArmor.SortCustomOrder();
                                    treGear.SortCustomOrder();
                                    treLifestyles.SortCustomOrder();
                                    treCustomDrugs.SortCustomOrder();
                                    treCyberware.SortCustomOrder(true);
                                    treVehicles.SortCustomOrder();
                                    treCritterPowers.SortCustomOrder();
                                }, GenericToken).ConfigureAwait(false);

                                XPathNavigator xmlTraditionsBaseChummerNode =
                                    await (await CharacterObject.LoadDataXPathAsync(
                                              "traditions.xml", token: GenericToken).ConfigureAwait(false))
                                          .SelectSingleNodeAndCacheExpressionAsync("/chummer", GenericToken)
                                          .ConfigureAwait(false);
                                using (new FetchSafelyFromPool<List<ListItem>>(
                                           Utils.ListItemListPool, out List<ListItem> lstTraditions))
                                {
                                    if (xmlTraditionsBaseChummerNode != null)
                                    {
                                        foreach (XPathNavigator xmlTradition in xmlTraditionsBaseChummerNode.Select(
                                                     "traditions/tradition["
                                                     + await CharacterObjectSettings.BookXPathAsync(token: GenericToken)
                                                         .ConfigureAwait(false)
                                                     + ']'))
                                        {
                                            string strName
                                                = (await xmlTradition.SelectSingleNodeAndCacheExpressionAsync("name", GenericToken)
                                                                     .ConfigureAwait(false))
                                                ?.Value;
                                            if (!string.IsNullOrEmpty(strName))
                                                lstTraditions.Add(new ListItem(
                                                                      (await xmlTradition
                                                                             .SelectSingleNodeAndCacheExpressionAsync(
                                                                                 "id", GenericToken)
                                                                             .ConfigureAwait(false))
                                                                      ?.Value ?? strName,
                                                                      (await xmlTradition
                                                                             .SelectSingleNodeAndCacheExpressionAsync(
                                                                                 "translate", GenericToken)
                                                                             .ConfigureAwait(false))
                                                                      ?.Value ?? strName));
                                        }
                                    }

                                    if (lstTraditions.Count > 1)
                                    {
                                        lstTraditions.Sort(CompareListItems.CompareNames);
                                        lstTraditions.Insert(
                                            0,
                                            new ListItem(
                                                "None",
                                                await LanguageManager.GetStringAsync("String_None", token: GenericToken)
                                                                     .ConfigureAwait(false)));
                                        if (!lstTraditions.SequenceEqual(
                                                await cboTradition.DoThreadSafeFuncAsync(
                                                    x => x.Items.Cast<ListItem>(), GenericToken).ConfigureAwait(false)))
                                        {
                                            await cboTradition.PopulateWithListItemsAsync(lstTraditions, GenericToken)
                                                              .ConfigureAwait(false);
                                            await cboTradition.DoThreadSafeAsync(x =>
                                            {
                                                if (CharacterObject.MagicTradition.Type == TraditionType.MAG)
                                                    x.SelectedValue
                                                        = CharacterObject.MagicTradition.SourceID.ToString();
                                                else if (x.SelectedIndex == -1 && x.Items.Count > 0)
                                                    x.SelectedIndex = 0;
                                            }, GenericToken).ConfigureAwait(false);
                                        }
                                    }
                                    else
                                    {
                                        await this.DoThreadSafeAsync(() =>
                                        {
                                            cboTradition.Visible = false;
                                            lblTraditionLabel.Visible = false;
                                        }, GenericToken).ConfigureAwait(false);
                                    }
                                }

                                using (new FetchSafelyFromPool<List<ListItem>>(
                                           Utils.ListItemListPool, out List<ListItem> lstDrainAttributes))
                                {
                                    if (xmlTraditionsBaseChummerNode != null)
                                    {
                                        foreach (XPathNavigator xmlDrain in await xmlTraditionsBaseChummerNode
                                                     .SelectAndCacheExpressionAsync(
                                                         "drainattributes/drainattribute", GenericToken).ConfigureAwait(false))
                                        {
                                            string strName
                                                = (await xmlDrain.SelectSingleNodeAndCacheExpressionAsync("name", GenericToken)
                                                                 .ConfigureAwait(false))
                                                ?.Value;
                                            if (!string.IsNullOrEmpty(strName)
                                                && lstDrainAttributes.All(x => x.Value.ToString() != strName))
                                            {
                                                string strTranslatedName = (await xmlDrain
                                                    .SelectSingleNodeAndCacheExpressionAsync(
                                                        "translate", GenericToken).ConfigureAwait(false))?.Value ?? strName;
                                                lstDrainAttributes.Add(new ListItem(strName, strTranslatedName));
                                            }
                                        }
                                    }

                                    lstDrainAttributes.Sort(CompareListItems.CompareNames);
                                    lstDrainAttributes.Insert(0, ListItem.Blank);
                                    await cboDrain.PopulateWithListItemsAsync(lstDrainAttributes, GenericToken)
                                                  .ConfigureAwait(false);
                                }

                                using (new FetchSafelyFromPool<HashSet<string>>(Utils.StringHashSetPool,
                                           out HashSet<string> limit))
                                {
                                    foreach (Improvement improvement in await ImprovementManager
                                                                              .GetCachedImprovementListForValueOfAsync(
                                                                                  CharacterObject,
                                                                                  Improvement.ImprovementType
                                                                                      .LimitSpiritCategory, token: GenericToken)
                                                                              .ConfigureAwait(false))
                                    {
                                        limit.Add(improvement.ImprovedName);
                                    }

                                    using (new FetchSafelyFromPool<List<ListItem>>(
                                               Utils.ListItemListPool, out List<ListItem> lstSpirit))
                                    {
                                        if (xmlTraditionsBaseChummerNode != null)
                                        {
                                            foreach (XPathNavigator xmlSpirit in await xmlTraditionsBaseChummerNode
                                                         .SelectAndCacheExpressionAsync("spirits/spirit", GenericToken)
                                                         .ConfigureAwait(false))
                                            {
                                                string strSpiritName
                                                    = (await xmlSpirit.SelectSingleNodeAndCacheExpressionAsync("name", GenericToken)
                                                                      .ConfigureAwait(false))
                                                    ?.Value;
                                                if (!string.IsNullOrEmpty(strSpiritName)
                                                    && (limit.Count == 0 || limit.Contains(strSpiritName)))
                                                {
                                                    lstSpirit.Add(new ListItem(strSpiritName,
                                                                               (await xmlSpirit
                                                                                   .SelectSingleNodeAndCacheExpressionAsync(
                                                                                       "translate", GenericToken)
                                                                                   .ConfigureAwait(false))?.Value
                                                                               ?? strSpiritName));
                                                }
                                            }
                                        }

                                        lstSpirit.Sort(CompareListItems.CompareNames);
                                        lstSpirit.Insert(0, ListItem.Blank);
                                        await cboSpiritCombat.PopulateWithListItemsAsync(lstSpirit, GenericToken)
                                                             .ConfigureAwait(false);
                                        await cboSpiritDetection.PopulateWithListItemsAsync(lstSpirit, GenericToken)
                                                                .ConfigureAwait(false);
                                        await cboSpiritHealth.PopulateWithListItemsAsync(lstSpirit, GenericToken)
                                                             .ConfigureAwait(false);
                                        await cboSpiritIllusion.PopulateWithListItemsAsync(lstSpirit, GenericToken)
                                                               .ConfigureAwait(false);
                                        await cboSpiritManipulation.PopulateWithListItemsAsync(lstSpirit, GenericToken)
                                                                   .ConfigureAwait(false);
                                    }
                                }

                                // Populate the Technomancer Streams list.
                                xmlTraditionsBaseChummerNode =
                                    await (await CharacterObject.LoadDataXPathAsync("streams.xml", token: GenericToken)
                                                                .ConfigureAwait(false))
                                          .SelectSingleNodeAndCacheExpressionAsync("/chummer", GenericToken)
                                          .ConfigureAwait(false);
                                using (new FetchSafelyFromPool<List<ListItem>>(
                                           Utils.ListItemListPool, out List<ListItem> lstStreams))
                                {
                                    if (xmlTraditionsBaseChummerNode != null)
                                    {
                                        foreach (XPathNavigator xmlTradition in xmlTraditionsBaseChummerNode.Select(
                                                     "traditions/tradition["
                                                     + await CharacterObjectSettings.BookXPathAsync(token: GenericToken)
                                                         .ConfigureAwait(false)
                                                     + ']'))
                                        {
                                            string strName
                                                = (await xmlTradition
                                                         .SelectSingleNodeAndCacheExpressionAsync("name", GenericToken)
                                                         .ConfigureAwait(false))
                                                ?.Value;
                                            if (!string.IsNullOrEmpty(strName))
                                                lstStreams.Add(new ListItem(
                                                                   (await xmlTradition
                                                                          .SelectSingleNodeAndCacheExpressionAsync(
                                                                              "id", GenericToken).ConfigureAwait(false))
                                                                   ?.Value ?? strName,
                                                                   (await xmlTradition
                                                                          .SelectSingleNodeAndCacheExpressionAsync(
                                                                              "translate", GenericToken)
                                                                          .ConfigureAwait(false))
                                                                   ?.Value ?? strName));
                                        }
                                    }

                                    if (lstStreams.Count > 1)
                                    {
                                        lstStreams.Sort(CompareListItems.CompareNames);
                                        lstStreams.Insert(
                                            0,
                                            new ListItem(
                                                "None",
                                                await LanguageManager.GetStringAsync("String_None", token: GenericToken)
                                                                     .ConfigureAwait(false)));
                                        if (!lstStreams.SequenceEqual(
                                                await cboStream.DoThreadSafeFuncAsync(
                                                    x => x.Items.Cast<ListItem>(), GenericToken).ConfigureAwait(false)))
                                        {
                                            await cboStream.PopulateWithListItemsAsync(lstStreams, GenericToken)
                                                           .ConfigureAwait(false);
                                            await cboStream.DoThreadSafeAsync(x =>
                                            {
                                                if (CharacterObject.MagicTradition.Type == TraditionType.RES)
                                                    x.SelectedValue
                                                        = CharacterObject.MagicTradition.SourceID.ToString();
                                                else if (x.SelectedIndex == -1 && x.Items.Count > 0)
                                                    x.SelectedIndex = 0;
                                            }, GenericToken).ConfigureAwait(false);
                                        }
                                    }
                                    else
                                    {
                                        await this.DoThreadSafeAsync(() =>
                                        {
                                            cboStream.Visible = false;
                                            lblStreamLabel.Visible = false;
                                        }, GenericToken).ConfigureAwait(false);
                                    }
                                }
                            }
                            finally
                            {
                                await this.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken).ConfigureAwait(false);
                            }
                        }
                        finally
                        {
                            await objCursorWait.DisposeAsync().ConfigureAwait(false);
                        }

                        break;
                    }
                    case nameof(CharacterSettings.AllowFreeGrids):
                    {
                        if (!await CharacterObjectSettings.BookEnabledAsync("HT", GenericToken).ConfigureAwait(false))
                        {
                            CursorWait objCursorWait
                                = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                            try
                            {
                                await RefreshLifestyles(treLifestyles, cmsLifestyleNotes, cmsAdvancedLifestyle, token: GenericToken)
                                    .ConfigureAwait(false);
                                await treLifestyles.DoThreadSafeAsync(x => x.SortCustomOrder(), GenericToken)
                                                   .ConfigureAwait(false);
                            }
                            finally
                            {
                                await objCursorWait.DisposeAsync().ConfigureAwait(false);
                            }
                        }

                        break;
                    }
                    case nameof(CharacterSettings.EnableEnemyTracking):
                    {
                        CursorWait objCursorWait
                            = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                        try
                        {
                            await this.DoThreadSafeAsync(x =>
                            {
                                x.SuspendLayout();
                                try
                                {
                                    if (!CharacterObjectSettings.EnableEnemyTracking)
                                    {
                                        tabPeople.TabPages.Remove(tabEnemies);
                                        lblEnemiesBP.Visible = false;
                                        lblBuildEnemies.Visible = false;
                                    }
                                    else
                                    {
                                        lblEnemiesBP.Visible = true;
                                        lblBuildEnemies.Visible = true;
                                        if (!tabPeople.TabPages.Contains(tabEnemies))
                                            tabPeople.TabPages.Insert(
                                                tabPeople.TabPages.IndexOf(tabContacts) + 1,
                                                tabEnemies);
                                    }
                                }
                                finally
                                {
                                    x.ResumeLayout();
                                }
                            }, GenericToken).ConfigureAwait(false);
                            await RefreshContacts(panContacts, panEnemies, panPets, token: GenericToken)
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            await objCursorWait.DisposeAsync().ConfigureAwait(false);
                        }

                        break;
                    }
                }
            }
            finally
            {
                await RequestCharacterUpdate().ConfigureAwait(false);
            }
        }

        #endregion Character Events

        #region Menu Events

        private async void mnuFileSave_Click(object sender, EventArgs e)
        {
            try
            {
                if (await SaveCharacter(token: GenericToken).ConfigureAwait(false) && IsReopenQueued)
                    await this.DoThreadSafeAsync(x => x.Close(), GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuFileSaveAs_Click(object sender, EventArgs e)
        {
            try
            {
                if (await SaveCharacterAs(token: GenericToken).ConfigureAwait(false) && IsReopenQueued)
                    await this.DoThreadSafeAsync(x => x.Close(), GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuFileSaveAsCreated_Click(object sender, EventArgs e)
        {
            try
            {
                if (await SaveCharacterAs(true, GenericToken).ConfigureAwait(false) && IsReopenQueued)
                    await this.DoThreadSafeAsync(x => x.Close(), GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuFilePrint_Click(object sender, EventArgs e)
        {
            try
            {
                await DoPrint(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void mnuFileClose_Click(object sender, EventArgs e)
        {
            Close();
        }

        private async void mnuSpecialAddPACKSKit_Click(object sender, EventArgs e)
        {
            try
            {
                bool blnAddAgain;
                do
                {
                    blnAddAgain = await AddPACKSKit(GenericToken).ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuSpecialCreatePACKSKit_Click(object sender, EventArgs e)
        {
            try
            {
                await CreatePACKSKit(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuSpecialChangeMetatype_Click(object sender, EventArgs e)
        {
            try
            {
                await ChangeMetatype(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuSpecialChangeOptions_Click(object sender, EventArgs e)
        {
            try
            {
                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    using (ThreadSafeForm<SelectBuildMethod> frmPickBP
                           = await ThreadSafeForm<SelectBuildMethod>.GetAsync(
                               () => new SelectBuildMethod(CharacterObject, true), GenericToken).ConfigureAwait(false))
                    {
                        await frmPickBP.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false);
                    }
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuSpecialCyberzombie_Click(object sender, EventArgs e)
        {
            try
            {
                await CharacterObject.ConvertCyberzombie(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuSpecialAddCyberwareSuite_Click(object sender, EventArgs e)
        {
            try
            {
                await AddCyberwareSuite(Improvement.ImprovementSource.Cyberware, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuSpecialAddBiowareSuite_Click(object sender, EventArgs e)
        {
            try
            {
                await AddCyberwareSuite(Improvement.ImprovementSource.Bioware, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuSpecialCreateCyberwareSuite_Click(object sender, EventArgs e)
        {
            try
            {
                await CreateCyberwareSuite(Improvement.ImprovementSource.Cyberware, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuSpecialCreateBiowareSuite_Click(object sender, EventArgs e)
        {
            try
            {
                await CreateCyberwareSuite(Improvement.ImprovementSource.Bioware, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuSpecialReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                // This only re-applies the Improvements for everything the character has. If a match is not found in the data files, the current Improvement information is left as-is.
                // Verify that the user wants to go through with it.
                if (Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_ConfirmReapplyImprovements", token: GenericToken)
                                             .ConfigureAwait(false),
                        await LanguageManager
                              .GetStringAsync("MessageTitle_ConfirmReapplyImprovements", token: GenericToken)
                              .ConfigureAwait(false),
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    return;
                await DoReapplyImprovements(token: GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsQualityReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = (await treQualities.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                        .ConfigureAwait(false))?.Tag;
                await ReapplySpecificImprovements((objSelected as IHasInternalId)?.InternalId,
                                                  objSelected is IHasName objHasName
                                                      ? await objHasName.GetCurrentDisplayNameAsync(GenericToken)
                                                                        .ConfigureAwait(false)
                                                      : string.Empty, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsCyberwareReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = (await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                        .ConfigureAwait(false))?.Tag;
                await ReapplySpecificImprovements((objSelected as IHasInternalId)?.InternalId,
                                                  objSelected is IHasName objHasName
                                                      ? await objHasName.GetCurrentDisplayNameAsync(GenericToken)
                                                                        .ConfigureAwait(false)
                                                      : string.Empty, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsArmorReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = (await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                    .ConfigureAwait(false))?.Tag;
                await ReapplySpecificImprovements((objSelected as IHasInternalId)?.InternalId,
                                                  objSelected is IHasName objHasName
                                                      ? await objHasName.GetCurrentDisplayNameAsync(GenericToken)
                                                                        .ConfigureAwait(false)
                                                      : string.Empty, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsWeaponReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = (await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                      .ConfigureAwait(false))?.Tag;
                await ReapplySpecificImprovements((objSelected as IHasInternalId)?.InternalId,
                                                  objSelected is IHasName objHasName
                                                      ? await objHasName.GetCurrentDisplayNameAsync(GenericToken)
                                                                        .ConfigureAwait(false)
                                                      : string.Empty, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsGearReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = (await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                   .ConfigureAwait(false))?.Tag;
                await ReapplySpecificImprovements((objSelected as IHasInternalId)?.InternalId,
                                                  objSelected is IHasName objHasName
                                                      ? await objHasName.GetCurrentDisplayNameAsync(GenericToken)
                                                                        .ConfigureAwait(false)
                                                      : string.Empty, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsMartialArtsReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = (await treMartialArts.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                          .ConfigureAwait(false))?.Tag;
                await ReapplySpecificImprovements((objSelected as IHasInternalId)?.InternalId,
                                                  objSelected is IHasName objHasName
                                                      ? await objHasName.GetCurrentDisplayNameAsync(GenericToken)
                                                                        .ConfigureAwait(false)
                                                      : string.Empty, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsSpellReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = (await treSpells.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                     .ConfigureAwait(false))?.Tag;
                await ReapplySpecificImprovements((objSelected as IHasInternalId)?.InternalId,
                                                  objSelected is IHasName objHasName
                                                      ? await objHasName.GetCurrentDisplayNameAsync(GenericToken)
                                                                        .ConfigureAwait(false)
                                                      : string.Empty, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsComplexFormReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = (await treComplexForms.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                           .ConfigureAwait(false))?.Tag;
                await ReapplySpecificImprovements((objSelected as IHasInternalId)?.InternalId,
                                                  objSelected is IHasName objHasName
                                                      ? await objHasName.GetCurrentDisplayNameAsync(GenericToken)
                                                                        .ConfigureAwait(false)
                                                      : string.Empty, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsAIProgramReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = (await treAIPrograms.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                         .ConfigureAwait(false))?.Tag;
                await ReapplySpecificImprovements((objSelected as IHasInternalId)?.InternalId,
                                                  objSelected is IHasName objHasName
                                                      ? await objHasName.GetCurrentDisplayNameAsync(GenericToken)
                                                                        .ConfigureAwait(false)
                                                      : string.Empty, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsCritterPowersReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = (await treCritterPowers.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                            .ConfigureAwait(false))?.Tag;
                await ReapplySpecificImprovements((objSelected as IHasInternalId)?.InternalId,
                                                  objSelected is IHasName objHasName
                                                      ? await objHasName.GetCurrentDisplayNameAsync(GenericToken)
                                                                        .ConfigureAwait(false)
                                                      : string.Empty, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsMetamagicReapplyImprovements_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = (await treMetamagic.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                        .ConfigureAwait(false))?.Tag;
                await ReapplySpecificImprovements((objSelected as IHasInternalId)?.InternalId,
                                                  objSelected is IHasName objHasName
                                                      ? await objHasName.GetCurrentDisplayNameAsync(GenericToken)
                                                                        .ConfigureAwait(false)
                                                      : string.Empty, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        internal async ValueTask ReapplySpecificImprovements(string strSelectedId, string strSelectedName,
                                                             CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            if (string.IsNullOrEmpty(strSelectedId))
                return;
            string strName = !string.IsNullOrEmpty(strSelectedName)
                ? strSelectedName
                : await LanguageManager.GetStringAsync("String_SelectedItem", token: token).ConfigureAwait(false);
            // This only re-applies the Improvements for everything the character has. If a match is not found in the data files, the current Improvement information is left as-is.
            // Verify that the user wants to go through with it.
            if (Program.ShowScrollableMessageBox(
                    this,
                    string.Format(GlobalSettings.CultureInfo,
                                  await LanguageManager
                                        .GetStringAsync("Message_ConfirmReapplySpecificImprovements", token: token)
                                        .ConfigureAwait(false), strName),
                    await LanguageManager
                          .GetStringAsync("MessageTitle_ConfirmReapplySpecificImprovements", token: token)
                          .ConfigureAwait(false),
                    MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;
            await DoReapplyImprovements(strSelectedId.Yield().ToList(), token: token).ConfigureAwait(false);
        }

        private async ValueTask DoReapplyImprovements(IReadOnlyCollection<string> lstInternalIdFilter = null,
                                                      CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            CursorWait objCursorWait = await CursorWait.NewAsync(this, token: token).ConfigureAwait(false);
            try
            {
                IAsyncDisposable objLocker
                    = await CharacterObject.LockObject.EnterWriteLockAsync(token).ConfigureAwait(false);
                try
                {
                    token.ThrowIfCancellationRequested();
                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                  out StringBuilder sbdOutdatedItems))
                    {
                        // Record the status of any flags that normally trigger character events.
                        bool blnMAGEnabled = await CharacterObject.GetMAGEnabledAsync(token).ConfigureAwait(false);
                        bool blnRESEnabled = await CharacterObject.GetRESEnabledAsync(token).ConfigureAwait(false);
                        bool blnDEPEnabled = await CharacterObject.GetDEPEnabledAsync(token).ConfigureAwait(false);

                        bool blnOldReapplyImprovements = _blnReapplyImprovements;
                        _blnReapplyImprovements = true;

                        try
                        {
                            // Wipe all improvements that we will reapply, this is mainly to eliminate orphaned improvements caused by certain bugs and also for a performance increase
                            if (lstInternalIdFilter == null)
                                await ImprovementManager.RemoveImprovementsAsync(
                                    CharacterObject,
                                    await (await CharacterObject.GetImprovementsAsync(token).ConfigureAwait(false))
                                          .ToListAsync(
                                              x => x.ImproveSource == Improvement.ImprovementSource.AIProgram
                                                   || x.ImproveSource == Improvement.ImprovementSource.Armor
                                                   || x.ImproveSource == Improvement.ImprovementSource.ArmorMod
                                                   || x.ImproveSource == Improvement.ImprovementSource.Bioware
                                                   || x.ImproveSource == Improvement.ImprovementSource.ComplexForm
                                                   || x.ImproveSource == Improvement.ImprovementSource.CritterPower
                                                   || x.ImproveSource == Improvement.ImprovementSource.Cyberware
                                                   || x.ImproveSource == Improvement.ImprovementSource.Echo
                                                   || x.ImproveSource == Improvement.ImprovementSource.Gear
                                                   || x.ImproveSource == Improvement.ImprovementSource.MartialArt
                                                   || x.ImproveSource == Improvement.ImprovementSource
                                                       .MartialArtTechnique
                                                   || x.ImproveSource == Improvement.ImprovementSource.Metamagic
                                                   || x.ImproveSource == Improvement.ImprovementSource.Power
                                                   || x.ImproveSource == Improvement.ImprovementSource.Quality
                                                   || x.ImproveSource == Improvement.ImprovementSource.Spell
                                                   || x.ImproveSource == Improvement.ImprovementSource.StackedFocus,
                                              token)
                                          .ConfigureAwait(false),
                                    true, token: token).ConfigureAwait(false);
                            else
                                await ImprovementManager.RemoveImprovementsAsync(
                                    CharacterObject,
                                    await (await CharacterObject.GetImprovementsAsync(token).ConfigureAwait(false))
                                          .ToListAsync(
                                              x => lstInternalIdFilter.Contains(x.SourceName) &&
                                                   (x.ImproveSource == Improvement.ImprovementSource.AIProgram
                                                    || x.ImproveSource == Improvement.ImprovementSource.Armor
                                                    || x.ImproveSource == Improvement.ImprovementSource.ArmorMod
                                                    || x.ImproveSource == Improvement.ImprovementSource.Bioware
                                                    || x.ImproveSource == Improvement.ImprovementSource.ComplexForm
                                                    || x.ImproveSource == Improvement.ImprovementSource.CritterPower
                                                    || x.ImproveSource == Improvement.ImprovementSource.Cyberware
                                                    || x.ImproveSource == Improvement.ImprovementSource.Echo
                                                    || x.ImproveSource == Improvement.ImprovementSource.Gear
                                                    || x.ImproveSource == Improvement.ImprovementSource.MartialArt
                                                    || x.ImproveSource == Improvement.ImprovementSource
                                                        .MartialArtTechnique
                                                    || x.ImproveSource == Improvement.ImprovementSource.Metamagic
                                                    || x.ImproveSource == Improvement.ImprovementSource.Power
                                                    || x.ImproveSource == Improvement.ImprovementSource.Quality
                                                    || x.ImproveSource == Improvement.ImprovementSource.Spell
                                                    || x.ImproveSource == Improvement.ImprovementSource.StackedFocus),
                                              token).ConfigureAwait(false),
                                    true, token: token).ConfigureAwait(false);

                            // Refresh Qualities.
                            // We cannot use foreach because qualities can add more qualities
                            for (int j = 0;
                                 j < await CharacterObject.Qualities.GetCountAsync(token).ConfigureAwait(false);
                                 j++)
                            {
                                Quality objQuality = await CharacterObject.Qualities.GetValueAtAsync(j, token)
                                                                          .ConfigureAwait(false);
                                if (objQuality.OriginSource == QualitySource.Improvement
                                    || objQuality.OriginSource == QualitySource.MetatypeRemovedAtChargen)
                                    continue;
                                // We're only re-apply improvements a list of items, not all of them
                                if (lstInternalIdFilter?.Contains(objQuality.InternalId) == false)
                                    continue;

                                XmlNode objNode = await objQuality.GetNodeAsync(token: token).ConfigureAwait(false);
                                if (objNode != null)
                                {
                                    string strSelected = objQuality.Extra;

                                    objQuality.Bonus = objNode["bonus"];
                                    if (objQuality.Bonus != null)
                                    {
                                        ImprovementManager.ForcedValue = strSelected;
                                        await ImprovementManager.CreateImprovementsAsync(CharacterObject,
                                            Improvement.ImprovementSource.Quality,
                                            objQuality.InternalId, objQuality.Bonus, 1,
                                            await objQuality.GetCurrentDisplayNameShortAsync(token)
                                                            .ConfigureAwait(false),
                                            token: token).ConfigureAwait(false);
                                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                        {
                                            objQuality.Extra = ImprovementManager.SelectedValue;
                                            string strName = await objQuality.GetCurrentDisplayNameAsync(token)
                                                                             .ConfigureAwait(false);
                                            await treQualities.DoThreadSafeAsync(x =>
                                            {
                                                TreeNode objTreeNode = x.FindNodeByTag(objQuality);
                                                if (objTreeNode != null)
                                                    objTreeNode.Text = strName;
                                            }, token).ConfigureAwait(false);
                                        }
                                    }

                                    objQuality.FirstLevelBonus = objNode["firstlevelbonus"];
                                    if (objQuality.FirstLevelBonus?.HasChildNodes == true)
                                    {
                                        bool blnDoFirstLevel = true;
                                        for (int k = 0; k < CharacterObject.Qualities.Count; ++k)
                                        {
                                            Quality objCheckQuality = CharacterObject.Qualities[k];
                                            if (j != k
                                                && objCheckQuality.SourceID == objQuality.SourceID
                                                && objCheckQuality.Extra == objQuality.Extra
                                                && objCheckQuality.SourceName == objQuality.SourceName
                                                && (k < j
                                                    || objCheckQuality.OriginSource == QualitySource.Improvement
                                                    || lstInternalIdFilter?.Contains(objCheckQuality.InternalId)
                                                    == false))
                                            {
                                                blnDoFirstLevel = false;
                                                break;
                                            }
                                        }

                                        if (blnDoFirstLevel)
                                        {
                                            ImprovementManager.ForcedValue = strSelected;
                                            await ImprovementManager.CreateImprovementsAsync(
                                                                        CharacterObject,
                                                                        Improvement.ImprovementSource.Quality,
                                                                        objQuality.InternalId,
                                                                        objQuality.FirstLevelBonus, 1,
                                                                        await objQuality
                                                                              .GetCurrentDisplayNameShortAsync(token)
                                                                              .ConfigureAwait(false), token: token)
                                                                    .ConfigureAwait(false);
                                            if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                            {
                                                objQuality.Extra = ImprovementManager.SelectedValue;
                                                string strName = await objQuality.GetCurrentDisplayNameAsync(token)
                                                    .ConfigureAwait(false);
                                                await treQualities.DoThreadSafeAsync(x =>
                                                {
                                                    TreeNode objTreeNode = x.FindNodeByTag(objQuality);
                                                    if (objTreeNode != null)
                                                        objTreeNode.Text = strName;
                                                }, token).ConfigureAwait(false);
                                            }
                                        }
                                    }

                                    objQuality.NaturalWeaponsNode = objNode["naturalweapons"];
                                    if (objQuality.NaturalWeaponsNode != null)
                                    {
                                        ImprovementManager.ForcedValue = strSelected;
                                        await ImprovementManager.CreateImprovementsAsync(
                                            CharacterObject, Improvement.ImprovementSource.Quality,
                                            objQuality.InternalId,
                                            objQuality.NaturalWeaponsNode, 1,
                                            await objQuality.GetCurrentDisplayNameShortAsync(token)
                                                            .ConfigureAwait(false),
                                            token: token).ConfigureAwait(false);
                                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                        {
                                            objQuality.Extra = ImprovementManager.SelectedValue;
                                            string strName = await objQuality.GetCurrentDisplayNameAsync(token)
                                                                             .ConfigureAwait(false);
                                            await treQualities.DoThreadSafeAsync(x =>
                                            {
                                                TreeNode objTreeNode = x.FindNodeByTag(objQuality);
                                                if (objTreeNode != null)
                                                    objTreeNode.Text = strName;
                                            }, token).ConfigureAwait(false);
                                        }
                                    }
                                }
                                else
                                {
                                    sbdOutdatedItems.AppendLine(
                                        await objQuality.GetCurrentDisplayNameAsync(token).ConfigureAwait(false));
                                }
                            }

                            // Refresh Martial Art Techniques.
                            await CharacterObject.MartialArts.ForEachAsync(async objMartialArt =>
                            {
                                XmlNode objMartialArtNode
                                    = await objMartialArt.GetNodeAsync(token: token).ConfigureAwait(false);
                                if (objMartialArtNode != null)
                                {
                                    // We're only re-apply improvements a list of items, not all of them
                                    if (lstInternalIdFilter?.Contains(objMartialArt.InternalId) != false
                                        && objMartialArtNode["bonus"] != null)
                                    {
                                        await ImprovementManager.CreateImprovementsAsync(CharacterObject,
                                                                    Improvement.ImprovementSource.MartialArt,
                                                                    objMartialArt.InternalId,
                                                                    objMartialArtNode["bonus"], 1,
                                                                    await objMartialArt
                                                                          .GetCurrentDisplayNameShortAsync(token)
                                                                          .ConfigureAwait(false), token: token)
                                                                .ConfigureAwait(false);
                                    }
                                }
                                else
                                {
                                    sbdOutdatedItems.AppendLine(await objMartialArt
                                                                      .GetCurrentDisplayNameShortAsync(token)
                                                                      .ConfigureAwait(false));
                                }

                                await objMartialArt.Techniques.ForEachAsync(async objTechnique =>
                                {
                                    if (lstInternalIdFilter?.Contains(objTechnique.InternalId) == false)
                                        return;
                                    XmlNode objNode = await objTechnique.GetNodeAsync(token: token)
                                                                        .ConfigureAwait(false);
                                    if (objNode != null)
                                    {
                                        if (objNode["bonus"] != null)
                                            await ImprovementManager.CreateImprovementsAsync(
                                                CharacterObject, Improvement.ImprovementSource.MartialArtTechnique,
                                                objTechnique.InternalId, objNode["bonus"], 1,
                                                await objTechnique.GetCurrentDisplayNameAsync(token)
                                                                  .ConfigureAwait(false),
                                                token: token).ConfigureAwait(false);
                                    }
                                    else
                                    {
                                        sbdOutdatedItems.AppendLine(
                                            await objTechnique.GetCurrentDisplayNameAsync(token).ConfigureAwait(false));
                                    }
                                }, token).ConfigureAwait(false);
                            }, token).ConfigureAwait(false);

                            // Refresh Spells.
                            await CharacterObject.Spells.ForEachAsync(async objSpell =>
                            {
                                if (lstInternalIdFilter?.Contains(objSpell.InternalId) == false)
                                    return;
                                XmlNode objNode = await objSpell.GetNodeAsync(token: token).ConfigureAwait(false);
                                if (objNode != null)
                                {
                                    if (objNode["bonus"] != null)
                                    {
                                        ImprovementManager.ForcedValue = objSpell.Extra;
                                        await ImprovementManager.CreateImprovementsAsync(CharacterObject,
                                            Improvement.ImprovementSource.Spell,
                                            objSpell.InternalId, objNode["bonus"], 1,
                                            await objSpell.GetCurrentDisplayNameShortAsync(token).ConfigureAwait(false),
                                            token: token).ConfigureAwait(false);
                                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                        {
                                            objSpell.Extra = ImprovementManager.SelectedValue;
                                            string strName = await objSpell.GetCurrentDisplayNameAsync(token)
                                                                           .ConfigureAwait(false);
                                            await treSpells.DoThreadSafeAsync(x =>
                                            {
                                                TreeNode objSpellNode = x.FindNode(objSpell.InternalId);
                                                if (objSpellNode != null)
                                                    objSpellNode.Text = strName;
                                            }, token).ConfigureAwait(false);
                                        }
                                    }
                                }
                                else
                                {
                                    sbdOutdatedItems.AppendLine(
                                        await objSpell.GetCurrentDisplayNameAsync(token).ConfigureAwait(false));
                                }
                            }, token).ConfigureAwait(false);

                            // Refresh Adept Powers.
                            await CharacterObject.Powers.ForEachAsync(async objPower =>
                            {
                                if (lstInternalIdFilter?.Contains(objPower.InternalId) == false)
                                    return;
                                XmlNode objNode = await objPower.GetNodeAsync(token: token).ConfigureAwait(false);
                                if (objNode != null)
                                {
                                    objPower.Bonus = objNode["bonus"];
                                    if (objPower.Bonus != null)
                                    {
                                        ImprovementManager.ForcedValue = objPower.Extra;
                                        await ImprovementManager.CreateImprovementsAsync(CharacterObject,
                                            Improvement.ImprovementSource.Power,
                                            objPower.InternalId, objPower.Bonus,
                                            await objPower.GetTotalRatingAsync(token).ConfigureAwait(false),
                                            await objPower.GetCurrentDisplayNameShortAsync(token).ConfigureAwait(false),
                                            token: token).ConfigureAwait(false);
                                    }
                                }
                                else
                                {
                                    sbdOutdatedItems.AppendLine(
                                        await objPower.GetCurrentDisplayNameAsync(token).ConfigureAwait(false));
                                }
                            }, GenericToken).ConfigureAwait(false);

                            // Refresh Complex Forms.
                            await CharacterObject.ComplexForms.ForEachAsync(async objComplexForm =>
                            {
                                if (lstInternalIdFilter?.Contains(objComplexForm.InternalId) == false)
                                    return;
                                XmlNode objNode = await objComplexForm.GetNodeAsync(token: token).ConfigureAwait(false);
                                if (objNode != null)
                                {
                                    if (objNode["bonus"] != null)
                                    {
                                        ImprovementManager.ForcedValue = objComplexForm.Extra;
                                        await ImprovementManager.CreateImprovementsAsync(CharacterObject,
                                                                    Improvement.ImprovementSource.ComplexForm,
                                                                    objComplexForm.InternalId, objNode["bonus"],
                                                                    1,
                                                                    await objComplexForm
                                                                          .GetCurrentDisplayNameShortAsync(token)
                                                                          .ConfigureAwait(false), token: token)
                                                                .ConfigureAwait(false);
                                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                        {
                                            objComplexForm.Extra = ImprovementManager.SelectedValue;
                                            string strName = await objComplexForm.GetCurrentDisplayNameAsync(token)
                                                .ConfigureAwait(false);
                                            await treComplexForms.DoThreadSafeAsync(x =>
                                            {
                                                TreeNode objCFNode = x.FindNode(objComplexForm.InternalId);
                                                if (objCFNode != null)
                                                    objCFNode.Text = strName;
                                            }, token).ConfigureAwait(false);
                                        }
                                    }
                                }
                                else
                                {
                                    sbdOutdatedItems.AppendLine(
                                        await objComplexForm.GetCurrentDisplayNameAsync(token).ConfigureAwait(false));
                                }
                            }, token).ConfigureAwait(false);

                            // Refresh AI Programs and Advanced Programs
                            await CharacterObject.AIPrograms.ForEachAsync(async objProgram =>
                            {
                                if (lstInternalIdFilter?.Contains(objProgram.InternalId) == false)
                                    return;
                                XmlNode objNode = await objProgram.GetNodeAsync(token: token).ConfigureAwait(false);
                                if (objNode != null)
                                {
                                    if (objNode["bonus"] != null)
                                    {
                                        ImprovementManager.ForcedValue = objProgram.Extra;
                                        await ImprovementManager.CreateImprovementsAsync(CharacterObject,
                                            Improvement.ImprovementSource.AIProgram,
                                            objProgram.InternalId, objNode["bonus"], 1,
                                            await objProgram.GetCurrentDisplayNameShortAsync(token)
                                                            .ConfigureAwait(false),
                                            token: token).ConfigureAwait(false);
                                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                        {
                                            objProgram.Extra = ImprovementManager.SelectedValue;
                                            string strName = await objProgram.GetCurrentDisplayNameShortAsync(token)
                                                                             .ConfigureAwait(false);
                                            await treAIPrograms.DoThreadSafeAsync(x =>
                                            {
                                                TreeNode objProgramNode = x.FindNode(objProgram.InternalId);
                                                if (objProgramNode != null)
                                                    objProgramNode.Text = strName;
                                            }, token).ConfigureAwait(false);
                                        }
                                    }
                                }
                                else
                                {
                                    sbdOutdatedItems.AppendLine(
                                        await objProgram.GetCurrentDisplayNameShortAsync(token).ConfigureAwait(false));
                                }
                            }, token).ConfigureAwait(false);

                            // Refresh Critter Powers.
                            await CharacterObject.CritterPowers.ForEachAsync(async objPower =>
                            {
                                if (lstInternalIdFilter?.Contains(objPower.InternalId) == false)
                                    return;
                                XmlNode objNode = await objPower.GetNodeAsync(token: token).ConfigureAwait(false);
                                if (objNode != null)
                                {
                                    objPower.Bonus = objNode["bonus"];
                                    if (objPower.Bonus != null)
                                    {
                                        string strSelected = objPower.Extra;
                                        if (!int.TryParse(strSelected, out int intRating))
                                        {
                                            intRating = 1;
                                            ImprovementManager.ForcedValue = strSelected;
                                        }

                                        await ImprovementManager.CreateImprovementsAsync(CharacterObject,
                                            Improvement.ImprovementSource.CritterPower,
                                            objPower.InternalId, objPower.Bonus,
                                            intRating,
                                            await objPower.GetCurrentDisplayNameShortAsync(token).ConfigureAwait(false),
                                            token: token).ConfigureAwait(false);
                                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                        {
                                            objPower.Extra = ImprovementManager.SelectedValue;
                                            string strName = await objPower.GetCurrentDisplayNameAsync(token)
                                                                           .ConfigureAwait(false);
                                            await treCritterPowers.DoThreadSafeAsync(x =>
                                            {
                                                TreeNode objPowerNode = x.FindNode(objPower.InternalId);
                                                if (objPowerNode != null)
                                                    objPowerNode.Text = strName;
                                            }, token).ConfigureAwait(false);
                                        }
                                    }
                                }
                                else
                                {
                                    sbdOutdatedItems.AppendLine(
                                        await objPower.GetCurrentDisplayNameAsync(token).ConfigureAwait(false));
                                }
                            }, token).ConfigureAwait(false);

                            // Refresh Metamagics and Echoes.
                            // We cannot use foreach because metamagics/echoes can add more metamagics/echoes
                            // ReSharper disable once ForCanBeConvertedToForeach
                            for (int j = 0;
                                 j < await CharacterObject.Metamagics.GetCountAsync(token).ConfigureAwait(false);
                                 j++)
                            {
                                Metamagic objMetamagic = await CharacterObject.Metamagics.GetValueAtAsync(j, token)
                                                                              .ConfigureAwait(false);
                                if (objMetamagic.Grade < 0)
                                    continue;
                                // We're only re-apply improvements a list of items, not all of them
                                if (lstInternalIdFilter?.Contains(objMetamagic.InternalId) == false)
                                    continue;
                                XmlNode objNode = await objMetamagic.GetNodeAsync(token: token).ConfigureAwait(false);
                                if (objNode != null)
                                {
                                    objMetamagic.Bonus = objNode["bonus"];
                                    if (objMetamagic.Bonus != null)
                                    {
                                        await ImprovementManager.CreateImprovementsAsync(
                                            CharacterObject, objMetamagic.SourceType,
                                            objMetamagic.InternalId, objMetamagic.Bonus,
                                            1,
                                            await objMetamagic.GetCurrentDisplayNameShortAsync(token)
                                                              .ConfigureAwait(false),
                                            token: token).ConfigureAwait(false);
                                    }
                                }
                                else
                                {
                                    sbdOutdatedItems.AppendLine(
                                        await objMetamagic.GetCurrentDisplayNameAsync(token).ConfigureAwait(false));
                                }
                            }

                            // Refresh Cyberware and Bioware.
                            Dictionary<Cyberware, int> dicPairableCyberwares
                                = new Dictionary<Cyberware, int>(CharacterObject.Cyberware.Count);
                            foreach (Cyberware objCyberware in await CharacterObject.Cyberware.GetAllDescendantsAsync(
                                         x => x.Children, token).ConfigureAwait(false))
                            {
                                // We're only re-apply improvements a list of items, not all of them
                                if (lstInternalIdFilter?.Contains(objCyberware.InternalId) != false)
                                {
                                    XmlNode objNode = await objCyberware.GetNodeAsync(token: token)
                                                                        .ConfigureAwait(false);
                                    if (objNode != null)
                                    {
                                        objCyberware.Bonus = objNode["bonus"];
                                        objCyberware.WirelessBonus = objNode["wirelessbonus"];
                                        objCyberware.PairBonus = objNode["pairbonus"];
                                        if (!string.IsNullOrEmpty(objCyberware.Forced) && objCyberware.Forced != "Right"
                                            && objCyberware.Forced != "Left")
                                            ImprovementManager.ForcedValue = objCyberware.Forced;
                                        if (objCyberware.Bonus != null)
                                        {
                                            await ImprovementManager.CreateImprovementsAsync(
                                                                        CharacterObject, objCyberware.SourceType,
                                                                        objCyberware.InternalId,
                                                                        objCyberware.Bonus,
                                                                        await objCyberware.GetRatingAsync(token)
                                                                            .ConfigureAwait(false),
                                                                        await objCyberware
                                                                              .GetCurrentDisplayNameShortAsync(token)
                                                                              .ConfigureAwait(false), token: token)
                                                                    .ConfigureAwait(false);
                                            if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                                objCyberware.Extra = ImprovementManager.SelectedValue;
                                        }

                                        if (!objCyberware.IsModularCurrentlyEquipped)
                                            await objCyberware.ChangeModularEquipAsync(false, token: token)
                                                              .ConfigureAwait(false);
                                        else
                                        {
                                            await objCyberware.RefreshWirelessBonusesAsync(token).ConfigureAwait(false);
                                            if (objCyberware.PairBonus != null)
                                            {
                                                Cyberware objMatchingCyberware
                                                    = dicPairableCyberwares.Keys.FirstOrDefault(
                                                        x => objCyberware.IncludePair.Contains(x.Name)
                                                             && x.Extra == objCyberware.Extra);
                                                if (objMatchingCyberware != null)
                                                    ++dicPairableCyberwares[objMatchingCyberware];
                                                else
                                                    dicPairableCyberwares.Add(objCyberware, 1);
                                            }
                                        }

                                        TreeNode objWareNode = objCyberware.SourceID == Cyberware.EssenceHoleGUID
                                                               || objCyberware.SourceID == Cyberware.EssenceAntiHoleGUID
                                            ? await treCyberware.DoThreadSafeFuncAsync(
                                                                    x => x.FindNode(objCyberware.SourceIDString), token)
                                                                .ConfigureAwait(false)
                                            : await treCyberware.DoThreadSafeFuncAsync(
                                                x => x.FindNode(objCyberware.InternalId), token).ConfigureAwait(false);
                                        if (objWareNode != null)
                                        {
                                            string strName = await objCyberware.GetCurrentDisplayNameAsync(token)
                                                                               .ConfigureAwait(false);
                                            await treCyberware.DoThreadSafeAsync(
                                                () => objWareNode.Text = strName, token).ConfigureAwait(false);
                                        }
                                    }
                                    else
                                    {
                                        sbdOutdatedItems.AppendLine(
                                            await objCyberware.GetCurrentDisplayNameAsync(token).ConfigureAwait(false));
                                    }
                                }

                                foreach (Gear objGear in objCyberware.GearChildren)
                                {
                                    await objGear
                                          .ReaddImprovements(treCyberware, sbdOutdatedItems, lstInternalIdFilter,
                                                             token: token)
                                          .ConfigureAwait(false);
                                }
                            }

                            // Separate Pass for PairBonuses
                            foreach (KeyValuePair<Cyberware, int> objItem in dicPairableCyberwares)
                            {
                                Cyberware objCyberware = objItem.Key;
                                int intCyberwaresCount = objItem.Value;
                                List<Cyberware> lstPairableCyberwares = await CharacterObject.Cyberware
                                    .DeepWhereAsync(x => x.Children,
                                                    async x => objCyberware.IncludePair
                                                                           .Contains(x.Name)
                                                               && x.Extra == objCyberware.Extra
                                                               && await x.GetIsModularCurrentlyEquippedAsync(token)
                                                                         .ConfigureAwait(false), token)
                                    .ConfigureAwait(false);
                                // Need to use slightly different logic if this cyberware has a location (Left or Right) and only pairs with itself because Lefts can only be paired with Rights and Rights only with Lefts
                                if (!string.IsNullOrEmpty(objCyberware.Location)
                                    && objCyberware.IncludePair.All(x => x == objCyberware.Name))
                                {
                                    int intMatchLocationCount = 0;
                                    int intNotMatchLocationCount = 0;
                                    foreach (Cyberware objPairableCyberware in lstPairableCyberwares)
                                    {
                                        if (objPairableCyberware.Location != objCyberware.Location)
                                            ++intNotMatchLocationCount;
                                        else
                                            ++intMatchLocationCount;
                                    }

                                    // Set the count to the total number of cyberwares in matching pairs, which would mean 2x the number of whichever location contains the fewest members (since every single one of theirs would have a pair)
                                    intCyberwaresCount = Math.Min(intNotMatchLocationCount, intMatchLocationCount) * 2;
                                }

                                if (intCyberwaresCount <= 0)
                                    continue;
                                foreach (Cyberware objLoopCyberware in lstPairableCyberwares)
                                {
                                    if ((intCyberwaresCount & 1) == 0)
                                    {
                                        if (!string.IsNullOrEmpty(objCyberware.Forced) && objCyberware.Forced != "Right"
                                            && objCyberware.Forced != "Left")
                                            ImprovementManager.ForcedValue = objCyberware.Forced;
                                        await ImprovementManager.CreateImprovementsAsync(
                                                                    CharacterObject, objLoopCyberware.SourceType,
                                                                    objLoopCyberware.InternalId + "Pair",
                                                                    objLoopCyberware.PairBonus,
                                                                    await objLoopCyberware.GetRatingAsync(token)
                                                                        .ConfigureAwait(false),
                                                                    await objLoopCyberware
                                                                          .GetCurrentDisplayNameShortAsync(token)
                                                                          .ConfigureAwait(false), token: token)
                                                                .ConfigureAwait(false);
                                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue)
                                            && string.IsNullOrEmpty(objCyberware.Extra))
                                            objCyberware.Extra = ImprovementManager.SelectedValue;
                                        TreeNode objNode = objLoopCyberware.SourceID == Cyberware.EssenceHoleGUID
                                                           || objCyberware.SourceID == Cyberware.EssenceAntiHoleGUID
                                            ? await treCyberware.DoThreadSafeFuncAsync(
                                                                    x => x.FindNode(objCyberware.SourceIDString), token)
                                                                .ConfigureAwait(false)
                                            : await treCyberware.DoThreadSafeFuncAsync(
                                                                    x => x.FindNode(objLoopCyberware.InternalId), token)
                                                                .ConfigureAwait(false);
                                        if (objNode != null)
                                        {
                                            string strName = await objCyberware.GetCurrentDisplayNameAsync(token)
                                                                               .ConfigureAwait(false);
                                            await treCyberware.DoThreadSafeAsync(() => objNode.Text = strName, token)
                                                              .ConfigureAwait(false);
                                        }
                                    }

                                    --intCyberwaresCount;
                                    if (intCyberwaresCount <= 0)
                                        break;
                                }
                            }

                            // Refresh Armors.
                            await CharacterObject.Armor.ForEachAsync(async objArmor =>
                            {
                                // We're only re-apply improvements a list of items, not all of them
                                if (lstInternalIdFilter?.Contains(objArmor.InternalId) != false)
                                {
                                    XmlNode objNode = await objArmor.GetNodeAsync(token: token).ConfigureAwait(false);
                                    if (objNode != null)
                                    {
                                        objArmor.Bonus = objNode["bonus"];
                                        if (objArmor.Bonus != null && objArmor.Equipped)
                                        {
                                            ImprovementManager.ForcedValue = objArmor.Extra;
                                            await ImprovementManager.CreateImprovementsAsync(
                                                CharacterObject, Improvement.ImprovementSource.Armor,
                                                objArmor.InternalId,
                                                objArmor.Bonus, objArmor.Rating,
                                                await objArmor.GetCurrentDisplayNameShortAsync(token)
                                                              .ConfigureAwait(false),
                                                token: token).ConfigureAwait(false);
                                            if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                            {
                                                objArmor.Extra = ImprovementManager.SelectedValue;
                                                string strName = await objArmor.GetCurrentDisplayNameAsync(token)
                                                                               .ConfigureAwait(false);
                                                await treArmor.DoThreadSafeAsync(x =>
                                                {
                                                    TreeNode objArmorNode = x.FindNode(objArmor.InternalId);
                                                    if (objArmorNode != null)
                                                        objArmorNode.Text = strName;
                                                }, token).ConfigureAwait(false);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sbdOutdatedItems.AppendLine(
                                            await objArmor.GetCurrentDisplayNameAsync(token).ConfigureAwait(false));
                                    }
                                }

                                await objArmor.ArmorMods.ForEachAsync(async objMod =>
                                {
                                    // We're only re-apply improvements a list of items, not all of them
                                    if (lstInternalIdFilter?.Contains(objMod.InternalId) != false)
                                    {
                                        XmlNode objChild
                                            = await objMod.GetNodeAsync(token: token).ConfigureAwait(false);

                                        if (objChild != null)
                                        {
                                            objMod.Bonus = objChild["bonus"];
                                            if (objMod.Bonus != null && objMod.Equipped)
                                            {
                                                ImprovementManager.ForcedValue = objMod.Extra;
                                                await ImprovementManager.CreateImprovementsAsync(
                                                                            CharacterObject,
                                                                            Improvement.ImprovementSource.ArmorMod,
                                                                            objMod.InternalId,
                                                                            objMod.Bonus, objMod.Rating,
                                                                            await objMod
                                                                                .GetCurrentDisplayNameShortAsync(token)
                                                                                .ConfigureAwait(false), token: token)
                                                                        .ConfigureAwait(false);
                                                if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                                {
                                                    objMod.Extra = ImprovementManager.SelectedValue;
                                                    string strName = await objMod.GetCurrentDisplayNameAsync(token)
                                                        .ConfigureAwait(false);
                                                    await treArmor.DoThreadSafeAsync(x =>
                                                    {
                                                        TreeNode objPluginNode = x.FindNode(objMod.InternalId);
                                                        if (objPluginNode != null)
                                                            objPluginNode.Text = strName;
                                                    }, token).ConfigureAwait(false);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            sbdOutdatedItems.AppendLine(
                                                await objMod.GetCurrentDisplayNameAsync(token).ConfigureAwait(false));
                                        }
                                    }

                                    await objMod.GearChildren.ForEachAsync(objGear => objGear
                                                                               .ReaddImprovements(
                                                                                   treArmor, sbdOutdatedItems,
                                                                                   lstInternalIdFilter, token: token).AsTask(),
                                                                           token).ConfigureAwait(false);
                                }, token).ConfigureAwait(false);

                                await objArmor.GearChildren.ForEachAsync(objGear => objGear
                                                                             .ReaddImprovements(
                                                                                 treArmor, sbdOutdatedItems,
                                                                                 lstInternalIdFilter, token: token).AsTask(),
                                                                         token).ConfigureAwait(false);

                                await objArmor.RefreshWirelessBonusesAsync(token).ConfigureAwait(false);
                            }, token).ConfigureAwait(false);

                            // Refresh Gear.
                            await CharacterObject.Gear.ForEachAsync(async objGear =>
                            {
                                await objGear
                                      .ReaddImprovements(treGear, sbdOutdatedItems, lstInternalIdFilter, token: token)
                                      .ConfigureAwait(false);
                                await objGear.RefreshWirelessBonusesAsync(token).ConfigureAwait(false);
                            }, token).ConfigureAwait(false);

                            // Refresh Weapons Gear
                            await CharacterObject.Weapons.ForEachAsync(async objWeapon =>
                            {
                                await objWeapon.WeaponAccessories.ForEachAsync(
                                                   objAccessory => objAccessory.GearChildren.ForEachAsync(objGear =>
                                                           objGear
                                                               .ReaddImprovements(
                                                                   treWeapons, sbdOutdatedItems, lstInternalIdFilter,
                                                                   token: token).AsTask(), token), token)
                                               .ConfigureAwait(false);

                                await objWeapon.RefreshWirelessBonusesAsync(token).ConfigureAwait(false);
                            }, token).ConfigureAwait(false);
                        }
                        finally
                        {
                            _blnReapplyImprovements = blnOldReapplyImprovements;
                        }

                        // If the status of any Character Event flags has changed, manually trigger those events.
                        if (blnMAGEnabled != CharacterObject.MAGEnabled)
                            await DoOnCharacterPropertyChanged(
                                new PropertyChangedEventArgs(nameof(Character.MAGEnabled))).ConfigureAwait(false);
                        if (blnRESEnabled != CharacterObject.RESEnabled)
                            await DoOnCharacterPropertyChanged(
                                new PropertyChangedEventArgs(nameof(Character.RESEnabled))).ConfigureAwait(false);
                        if (blnDEPEnabled != CharacterObject.DEPEnabled)
                            await DoOnCharacterPropertyChanged(
                                new PropertyChangedEventArgs(nameof(Character.DEPEnabled))).ConfigureAwait(false);

                        Task tskUpdate = await RequestCharacterUpdate(token).ConfigureAwait(false);
                        // Immediately await character update because it re-applies essence loss improvements
                        try
                        {
                            await tskUpdate.ConfigureAwait(false);
                        }
                        catch (OperationCanceledException)
                        {
                            return;
                        }

                        if (sbdOutdatedItems.Length > 0 && !Utils.IsUnitTest)
                        {
                            Program.ShowScrollableMessageBox(
                                this, await LanguageManager.GetStringAsync(
                                                               "Message_ReapplyImprovementsFoundOutdatedItems_Top",
                                                               token: token)
                                                           .ConfigureAwait(false) +
                                      sbdOutdatedItems +
                                      await LanguageManager.GetStringAsync(
                                                               "Message_ReapplyImprovementsFoundOutdatedItems_Bottom",
                                                               token: token)
                                                           .ConfigureAwait(false),
                                await LanguageManager
                                      .GetStringAsync("MessageTitle_ConfirmReapplyImprovements", token: token)
                                      .ConfigureAwait(false),
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                        }
                    }
                }
                finally
                {
                    await objLocker.DisposeAsync().ConfigureAwait(false);
                }
            }
            finally
            {
                await objCursorWait.DisposeAsync().ConfigureAwait(false);
            }

            await SetDirty(true, token).ConfigureAwait(false);
        }

        private void mnuEditCopy_Click(object sender, EventArgs e)
        {
            object selectedObject = null;
            if (tabCharacterTabs.SelectedTab == tabStreetGear)
            {
                // Lifestyle Tab.
                if (tabStreetGearTabs.SelectedTab == tabLifestyle)
                {
                    selectedObject = treLifestyles.SelectedNode?.Tag;
                }
                // Armor Tab.
                else if (tabStreetGearTabs.SelectedTab == tabArmor)
                {
                    selectedObject = treArmor.SelectedNode?.Tag;
                }
                // Weapons Tab.
                else if (tabStreetGearTabs.SelectedTab == tabWeapons)
                {
                    selectedObject = treWeapons.SelectedNode?.Tag;
                }
                // Gear Tab.
                else if (tabStreetGearTabs.SelectedTab == tabGear)
                {
                    selectedObject = treGear.SelectedNode?.Tag;
                }
            }
            // Cyberware Tab.
            else if (tabCharacterTabs.SelectedTab == tabCyberware)
            {
                selectedObject = treCyberware.SelectedNode?.Tag;
            }
            // Vehicles Tab.
            else if (tabCharacterTabs.SelectedTab == tabVehicles)
            {
                selectedObject = treVehicles.SelectedNode?.Tag;
            }

            CopyObject(selectedObject);
        }

        private void mnuEditPaste_Click(object sender, EventArgs e)
        {
            object objSelectedObject = null;
            if (tabCharacterTabs?.SelectedTab == tabStreetGear)
            {
                objSelectedObject = treGear.SelectedNode?.Tag;
            }
            else if (tabCharacterTabs?.SelectedTab == tabArmor)
            {
                objSelectedObject = treArmor.SelectedNode?.Tag;
            }
            else if (tabCharacterTabs?.SelectedTab == tabVehicles)
            {
                objSelectedObject = treVehicles.SelectedNode?.Tag;
            }
            else if (tabCharacterTabs?.SelectedTab == tabWeapons)
            {
                objSelectedObject = treWeapons.SelectedNode?.Tag;
            }
            else if (tabCharacterTabs?.SelectedTab == tabCyberware)
            {
                objSelectedObject = treCyberware.SelectedNode?.Tag;
            }
            else if (tabCharacterTabs?.SelectedTab == tabLifestyle)
            {
                // Intentionally blank, lifestyles are always clones.
            }
            else
            {
                Utils.BreakIfDebug();
                return;
            }

            switch (GlobalSettings.ClipboardContentType)
            {
                case ClipboardContentType.Armor:
                {
                    // Paste Armor.
                    XmlNode objXmlNode = GlobalSettings.Clipboard.SelectSingleNode("/character/armor");
                    if (objXmlNode != null)
                    {
                        Armor objArmor = new Armor(CharacterObject);
                        objArmor.Load(objXmlNode, true);
                        CharacterObject.Armor.Add(objArmor);

                        AddChildVehicles(objArmor.InternalId);
                        AddChildWeapons(objArmor.InternalId);
                    }

                    break;
                }
                case ClipboardContentType.ArmorMod:
                {
                    if (!(objSelectedObject is Armor selectedArmor && selectedArmor.AllowPasteXml)) break;
                    // Paste Armor.
                    XmlNode objXmlNode = GlobalSettings.Clipboard.SelectSingleNode("/character/armormod");
                    if (objXmlNode != null)
                    {
                        ArmorMod objArmorMod = new ArmorMod(CharacterObject);
                        objArmorMod.Load(objXmlNode, true);
                        selectedArmor.ArmorMods.Add(objArmorMod);

                        AddChildVehicles(objArmorMod.InternalId);
                        AddChildWeapons(objArmorMod.InternalId);
                    }

                    break;
                }
                case ClipboardContentType.Cyberware:
                {
                    // Paste Cyberware.
                    XmlNode objXmlNode = GlobalSettings.Clipboard.SelectSingleNode("/character/cyberware");
                    if (objXmlNode != null)
                    {
                        Cyberware objCyberware = new Cyberware(CharacterObject);
                        objCyberware.Load(objXmlNode, true);
                        if (objSelectedObject is Cyberware objCyberwareParent)
                        {
                            if (!objCyberwareParent.AllowPasteObject(objCyberware))
                            {
                                objCyberware.DeleteCyberware();
                                return;
                            }

                            objCyberware.Grade = objCyberwareParent.Grade;
                            objCyberwareParent.Children.Add(objCyberware);
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(objCyberware.LimbSlot) &&
                                !objCyberware.GetValidLimbSlot(objCyberware.GetNodeXPath(GlobalSettings.Language, GenericToken)))
                            {
                                objCyberware.DeleteCyberware();
                                return;
                            }

                            CharacterObject.Cyberware.Add(objCyberware);
                        }

                        AddChildVehicles(objCyberware.InternalId);
                        AddChildWeapons(objCyberware.InternalId);
                    }

                    break;
                }
                case ClipboardContentType.Gear:
                {
                    // Paste Gear.
                    XmlNode objXmlNode = GlobalSettings.Clipboard.SelectSingleNode("/character/gear");
                    if (objXmlNode == null)
                        break;
                    Gear objGear = new Gear(CharacterObject);
                    objGear.Load(objXmlNode, true);
                    if (objSelectedObject is ICanPaste selected && selected.AllowPasteXml &&
                        objSelectedObject is IHasGear gear)
                    {
                        gear.GearChildren.Add(objGear);
                        if (gear is ICanEquip selectedEquip && !selectedEquip.Equipped)
                            objGear.ChangeEquippedStatus(false);
                    }
                    else
                    {
                        CharacterObject.Gear.Add(objGear);
                    }

                    AddChildVehicles(objGear.InternalId);
                    AddChildWeapons(objGear.InternalId);
                    break;
                }
                case ClipboardContentType.Lifestyle:
                {
                    // Lifestyle Tab.
                    if (tabStreetGearTabs.SelectedTab != tabLifestyle)
                        break;

                    // Paste Lifestyle.
                    XmlNode objXmlNode = GlobalSettings.Clipboard.SelectSingleNode("/character/lifestyle");
                    if (objXmlNode == null)
                        break;

                    Lifestyle objLifestyle = new Lifestyle(CharacterObject);
                    objLifestyle.Load(objXmlNode, true);
                    // Reset the number of months back to 1 since 0 isn't valid in Create Mode.
                    objLifestyle.Increments = 1;
                    CharacterObject.Lifestyles.Add(objLifestyle);
                    break;
                }
                case ClipboardContentType.Vehicle:
                {
                    // Paste Vehicle.
                    XmlNode objXmlNode = GlobalSettings.Clipboard.SelectSingleNode("/character/vehicle");
                    Vehicle objVehicle = new Vehicle(CharacterObject);
                    objVehicle.Load(objXmlNode, true);
                    CharacterObject.Vehicles.Add(objVehicle);
                    break;
                }
                case ClipboardContentType.Weapon:
                {
                    // Paste Weapon.
                    XmlNode objXmlNode = GlobalSettings.Clipboard.SelectSingleNode("/character/weapon");
                    if (objXmlNode != null)
                    {
                        Weapon objWeapon;
                        switch (objSelectedObject)
                        {
                            case Weapon objWeaponParent when !objWeaponParent.AllowPasteXml:
                                return;

                            case Weapon objWeaponParent:
                                objWeapon = new Weapon(CharacterObject);
                                objWeapon.Load(objXmlNode, true);
                                objWeaponParent.Children.Add(objWeapon);
                                break;

                            case WeaponMount objWeaponMount when !objWeaponMount.AllowPasteXml:
                                return;

                            case WeaponMount objWeaponMount:
                                objWeapon = new Weapon(CharacterObject);
                                objWeapon.Load(objXmlNode, true);
                                objWeaponMount.Weapons.Add(objWeapon);
                                break;

                            case VehicleMod objMod when !objMod.AllowPasteXml:
                                return;

                            case VehicleMod objMod:
                                objWeapon = new Weapon(CharacterObject);
                                objWeapon.Load(objXmlNode, true);
                                objMod.Weapons.Add(objWeapon);
                                break;

                            default:
                                objWeapon = new Weapon(CharacterObject);
                                objWeapon.Load(objXmlNode, true);
                                CharacterObject.Weapons.Add(objWeapon);
                                break;
                        }

                        AddChildVehicles(objWeapon.InternalId);
                        AddChildWeapons(objWeapon.InternalId);
                    }

                    break;
                }
                case ClipboardContentType.WeaponAccessory:
                {
                    if (!(objSelectedObject is Weapon selectedWeapon && selectedWeapon.AllowPasteXml))
                        break;
                    // Paste Armor.
                    XmlNode objXmlNode = GlobalSettings.Clipboard.SelectSingleNode("/character/accessory");
                    if (objXmlNode != null)
                    {
                        WeaponAccessory objMod = new WeaponAccessory(CharacterObject);
                        objMod.Load(objXmlNode, true);
                        selectedWeapon.WeaponAccessories.Add(objMod);

                        AddChildVehicles(objMod.InternalId);
                        AddChildWeapons(objMod.InternalId);
                    }

                    break;
                }
                default:
                    Utils.BreakIfDebug();
                    break;
            }

            void AddChildWeapons(string parentId)
            {
                XmlNodeList objXmlNodeList = GlobalSettings.Clipboard.SelectNodes("/character/weapons/weapon");
                if (!(objXmlNodeList?.Count > 0))
                    return;
                foreach (XmlNode objLoopNode in objXmlNodeList)
                {
                    Weapon objWeapon = new Weapon(CharacterObject);
                    objWeapon.Load(objLoopNode, true);
                    CharacterObject.Weapons.Add(objWeapon);
                    objWeapon.ParentID = parentId;
                }
            }

            void AddChildVehicles(string parentId)
            {
                // Add any Vehicles that come with the Cyberware.
                XmlNodeList objXmlNodeList = GlobalSettings.Clipboard.SelectNodes("/character/vehicles/vehicle");
                if (!(objXmlNodeList?.Count > 0))
                    return;
                foreach (XmlNode objLoopNode in objXmlNodeList)
                {
                    Vehicle objVehicle = new Vehicle(CharacterObject);
                    objVehicle.Load(objLoopNode, true);
                    CharacterObject.Vehicles.Add(objVehicle);
                    objVehicle.ParentID = parentId;
                }
            }
        }

        private async void mnuSpecialConvertToFreeSprite_Click(object sender, EventArgs e)
        {
            try
            {
                XmlNode objXmlPower
                    = (await CharacterObject.LoadDataAsync("critterpowers.xml", token: GenericToken)
                                            .ConfigureAwait(false))
                    .SelectSingleNode("/chummer/powers/power[name = \"Denial\"]");
                CritterPower objPower = new CritterPower(CharacterObject);
                objPower.Create(objXmlPower);
                objPower.CountTowardsLimit = false;
                if (objPower.InternalId.IsEmptyGuid())
                    return;

                await CharacterObject.CritterPowers.AddAsync(objPower, GenericToken).ConfigureAwait(false);

                CharacterObject.MetatypeCategory = "Free Sprite";
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        #endregion Menu Events

        #region Martial Tab Control Events

        private async void treMartialArts_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedMartialArt(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async Task RefreshSelectedMartialArt(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                object objSelectedNodeTag = await treMartialArts.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token)
                                                                .ConfigureAwait(false);
                if (objSelectedNodeTag is IHasSource objSelected)
                {
                    await lblMartialArtSourceLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                  .ConfigureAwait(false);
                    await lblMartialArtSource.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                    await objSelected.SetSourceDetailAsync(lblMartialArtSource, token).ConfigureAwait(false);
                }
                else
                {
                    await lblMartialArtSourceLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                    await lblMartialArtSource.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                }

                switch (objSelectedNodeTag)
                {
                    case MartialArt objMartialArt:
                        await cmdDeleteMartialArt.DoThreadSafeAsync(x => x.Enabled = !objMartialArt.IsQuality, token)
                                                 .ConfigureAwait(false);
                        break;

                    case ICanRemove _:
                        await cmdDeleteMartialArt.DoThreadSafeAsync(x => x.Enabled = true, token).ConfigureAwait(false);
                        break;

                    default:
                        await cmdDeleteMartialArt.DoThreadSafeAsync(x => x.Enabled = false, token)
                                                 .ConfigureAwait(false);
                        await SourceString.Blank.SetControlAsync(lblMartialArtSource, token).ConfigureAwait(false);
                        break;
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        #endregion Martial Tab Control Events

        #region Button Events

        private async void cmdAddSpell_Click(object sender, EventArgs e)
        {
            try
            {
                // Open the Spells XML file and locate the selected piece.
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("spells.xml", token: GenericToken)
                                                                  .ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectSpell> frmPickSpell
                               = await ThreadSafeForm<SelectSpell>.GetAsync(() => new SelectSpell(CharacterObject), GenericToken)
                                                                  .ConfigureAwait(false))
                        {
                            // Make sure the dialogue window was not canceled.
                            if (await frmPickSpell.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;

                            blnAddAgain = frmPickSpell.MyForm.AddAgain;

                            XmlNode objXmlSpell
                                = objXmlDocument.TryGetNodeByNameOrId("/chummer/spells/spell",frmPickSpell.MyForm.SelectedSpell);

                            Spell objSpell = new Spell(CharacterObject);
                            try
                            {
                                objSpell.Create(objXmlSpell, string.Empty, frmPickSpell.MyForm.Limited,
                                                frmPickSpell.MyForm.Extended,
                                                frmPickSpell.MyForm.Alchemical);
                                if (objSpell.InternalId.IsEmptyGuid())
                                {
                                    await objSpell.DisposeAsync().ConfigureAwait(false);
                                    continue;
                                }

                                objSpell.FreeBonus = frmPickSpell.MyForm.FreeBonus;
                                // Barehanded Adept
                                if (objSpell.FreeBonus && CharacterObject.AdeptEnabled
                                                       && !CharacterObject.MagicianEnabled
                                                       && (objSpell.Range == "T" || objSpell.Range == "T (A)"))
                                {
                                    objSpell.BarehandedAdept = true;
                                }

                                await CharacterObject.Spells.AddAsync(objSpell, GenericToken).ConfigureAwait(false);
                            }
                            catch
                            {
                                await objSpell.DisposeAsync().ConfigureAwait(false);
                                throw;
                            }
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void cmdDeleteSpell_Click(object sender, EventArgs e)
        {
            // Locate the Spell that is selected in the tree.
            if (!(treSpells.SelectedNode?.Tag is Spell objSpell))
                return;
            // Spells that come from Initiation Grades can't be deleted normally.
            if (objSpell.Grade != 0)
                return;
            objSpell.Remove();
        }

        private async void cmdAddSpirit_Click(object sender, EventArgs e)
        {
            try
            {
                await AddSpirit(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddSprite_Click(object sender, EventArgs e)
        {
            try
            {
                await AddSprite(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddContact_Click(object sender, EventArgs e)
        {
            try
            {
                await AddContact(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddEnemy_Click(object sender, EventArgs e)
        {
            try
            {
                await AddEnemy(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddPet_Click(object sender, EventArgs e)
        {
            try
            {
                await AddPet(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsAddFromFile_Click(object sender, EventArgs e)
        {
            try
            {
                await AddContactsFromFile(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddCyberware_Click(object sender, EventArgs e)
        {
            try
            {
                bool blnAddAgain;
                do
                {
                    blnAddAgain = await PickCyberware(null, Improvement.ImprovementSource.Cyberware, GenericToken)
                        .ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void cmdDeleteCyberware_Click(object sender, EventArgs e)
        {
            if (!(treCyberware.SelectedNode?.Tag is ICanRemove selectedObject))
                return;
            selectedObject.Remove();
        }

        private async void cmdAddComplexForm_Click(object sender, EventArgs e)
        {
            try
            {
                XmlDocument objXmlDocument
                    = await CharacterObject.LoadDataAsync("complexforms.xml", token: GenericToken)
                                           .ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        // The number of Complex Forms cannot exceed twice the character's RES.
                        if (await CharacterObject.ComplexForms.GetCountAsync(GenericToken).ConfigureAwait(false)
                            >= await CharacterObject.RES.GetValueAsync(GenericToken).ConfigureAwait(false) * 2
                            + await ImprovementManager.ValueOfAsync(CharacterObject,
                                                                    Improvement.ImprovementType.ComplexFormLimit,
                                                                    token: GenericToken)
                                                      .ConfigureAwait(false)
                            && !CharacterObject.IgnoreRules)
                        {
                            Program.ShowScrollableMessageBox(
                                this,
                                await LanguageManager.GetStringAsync("Message_ComplexFormLimit", token: GenericToken).ConfigureAwait(false),
                                await LanguageManager.GetStringAsync("MessageTitle_ComplexFormLimit", token: GenericToken)
                                                     .ConfigureAwait(false),
                                MessageBoxButtons.OK, MessageBoxIcon.Information);
                            break;
                        }

                        XmlNode objXmlComplexForm;
                        // Let the user select a Program.
                        using (ThreadSafeForm<SelectComplexForm> frmPickComplexForm
                               = await ThreadSafeForm<SelectComplexForm>.GetAsync(
                                   () => new SelectComplexForm(CharacterObject), GenericToken).ConfigureAwait(false))
                        {
                            // Make sure the dialogue window was not canceled.
                            if (await frmPickComplexForm.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;

                            blnAddAgain = frmPickComplexForm.MyForm.AddAgain;

                            objXmlComplexForm = objXmlDocument.TryGetNodeByNameOrId("/chummer/complexforms/complexform", frmPickComplexForm.MyForm.SelectedComplexForm);
                        }

                        if (objXmlComplexForm == null)
                            continue;

                        ComplexForm objComplexForm = new ComplexForm(CharacterObject);
                        objComplexForm.Create(objXmlComplexForm);
                        if (objComplexForm.InternalId.IsEmptyGuid())
                            continue;

                        await CharacterObject.ComplexForms.AddAsync(objComplexForm, GenericToken).ConfigureAwait(false);
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddAIProgram_Click(object sender, EventArgs e)
        {
            try
            {
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("programs.xml", token: GenericToken)
                                                                  .ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        XmlNode objXmlProgram;
                        // Let the user select a Program.
                        using (ThreadSafeForm<SelectAIProgram> frmPickProgram
                               = await ThreadSafeForm<SelectAIProgram>.GetAsync(
                                   () => new SelectAIProgram(CharacterObject), GenericToken).ConfigureAwait(false))
                        {
                            // Make sure the dialogue window was not canceled.
                            if (await frmPickProgram.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                            {
                                break;
                            }

                            blnAddAgain = frmPickProgram.MyForm.AddAgain;

                            objXmlProgram = objXmlDocument.TryGetNodeByNameOrId("/chummer/programs/program", frmPickProgram.MyForm.SelectedProgram);
                        }

                        if (objXmlProgram == null)
                            continue;

                        // Check for SelectText.
                        string strExtra = string.Empty;
                        XPathNavigator xmlSelectText = await objXmlProgram.SelectSingleNodeAndCacheExpressionAsNavigatorAsync("bonus/selecttext", GenericToken).ConfigureAwait(false);
                        if (xmlSelectText != null)
                        {
                            string strDescription = string.Format(GlobalSettings.CultureInfo,
                                                                  await LanguageManager.GetStringAsync(
                                                                          "String_Improvement_SelectText", token: GenericToken)
                                                                      .ConfigureAwait(false),
                                                                  objXmlProgram["translate"]?.InnerText
                                                                  ?? objXmlProgram["name"]?.InnerText);
                            using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                                       () => new SelectText
                                       {
                                           Description = strDescription
                                       }, GenericToken).ConfigureAwait(false))
                            {
                                if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                    == DialogResult.Cancel)
                                    continue;
                                strExtra = frmPickText.MyForm.SelectedValue;
                            }
                        }

                        AIProgram objProgram = new AIProgram(CharacterObject);
                        objProgram.Create(objXmlProgram, strExtra);
                        if (objProgram.InternalId.IsEmptyGuid())
                            continue;

                        await CharacterObject.AIPrograms.AddAsync(objProgram, GenericToken).ConfigureAwait(false);
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void cmdDeleteArmor_Click(object sender, EventArgs e)
        {
            if (!(treArmor.SelectedNode?.Tag is ICanRemove selectedObject))
                return;
            selectedObject.Remove();
        }

        private async void cmdAddBioware_Click(object sender, EventArgs e)
        {
            try
            {
                bool blnAddAgain;
                do
                {
                    blnAddAgain = await PickCyberware(null, Improvement.ImprovementSource.Bioware, GenericToken)
                        .ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddWeapon_Click(object sender, EventArgs e)
        {
            try
            {
                bool blnAddAgain;
                Location location = null;
                if (await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                    .ConfigureAwait(false) is Location
                    objLocation)
                {
                    location = objLocation;
                }

                do
                {
                    blnAddAgain = await AddWeapon(location, GenericToken).ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async ValueTask<bool> AddWeapon(Location objLocation = null, CancellationToken token = default)
        {
            CursorWait objCursorWait = await CursorWait.NewAsync(this, token: token).ConfigureAwait(false);
            try
            {
                using (ThreadSafeForm<SelectWeapon> frmPickWeapon
                       = await ThreadSafeForm<SelectWeapon>.GetAsync(() => new SelectWeapon(CharacterObject), token)
                                                           .ConfigureAwait(false))
                {
                    // Make sure the dialogue window was not canceled.
                    if (await frmPickWeapon.ShowDialogSafeAsync(this, token).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return false;

                    // Open the Weapons XML file and locate the selected piece.
                    XmlNode objXmlWeapon
                        = (await CharacterObject.LoadDataAsync("weapons.xml", token: token).ConfigureAwait(false))
                        .TryGetNodeByNameOrId(
                            "/chummer/weapons/weapon", frmPickWeapon.MyForm.SelectedWeapon);
                    if (objXmlWeapon == null)
                        return frmPickWeapon.MyForm.AddAgain;

                    List<Weapon> lstWeapons = new List<Weapon>(1);
                    Weapon objWeapon = new Weapon(CharacterObject);
                    objWeapon.Create(objXmlWeapon, lstWeapons);
                    objWeapon.DiscountCost = frmPickWeapon.MyForm.BlackMarketDiscount;
                    if (frmPickWeapon.MyForm.FreeCost)
                    {
                        objWeapon.Cost = "0";
                    }

                    //objWeapon.Location = objLocation;
                    if (objLocation != null)
                        await objLocation.Children.AddAsync(objWeapon, token).ConfigureAwait(false);
                    await CharacterObject.Weapons.AddAsync(objWeapon, token).ConfigureAwait(false);

                    foreach (Weapon objExtraWeapon in lstWeapons)
                    {
                        await CharacterObject.Weapons.AddAsync(objExtraWeapon, token).ConfigureAwait(false);
                    }

                    return frmPickWeapon.MyForm.AddAgain;
                }
            }
            finally
            {
                await objCursorWait.DisposeAsync().ConfigureAwait(false);
            }
        }

        private void cmdDeleteWeapon_Click(object sender, EventArgs e)
        {
            if (!(treWeapons.SelectedNode?.Tag is ICanRemove objSelectedNode))
                return;
            objSelectedNode.Remove();
        }

        private async void cmdAddLifestyle_Click(object sender, EventArgs e)
        {
            try
            {
                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        Lifestyle objLifestyle;
                        using (ThreadSafeForm<SelectLifestyle> frmPickLifestyle
                               = await ThreadSafeForm<SelectLifestyle>.GetAsync(
                                   () => new SelectLifestyle(CharacterObject), GenericToken).ConfigureAwait(false))
                        {
                            // Make sure the dialogue window was not canceled.
                            if (await frmPickLifestyle.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                            {
                                await frmPickLifestyle.MyForm.SelectedLifestyle.DisposeAsync().ConfigureAwait(false);
                                return;
                            }

                            blnAddAgain = frmPickLifestyle.MyForm.AddAgain;
                            objLifestyle = frmPickLifestyle.MyForm.SelectedLifestyle;
                        }

                        await CharacterObject.Lifestyles.AddAsync(objLifestyle, GenericToken).ConfigureAwait(false);
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void cmdDeleteLifestyle_Click(object sender, EventArgs e)
        {
            // Delete the selected Lifestyle.
            if (!(treLifestyles.SelectedNode?.Tag is ICanRemove objSelectedObject))
                return;
            objSelectedObject.Remove();
        }

        private async void cmdAddGear_Click(object sender, EventArgs e)
        {
            try
            {
                bool blnAddAgain;
                string strSelectedId = string.Empty;
                if (await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken).ConfigureAwait(false) is
                    Location objNode)
                {
                    strSelectedId = objNode.InternalId;
                }

                do
                {
                    blnAddAgain = await PickGear(strSelectedId, GenericToken).ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void cmdDeleteGear_Click(object sender, EventArgs e)
        {
            if (!(treGear.SelectedNode?.Tag is ICanRemove objSelectedGear))
                return;
            objSelectedGear.Remove();
        }

        private async ValueTask<bool> AddVehicle(Location objLocation = null, CancellationToken token = default)
        {
            CursorWait objCursorWait = await CursorWait.NewAsync(this, token: token).ConfigureAwait(false);
            try
            {
                using (ThreadSafeForm<SelectVehicle> frmPickVehicle
                       = await ThreadSafeForm<SelectVehicle>.GetAsync(() => new SelectVehicle(CharacterObject), token)
                                                            .ConfigureAwait(false))
                {
                    // Make sure the dialogue window was not canceled.
                    if (await frmPickVehicle.ShowDialogSafeAsync(this, token).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return false;

                    // Open the Vehicles XML file and locate the selected piece.
                    XmlNode objXmlVehicle
                        = (await CharacterObject.LoadDataAsync("vehicles.xml", token: token).ConfigureAwait(false))
                        .TryGetNodeByNameOrId(
                            "/chummer/vehicles/vehicle", frmPickVehicle.MyForm.SelectedVehicle);
                    if (objXmlVehicle == null)
                        return frmPickVehicle.MyForm.AddAgain;
                    Vehicle objVehicle = new Vehicle(CharacterObject);
                    objVehicle.Create(objXmlVehicle);
                    // Update the Used Vehicle information if applicable.
                    if (frmPickVehicle.MyForm.UsedVehicle)
                    {
                        objVehicle.Avail = frmPickVehicle.MyForm.UsedAvail;
                        objVehicle.Cost = frmPickVehicle.MyForm.UsedCost.ToString(GlobalSettings.InvariantCultureInfo);
                    }

                    objVehicle.DiscountCost = frmPickVehicle.MyForm.BlackMarketDiscount;
                    if (frmPickVehicle.MyForm.FreeCost)
                    {
                        objVehicle.Cost = "0";
                    }

                    //objVehicle.Location = objLocation;
                    if (objLocation != null)
                        await objLocation.Children.AddAsync(objVehicle, token).ConfigureAwait(false);

                    await CharacterObject.Vehicles.AddAsync(objVehicle, token).ConfigureAwait(false);

                    return frmPickVehicle.MyForm.AddAgain;
                }
            }
            finally
            {
                await objCursorWait.DisposeAsync().ConfigureAwait(false);
            }
        }

        private async void cmdAddVehicle_Click(object sender, EventArgs e)
        {
            try
            {
                bool blnAddAgain;
                do
                {
                    blnAddAgain = await AddVehicle(
                        await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                         .ConfigureAwait(false) as Location, GenericToken).ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdDeleteVehicle_Click(object sender, EventArgs e)
        {
            try
            {
                await DeleteVehicle(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async ValueTask DeleteVehicle(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            if (!await cmdDeleteVehicle.DoThreadSafeFuncAsync(x => x.Enabled, token).ConfigureAwait(false))
                return;
            // Delete the selected Vehicle.
            object objSelectedNodeTag = await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token)
                                                         .ConfigureAwait(false);
            switch (objSelectedNodeTag)
            {
                // Delete the selected Vehicle.
                case null:
                    return;

                case VehicleMod objMod:
                {
                    // If this is the Obsolete Mod, the user must select a percentage. This will create an Expense that costs X% of the Vehicle's base cost to remove the special Obsolete Mod.
                    if (objMod.Name == "Obsolete" ||
                        objMod.Name == "Obsolescent" && CharacterObjectSettings.AllowObsolescentUpgrade)
                    {
                        decimal decPercentage;
                        string strRetrofit = await LanguageManager.GetStringAsync("String_Retrofit", token: token)
                                                                  .ConfigureAwait(false);
                        using (ThreadSafeForm<SelectNumber> frmModPercent = await ThreadSafeForm<SelectNumber>.GetAsync(
                                   () => new SelectNumber
                                   {
                                       Minimum = 0,
                                       Maximum = 1000000,
                                       Description = strRetrofit
                                   }, token).ConfigureAwait(false))
                        {
                            if (await frmModPercent.ShowDialogSafeAsync(this, token).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                return;

                            decPercentage = frmModPercent.MyForm.SelectedValue;
                        }

                        decimal decVehicleCost = objMod.Parent.OwnCost;

                        // Make sure the character has enough Nuyen for the expense.
                        decimal decCost = decVehicleCost * decPercentage / 100;

                        // Create a Vehicle Mod for the Retrofit.
                        VehicleMod objRetrofit = new VehicleMod(CharacterObject);

                        XmlDocument objVehiclesDoc = await CharacterObject.LoadDataAsync("vehicles.xml", token: token)
                                                                          .ConfigureAwait(false);
                        XmlNode objXmlNode = objVehiclesDoc.SelectSingleNode("/chummer/mods/mod[name = \"Retrofit\"]");
                        objRetrofit.Create(objXmlNode, 0, objMod.Parent);
                        objRetrofit.Cost = decCost.ToString(GlobalSettings.InvariantCultureInfo);
                        objRetrofit.IncludedInVehicle = true;
                        await objMod.Parent.Mods.AddAsync(objRetrofit, token).ConfigureAwait(false);
                    }

                    await objMod.DeleteVehicleModAsync(token: token).ConfigureAwait(false);
                    break;
                }
                case ICanRemove selectedObject:
                {
                    selectedObject.Remove();
                    break;
                }
            }
        }

        private async void cmdAddMartialArt_Click(object sender, EventArgs e)
        {
            try
            {
                await MartialArt.Purchase(CharacterObject, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void cmdDeleteMartialArt_Click(object sender, EventArgs e)
        {
            if (!(treMartialArts.SelectedNode?.Tag is ICanRemove objSelectedNode))
                return;
            objSelectedNode.Remove();
        }

        private async void cmdAddMugshot_Click(object sender, EventArgs e)
        {
            try
            {
                if (!await AddMugshot(GenericToken).ConfigureAwait(false))
                    return;
                string strText = await LanguageManager.GetStringAsync("String_Of", token: GenericToken).ConfigureAwait(false)
                                 + (await CharacterObject.Mugshots.GetCountAsync(GenericToken).ConfigureAwait(false))
                                 .ToString(GlobalSettings.CultureInfo);
                await lblNumMugshots.DoThreadSafeAsync(x => x.Text = strText, GenericToken).ConfigureAwait(false);
                await nudMugshotIndex.DoThreadSafeAsync(x =>
                {
                    ++x.Maximum;
                    x.Value = CharacterObject.Mugshots.Count;
                }, GenericToken).ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdDeleteMugshot_Click(object sender, EventArgs e)
        {
            if (CharacterObject.Mugshots.Count == 0)
                return;
            try
            {
                RemoveMugshot(await nudMugshotIndex.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken).ConfigureAwait(false) - 1);
                string strText = await LanguageManager.GetStringAsync("String_Of", token: GenericToken).ConfigureAwait(false)
                                 + (await CharacterObject.Mugshots.GetCountAsync(GenericToken).ConfigureAwait(false))
                                 .ToString(GlobalSettings.CultureInfo);
                await lblNumMugshots.DoThreadSafeAsync(x => x.Text = strText, GenericToken).ConfigureAwait(false);
                await nudMugshotIndex.DoThreadSafeAsync(x =>
                {
                    --x.Maximum;
                    if (x.Value > x.Maximum)
                        x.Value = x.Maximum;
                    else
                    {
                        chkIsMainMugshot.DoThreadSafe(y =>
                        {
                            if (x.ValueAsInt - 1 == CharacterObject.MainMugshotIndex)
                                y.Checked = true;
                            else if (y.Checked)
                                y.Checked = false;
                        });

                        UpdateMugshot(picMugshot, x.ValueAsInt - 1);
                    }
                }, GenericToken).ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void nudMugshotIndex_ValueChanged(object sender, EventArgs e)
        {
            if (CharacterObject.Mugshots.Count == 0)
            {
                nudMugshotIndex.Minimum = 0;
                nudMugshotIndex.Maximum = 0;
                nudMugshotIndex.Value = 0;
            }
            else
            {
                nudMugshotIndex.Minimum = 1;
                if (nudMugshotIndex.Value < nudMugshotIndex.Minimum)
                    nudMugshotIndex.Value = nudMugshotIndex.Maximum;
                else if (nudMugshotIndex.Value > nudMugshotIndex.Maximum)
                    nudMugshotIndex.Value = nudMugshotIndex.Minimum;
            }

            if (nudMugshotIndex.ValueAsInt - 1 == CharacterObject.MainMugshotIndex)
                chkIsMainMugshot.Checked = true;
            else if (chkIsMainMugshot.Checked)
                chkIsMainMugshot.Checked = false;

            UpdateMugshot(picMugshot, nudMugshotIndex.ValueAsInt - 1);
        }

        private async void chkIsMainMugshot_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                bool blnStatusChanged = false;
                int intSelectedIndex = await nudMugshotIndex.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                            .ConfigureAwait(false);
                switch (await chkIsMainMugshot.DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                              .ConfigureAwait(false))
                {
                    case true when CharacterObject.MainMugshotIndex != intSelectedIndex - 1:
                        CharacterObject.MainMugshotIndex = intSelectedIndex - 1;
                        blnStatusChanged = true;
                        break;

                    case false when intSelectedIndex - 1 == CharacterObject.MainMugshotIndex:
                        CharacterObject.MainMugshotIndex = -1;
                        blnStatusChanged = true;
                        break;
                }

                if (blnStatusChanged)
                {
                    await SetDirty(true).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddMetamagic_Click(object sender, EventArgs e)
        {
            try
            {
                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    if (await CharacterObject.GetMAGEnabledAsync(GenericToken).ConfigureAwait(false))
                    {
                        // Make sure that the Initiate Grade is not attempting to go above the character's MAG CharacterAttribute.
                        if (CharacterObject.InitiateGrade + 1
                            > await (await CharacterObject.GetAttributeAsync("MAG", token: GenericToken)
                                                          .ConfigureAwait(false))
                                    .GetTotalValueAsync(GenericToken).ConfigureAwait(false) ||
                            CharacterObjectSettings.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept
                                                                               && CharacterObject.InitiateGrade + 1
                                                                               > await (await CharacterObject
                                                                                       .GetAttributeAsync(
                                                                                           "MAGAdept",
                                                                                           token: GenericToken)
                                                                                       .ConfigureAwait(false))
                                                                                   .GetTotalValueAsync(GenericToken)
                                                                                   .ConfigureAwait(false))
                        {
                            Program.ShowScrollableMessageBox(
                                this,
                                await LanguageManager.GetStringAsync("Message_CannotIncreaseInitiateGrade", token: GenericToken)
                                                     .ConfigureAwait(false),
                                await LanguageManager.GetStringAsync("MessageTitle_CannotIncreaseInitiateGrade", token: GenericToken)
                                                     .ConfigureAwait(false),
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Information);
                            return;
                        }

                        // Create the Initiate Grade object.
                        InitiationGrade objGrade = new InitiationGrade(CharacterObject);
                        objGrade.Create(await CharacterObject.GetInitiateGradeAsync(GenericToken).ConfigureAwait(false) + 1, false,
                                        await chkInitiationGroup.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false),
                                        await chkInitiationOrdeal.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false),
                                        await chkInitiationSchooling.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false), GenericToken);
                        await CharacterObject.InitiationGrades.AddWithSortAsync(objGrade, token: GenericToken)
                                             .ConfigureAwait(false);
                    }
                    else if (await CharacterObject.GetRESEnabledAsync(GenericToken).ConfigureAwait(false))
                    {
                        string strText = await LanguageManager.GetStringAsync("Button_AddEcho", token: GenericToken).ConfigureAwait(false);
                        await cmsMetamagic.DoThreadSafeAsync(() =>
                        {
                            tsMetamagicAddArt.Visible = false;
                            tsMetamagicAddEnchantment.Visible = false;
                            tsMetamagicAddEnhancement.Visible = false;
                            tsMetamagicAddRitual.Visible = false;
                            tsMetamagicAddMetamagic.Text = strText;
                        }, GenericToken).ConfigureAwait(false);

                        // Make sure that the Initiate Grade is not attempting to go above the character's RES CharacterAttribute.
                        if (CharacterObject.SubmersionGrade + 1
                            > (await (await CharacterObject.GetAttributeAsync("RES", token: GenericToken)
                                                           .ConfigureAwait(false))
                                     .GetTotalValueAsync(GenericToken).ConfigureAwait(false)))
                        {
                            Program.ShowScrollableMessageBox(
                                this,
                                await LanguageManager.GetStringAsync("Message_CannotIncreaseSubmersionGrade", token: GenericToken)
                                                     .ConfigureAwait(false),
                                await LanguageManager.GetStringAsync("MessageTitle_CannotIncreaseSubmersionGrade", token: GenericToken)
                                                     .ConfigureAwait(false),
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Information);
                            return;
                        }

                        // Create the Initiate Grade object.
                        InitiationGrade objGrade = new InitiationGrade(CharacterObject);
                        objGrade.Create(await CharacterObject.GetSubmersionGradeAsync(GenericToken).ConfigureAwait(false) + 1, true,
                                        await chkInitiationGroup.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false),
                                        await chkInitiationOrdeal.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false),
                                        await chkInitiationSchooling.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false), GenericToken);
                        await CharacterObject.InitiationGrades.AddWithSortAsync(objGrade, token: GenericToken)
                                             .ConfigureAwait(false);
                    }
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void cmdDeleteMetamagic_Click(object sender, EventArgs e)
        {
            if (!(treMetamagic.SelectedNode?.Tag is ICanRemove selectedObject))
                return;
            selectedObject.Remove();
        }

        private async void cmdAddCritterPower_Click(object sender, EventArgs e)
        {
            try
            {
                // Make sure the Critter is allowed to have Optional Powers.
                XmlDocument objXmlDocument
                    = await CharacterObject.LoadDataAsync("critterpowers.xml", token: GenericToken)
                                           .ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectCritterPower> frmPickCritterPower
                               = await ThreadSafeForm<SelectCritterPower>.GetAsync(
                                   () => new SelectCritterPower(CharacterObject), GenericToken).ConfigureAwait(false))
                        {
                            if (await frmPickCritterPower.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;

                            blnAddAgain = frmPickCritterPower.MyForm.AddAgain;

                            XmlNode objXmlPower = objXmlDocument.TryGetNodeByNameOrId("/chummer/powers/power", frmPickCritterPower.MyForm.SelectedPower);
                            CritterPower objPower = new CritterPower(CharacterObject);
                            objPower.Create(objXmlPower, frmPickCritterPower.MyForm.SelectedRating);
                            objPower.PowerPoints = frmPickCritterPower.MyForm.PowerPoints;
                            if (objPower.InternalId.IsEmptyGuid())
                                continue;

                            await CharacterObject.CritterPowers.AddAsync(objPower, GenericToken).ConfigureAwait(false);
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void cmdDeleteCritterPower_Click(object sender, EventArgs e)
        {
            // If the selected object is not a critter or it comes from an initiate grade, we don't want to remove it.
            if (!(treCritterPowers.SelectedNode?.Tag is CritterPower objCritterPower) || objCritterPower.Grade != 0)
                return;
            objCritterPower.Remove();
        }

        private void cmdDeleteComplexForm_Click(object sender, EventArgs e)
        {
            if (!(treComplexForms.SelectedNode?.Tag is ICanRemove objSelectedObject))
                return;
            objSelectedObject.Remove();
        }

        private void cmdDeleteAIProgram_Click(object sender, EventArgs e)
        {
            // Delete the selected AI Program.
            if (!(treAIPrograms.SelectedNode?.Tag is ICanRemove objSelectedObject))
                return;
            objSelectedObject.Remove();
        }

        private async void cmdLifeModule_Click(object sender, EventArgs e)
        {
            try
            {
                XPathNavigator xmlStagesParentNode
                    = (await CharacterObject.LoadDataXPathAsync("lifemodules.xml", token: GenericToken)
                                            .ConfigureAwait(false)).SelectSingleNode(
                        "chummer/stages");
                if (xmlStagesParentNode == null)
                    return;

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        //from 1 to second highest life module order possible (ye hardcoding is bad, but extra stage is a niche case)
                        int intStage;
                        for (intStage = 1; intStage < 5; ++intStage)
                        {
                            XPathNavigator xmlStageNode = await xmlStagesParentNode
                                                                .SelectSingleNodeAndCacheExpressionAsync(
                                                                    "stage[@order = "
                                                                    + intStage.ToString(
                                                                                  GlobalSettings.InvariantCultureInfo)
                                                                              .CleanXPath()
                                                                    + ']', GenericToken).ConfigureAwait(false);
                            if (xmlStageNode == null)
                            {
                                --intStage;
                                break;
                            }

                            if (!await CharacterObject.Qualities.AnyAsync(x => x.Type == QualityType.LifeModule
                                                                               && x.Stage == xmlStageNode.Value,
                                                                          GenericToken).ConfigureAwait(false))
                            {
                                break;
                            }
                        }

                        //i--; //Counter last increment
                        XmlNode objXmlLifeModule;
                        using (ThreadSafeForm<SelectLifeModule> frmSelectLifeModule
                               = await ThreadSafeForm<SelectLifeModule>.GetAsync(
                                                                           () => new SelectLifeModule(CharacterObject,
                                                                               intStage), GenericToken)
                                                                       .ConfigureAwait(false))
                        {
                            if (await frmSelectLifeModule.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;

                            blnAddAgain = frmSelectLifeModule.MyForm.AddAgain;
                            objXmlLifeModule = frmSelectLifeModule.MyForm.SelectedNode;
                        }

                        List<Weapon> lstWeapons = new List<Weapon>(1);
                        Quality objLifeModule = new Quality(CharacterObject);
                        try
                        {
                            objLifeModule.Create(objXmlLifeModule, QualitySource.LifeModule, lstWeapons);
                        }
                        catch
                        {
                            await objLifeModule.DisposeAsync().ConfigureAwait(false);
                            throw;
                        }

                        if (objLifeModule.InternalId.IsEmptyGuid())
                        {
                            await objLifeModule.DisposeAsync().ConfigureAwait(false);
                            continue;
                        }

                        //Is there any reason not to add it?
                        if (true)
                        {
                            await CharacterObject.Qualities.AddAsync(objLifeModule, GenericToken).ConfigureAwait(false);

                            foreach (Weapon objWeapon in lstWeapons)
                            {
                                await CharacterObject.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                            }
                        }

                        //Stupid hardcoding but no sane way
                        //To do group skills (not that anything else is sane)
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddQuality_Click(object sender, EventArgs e)
        {
            try
            {
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("qualities.xml", token: GenericToken)
                                                                  .ConfigureAwait(false);

                CursorWait objCursorWait
                    = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectQuality> frmPickQuality = await ThreadSafeForm<SelectQuality>
                                   .GetAsync(() => new SelectQuality(CharacterObject), GenericToken)
                                   .ConfigureAwait(false))
                        {
                            // Don't do anything else if the form was canceled.
                            if (await frmPickQuality.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;

                            blnAddAgain = frmPickQuality.MyForm.AddAgain;
                            int intRatingToAdd = frmPickQuality.MyForm.SelectedRating;
                            string strSelectedQuality = frmPickQuality.MyForm.SelectedQuality;
                            XmlNode objXmlQuality = objXmlDocument.TryGetNodeByNameOrId("/chummer/qualities/quality", strSelectedQuality);
                            int intDummy = 0;
                            if (objXmlQuality != null && objXmlQuality["nolevels"] == null
                                                      && objXmlQuality.TryGetInt32FieldQuickly(
                                                          "limit", ref intDummy))
                            {
                                intRatingToAdd -= await CharacterObject.Qualities.CountAsync(x =>
                                    x.SourceIDString.Equals(
                                        strSelectedQuality,
                                        StringComparison
                                            .OrdinalIgnoreCase)
                                    && string.IsNullOrEmpty(
                                        x.SourceName), GenericToken).ConfigureAwait(false);
                            }

                            // Helps to capture a write lock here for performance purposes
                            IAsyncDisposable objLocker = await CharacterObject
                                                               .LockObject.EnterWriteLockAsync(GenericToken)
                                                               .ConfigureAwait(false);
                            try
                            {
                                for (int i = 1; i <= intRatingToAdd; ++i)
                                {
                                    List<Weapon> lstWeapons = new List<Weapon>(1);
                                    Quality objQuality = new Quality(CharacterObject);
                                    try
                                    {
                                        objQuality.Create(objXmlQuality, QualitySource.Selected, lstWeapons);
                                        if (objQuality.InternalId.IsEmptyGuid())
                                        {
                                            // If the Quality could not be added, remove the Improvements that were added during the Quality Creation process.
                                            await ImprovementManager.RemoveImprovementsAsync(CharacterObject,
                                                Improvement.ImprovementSource.Quality,
                                                objQuality.InternalId, token: GenericToken).ConfigureAwait(false);
                                            await objQuality.DisposeAsync().ConfigureAwait(false);
                                            break;
                                        }

                                        if (frmPickQuality.MyForm.FreeCost)
                                            objQuality.BP = 0;

                                        // Make sure that adding the Quality would not cause the character to exceed their BP limits.
                                        bool blnAddItem = true;
                                        if (objQuality.ContributeToLimit && !CharacterObject.IgnoreRules)
                                        {
                                            // If the item being checked would cause the limit of 25 BP spent on Positive Qualities to be exceed, do not let it be checked and display a message.
                                            int intMaxQualityAmount = CharacterObjectSettings.QualityKarmaLimit;
                                            string strAmount =
                                                CharacterObjectSettings.QualityKarmaLimit.ToString(
                                                    GlobalSettings.CultureInfo) +
                                                await LanguageManager.GetStringAsync("String_Space", token: GenericToken)
                                                                     .ConfigureAwait(false) +
                                                await LanguageManager.GetStringAsync("String_Karma", token: GenericToken)
                                                                     .ConfigureAwait(false);

                                            // Add the cost of the Quality that is being added.
                                            int intBP = objQuality.BP;

                                            if (objQuality.Type == QualityType.Negative)
                                            {
                                                // Check if adding this Quality would put the character over their limit.
                                                if (!CharacterObjectSettings.ExceedNegativeQualities)
                                                {
                                                    intBP += CharacterObject.NegativeQualityLimitKarma;
                                                    if (intBP < intMaxQualityAmount * -1)
                                                    {
                                                        Program.ShowScrollableMessageBox(this,
                                                                               string.Format(GlobalSettings.CultureInfo,
                                                                                   await LanguageManager.GetStringAsync(
                                                                                           "Message_NegativeQualityLimit", token: GenericToken)
                                                                                       .ConfigureAwait(false),
                                                                                   strAmount),
                                                                               await LanguageManager.GetStringAsync(
                                                                                       "MessageTitle_NegativeQualityLimit", token: GenericToken)
                                                                                   .ConfigureAwait(false),
                                                                               MessageBoxButtons.OK,
                                                                               MessageBoxIcon.Information);
                                                        blnAddItem = false;
                                                    }
                                                    else if (CharacterObject.MetatypeBP < 0
                                                             && intBP + CharacterObject.MetatypeBP
                                                             < intMaxQualityAmount * -1)
                                                    {
                                                        Program.ShowScrollableMessageBox(this,
                                                                               string.Format(GlobalSettings.CultureInfo,
                                                                                   await LanguageManager.GetStringAsync(
                                                                                           "Message_NegativeQualityAndMetatypeLimit", token: GenericToken)
                                                                                       .ConfigureAwait(false),
                                                                                   strAmount),
                                                                               await LanguageManager.GetStringAsync(
                                                                                       "MessageTitle_NegativeQualityLimit", token: GenericToken)
                                                                                   .ConfigureAwait(false),
                                                                               MessageBoxButtons.OK,
                                                                               MessageBoxIcon.Information);
                                                        blnAddItem = false;
                                                    }
                                                }
                                            }
                                            // Check if adding this Quality would put the character over their limit.
                                            else if (!CharacterObjectSettings.ExceedPositiveQualities)
                                            {
                                                intBP += CharacterObject.PositiveQualityLimitKarma;
                                                if (intBP > intMaxQualityAmount)
                                                {
                                                    Program.ShowScrollableMessageBox(this,
                                                                           string.Format(GlobalSettings.CultureInfo,
                                                                               await LanguageManager.GetStringAsync(
                                                                                       "Message_PositiveQualityLimit", token: GenericToken)
                                                                                   .ConfigureAwait(false),
                                                                               strAmount),
                                                                           await LanguageManager.GetStringAsync(
                                                                                   "MessageTitle_PositiveQualityLimit", token: GenericToken)
                                                                               .ConfigureAwait(false),
                                                                           MessageBoxButtons.OK,
                                                                           MessageBoxIcon.Information);
                                                    blnAddItem = false;
                                                }
                                            }
                                        }

                                        if (blnAddItem)
                                        {
                                            await CharacterObject.Qualities.AddAsync(objQuality, GenericToken)
                                                                 .ConfigureAwait(false);

                                            // Add any created Weapons to the character.
                                            foreach (Weapon objWeapon in lstWeapons)
                                            {
                                                await CharacterObject.Weapons.AddAsync(objWeapon, GenericToken)
                                                                     .ConfigureAwait(false);
                                            }
                                        }
                                        else
                                        {
                                            // If the Quality could not be added, remove the Improvements that were added during the Quality Creation process.
                                            await ImprovementManager.RemoveImprovementsAsync(CharacterObject,
                                                Improvement.ImprovementSource.Quality,
                                                objQuality.InternalId, token: GenericToken).ConfigureAwait(false);
                                            await objQuality.DisposeAsync().ConfigureAwait(false);
                                            break;
                                        }
                                    }
                                    catch
                                    {
                                        await objQuality.DisposeAsync().ConfigureAwait(false);
                                    }
                                }
                            }
                            finally
                            {
                                await objLocker.DisposeAsync().ConfigureAwait(false);
                            }
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async ValueTask<bool> RemoveQuality(Quality objSelectedQuality, bool blnConfirmDelete = true,
                                                    bool blnCompleteDelete = true, CancellationToken token = default)
        {
            XmlNode objXmlDeleteQuality = await objSelectedQuality.GetNodeAsync(token: token).ConfigureAwait(false);
            switch (objSelectedQuality.OriginSource)
            {
                // Qualities that come from a Metatype cannot be removed.
                case QualitySource.Metatype:
                case QualitySource.Heritage:
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_MetavariantQuality", token: token)
                                             .ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_MetavariantQuality", token: token)
                                             .ConfigureAwait(false), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;

                case QualitySource.Improvement:
                    Program.ShowScrollableMessageBox(
                        this,
                        string.Format(GlobalSettings.CultureInfo,
                                      await LanguageManager.GetStringAsync("Message_ImprovementQuality", token: token)
                                                           .ConfigureAwait(false),
                                      await objSelectedQuality.GetSourceNameAsync(GlobalSettings.Language, token)
                                                              .ConfigureAwait(false)),
                        await LanguageManager.GetStringAsync("MessageTitle_MetavariantQuality", token: token)
                                             .ConfigureAwait(false), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
            }

            CursorWait objCursorWait = await CursorWait.NewAsync(this, token: token).ConfigureAwait(false);
            try
            {
                using (await EnterReadLock.EnterAsync(objSelectedQuality.LockObject, token).ConfigureAwait(false))
                {
                    if (objSelectedQuality.OriginSource == QualitySource.MetatypeRemovable)
                    {
                        int intBP = 0;
                        if (objSelectedQuality.Type == QualityType.Negative
                            && objXmlDeleteQuality.TryGetInt32FieldQuickly("karma", ref intBP))
                        {
                            intBP = -intBP;
                        }

                        intBP *= CharacterObjectSettings.KarmaQuality;
                        int intShowBP = intBP;
                        if (blnCompleteDelete)
                            intShowBP *= objSelectedQuality.Levels;
                        string strBP = intShowBP.ToString(GlobalSettings.CultureInfo)
                                       + await LanguageManager.GetStringAsync("String_Space", token: token)
                                                              .ConfigureAwait(false)
                                       + await LanguageManager.GetStringAsync("String_Karma", token: token)
                                                              .ConfigureAwait(false);

                        if (blnConfirmDelete &&
                            !await CommonFunctions.ConfirmDeleteAsync(string.Format(GlobalSettings.CultureInfo,
                                                                          await LanguageManager.GetStringAsync(
                                                                              blnCompleteDelete
                                                                                  ? "Message_DeleteMetatypeQuality"
                                                                                  : "Message_LowerMetatypeQualityLevel",
                                                                              token: token).ConfigureAwait(false),
                                                                          strBP), token).ConfigureAwait(false))
                            return false;

                        // Remove any Improvements that the Quality might have.
                        XmlNode xmlDeleteQualityNoBonus = objXmlDeleteQuality.Clone();
                        if (xmlDeleteQualityNoBonus["bonus"] != null)
                            xmlDeleteQualityNoBonus["bonus"].InnerText = string.Empty;
                        if (xmlDeleteQualityNoBonus["firstlevelbonus"] != null)
                            xmlDeleteQualityNoBonus["firstlevelbonus"].InnerText = string.Empty;

                        List<Weapon> lstWeapons = new List<Weapon>(1);
                        Quality objReplaceQuality = new Quality(CharacterObject);
                        try
                        {
                            objReplaceQuality.Create(xmlDeleteQualityNoBonus, QualitySource.MetatypeRemovedAtChargen,
                                                     lstWeapons);
                            objReplaceQuality.BP *= -1;
                            // If a Negative Quality is being bought off, the replacement one is Positive.
                            if (objSelectedQuality.Type == QualityType.Positive)
                            {
                                objReplaceQuality.Type = QualityType.Negative;
                                if (!string.IsNullOrEmpty(objReplaceQuality.Extra))
                                    objReplaceQuality.Extra += ',' + await LanguageManager
                                                                           .GetStringAsync("String_Space", token: token)
                                                                           .ConfigureAwait(false);
                                objReplaceQuality.Extra
                                    += await LanguageManager
                                             .GetStringAsync("String_ExpenseRemovePositiveQuality", token: token)
                                             .ConfigureAwait(false);
                            }
                            else
                            {
                                objReplaceQuality.Type = QualityType.Positive;
                                if (!string.IsNullOrEmpty(objReplaceQuality.Extra))
                                    objReplaceQuality.Extra += ',' + await LanguageManager
                                                                           .GetStringAsync("String_Space", token: token)
                                                                           .ConfigureAwait(false);
                                objReplaceQuality.Extra
                                    += await LanguageManager
                                             .GetStringAsync("String_ExpenseRemoveNegativeQuality", token: token)
                                             .ConfigureAwait(false);
                            }

                            // The replacement Quality does not count towards the BP limit of the new type, nor should it be printed.
                            objReplaceQuality.AllowPrint = false;
                            objReplaceQuality.ContributeToLimit = false;
                            await CharacterObject.Qualities.AddAsync(objReplaceQuality, token).ConfigureAwait(false);
                            // The replacement Quality no longer adds its weapons to the character
                        }
                        catch
                        {
                            await objReplaceQuality.DisposeAsync().ConfigureAwait(false);
                        }
                    }
                    else
                    {
                        if (blnConfirmDelete && !await CommonFunctions.ConfirmDeleteAsync(
                                blnCompleteDelete
                                    ? await LanguageManager.GetStringAsync("Message_DeleteQuality", token: token)
                                                           .ConfigureAwait(false)
                                    : await LanguageManager.GetStringAsync("Message_LowerQualityLevel", token: token)
                                                           .ConfigureAwait(false), token).ConfigureAwait(false))
                            return false;

                        if (objSelectedQuality.OriginSource == QualitySource.MetatypeRemovedAtChargen)
                        {
                            XPathNavigator xmlCharacterNode
                                = await CharacterObject.GetNodeXPathAsync(token: token).ConfigureAwait(false);
                            if (xmlCharacterNode != null)
                            {
                                XmlDocument xmlQualitiesDoc
                                    = await CharacterObject.LoadDataAsync("qualities.xml", token: token)
                                                           .ConfigureAwait(false);
                                // Create the Qualities that come with the Metatype.
                                foreach (XPathNavigator objXmlQualityItem in xmlCharacterNode.Select(
                                             "qualities/*/quality[. = " + objSelectedQuality.Name.CleanXPath() + ']'))
                                {
                                    XmlNode objXmlQuality
                                        = xmlQualitiesDoc.TryGetNodeByNameOrId(
                                            "/chummer/qualities/quality", objXmlQualityItem.Value);
                                    Quality objQuality = new Quality(CharacterObject);
                                    try
                                    {
                                        string strForceValue = objXmlQualityItem.GetAttribute("select", string.Empty);
                                        QualitySource objSource
                                            = objXmlQualityItem.GetAttribute("removable", string.Empty)
                                              == bool.TrueString
                                                ? QualitySource.MetatypeRemovable
                                                : QualitySource.Metatype;
                                        objQuality.Create(objXmlQuality, objSource, CharacterObject.Weapons,
                                                          strForceValue);
                                        await CharacterObject.Qualities.AddAsync(objQuality, token)
                                                             .ConfigureAwait(false);
                                    }
                                    catch
                                    {
                                        await objQuality.DisposeAsync().ConfigureAwait(false);
                                    }
                                }
                            }
                        }
                    }

                    if (objSelectedQuality.Type == QualityType.LifeModule)
                    {
                        objXmlDeleteQuality
                            = Quality.GetNodeOverrideable(objSelectedQuality.SourceIDString,
                                                          await CharacterObject.LoadDataAsync(
                                                              "lifemodules.xml", token: token).ConfigureAwait(false));
                    }

                    // Fix for legacy characters with old addqualities improvements.
                    if (objXmlDeleteQuality != null)
                        await RemoveAddedQualities(
                            await objXmlDeleteQuality.CreateNavigator()
                                                     .SelectAndCacheExpressionAsync("addqualities/addquality", token)
                                                     .ConfigureAwait(false),
                            token: token).ConfigureAwait(false);
                }

                // Perform removal
                await objSelectedQuality.DeleteQualityAsync(blnCompleteDelete, token).ConfigureAwait(false);
            }
            finally
            {
                await objCursorWait.DisposeAsync().ConfigureAwait(false);
            }

            return true;
        }

        private async void cmdDeleteQuality_Click(object sender, EventArgs e)
        {
            try
            {
                await DeleteQuality(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async ValueTask DeleteQuality(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            // Locate the selected Quality.
            if (!(await treQualities.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token).ConfigureAwait(false) is
                    Quality objSelectedQuality))
                return;
            string strInternalIDToRemove = objSelectedQuality.InternalId;
            // Can't do a foreach because we're removing items, this is the next best thing
            bool blnFirstRemoval = true;
            // Helps to capture a write lock here for performance purposes
            IAsyncDisposable objLocker = await CharacterObject.LockObject.EnterWriteLockAsync(token)
                                                              .ConfigureAwait(false);
            try
            {
                for (int i = CharacterObject.Qualities.Count - 1; i >= 0; --i)
                {
                    Quality objLoopQuality = CharacterObject.Qualities[i];
                    if (objLoopQuality.InternalId != strInternalIDToRemove)
                        continue;
                    if (!await RemoveQuality(objLoopQuality, blnFirstRemoval, token: token).ConfigureAwait(false))
                        break;
                    blnFirstRemoval = false;
                    if (i > CharacterObject.Qualities.Count)
                    {
                        i = CharacterObject.Qualities.Count;
                    }
                }
            }
            finally
            {
                await objLocker.DisposeAsync().ConfigureAwait(false);
            }
        }

        private async void cmdAddLocation_Click(object sender, EventArgs e)
        {
            try
            {
                // Add a new location to the Armor Tree.
                string strDescription = await LanguageManager.GetStringAsync("String_AddLocation", token: GenericToken)
                                                             .ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel
                        || string.IsNullOrEmpty(frmPickText.MyForm.SelectedValue))
                        return;
                    Location objLocation = new Location(CharacterObject, CharacterObject.GearLocations,
                                                        frmPickText.MyForm.SelectedValue);
                    await CharacterObject.GearLocations.AddAsync(objLocation, GenericToken).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddWeaponLocation_Click(object sender, EventArgs e)
        {
            try
            {
                // Add a new location to the Armor Tree.
                string strDescription = await LanguageManager.GetStringAsync("String_AddLocation", token: GenericToken)
                                                             .ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel
                        || string.IsNullOrEmpty(frmPickText.MyForm.SelectedValue))
                        return;
                    Location objLocation = new Location(CharacterObject, CharacterObject.WeaponLocations,
                                                        frmPickText.MyForm.SelectedValue);
                    await CharacterObject.WeaponLocations.AddAsync(objLocation, GenericToken).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdCreateStackedFocus_Click(object sender, EventArgs e)
        {
            try
            {
                int intFree = 0;
                List<Gear> lstGear = new List<Gear>(2);
                List<Gear> lstStack = new List<Gear>(2);

                // Run through all of the Foci the character has and count the un-Bonded ones.
                await CharacterObject.Gear.ForEachAsync(objGear =>
                {
                    if ((objGear.Category == "Foci" || objGear.Category == "Metamagic Foci") && !objGear.Bonded)
                    {
                        intFree++;
                        lstGear.Add(objGear);
                    }
                }, GenericToken).ConfigureAwait(false);

                // If the character does not have at least 2 un-Bonded Foci, display an error and leave.
                if (intFree < 2)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_CannotStackFoci", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_CannotStackFoci", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                string strDescription
                    = await LanguageManager.GetStringAsync("String_SelectItemFocus", token: GenericToken).ConfigureAwait(false);
                DialogResult eResult;
                // Let the character select the Foci they'd like to stack, stopping when they either click Cancel or there are no more items left in the list.
                do
                {
                    using (ThreadSafeForm<SelectItem> frmPickItem = await ThreadSafeForm<SelectItem>.GetAsync(
                               () => new SelectItem
                               {
                                   Description = strDescription,
                                   AllowAutoSelect = false
                               }, GenericToken).ConfigureAwait(false))
                    {
                        frmPickItem.MyForm.SetGearMode(lstGear);
                        eResult = await frmPickItem.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false);
                        if (eResult != DialogResult.OK)
                            continue;
                        // Move the item from the Gear list to the Stack list.
                        foreach (Gear objGear in lstGear)
                        {
                            if (objGear.InternalId == frmPickItem.MyForm.SelectedItem)
                            {
                                objGear.Bonded = true;
                                lstStack.Add(objGear);
                                lstGear.Remove(objGear);
                                break;
                            }
                        }
                    }
                } while (lstGear.Count > 0 && eResult != DialogResult.Cancel);

                // Make sure at least 2 Foci were selected.
                if (lstStack.Count < 2)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_StackedFocusMinimum", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_CannotStackFoci", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Make sure the combined Force of the Foci do not exceed 6.
                if (!CharacterObjectSettings.AllowHigherStackedFoci)
                {
                    int intCombined = lstStack.Sum(objGear => objGear.Rating);
                    if (intCombined > 6)
                    {
                        foreach (Gear objGear in lstStack)
                            objGear.Bonded = false;
                        Program.ShowScrollableMessageBox(
                            this,
                            await LanguageManager.GetStringAsync("Message_StackedFocusForce", token: GenericToken).ConfigureAwait(false),
                            await LanguageManager.GetStringAsync("MessageTitle_CannotStackFoci", token: GenericToken).ConfigureAwait(false),
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }

                // Create the Stacked Focus.
                StackedFocus objStack = new StackedFocus(CharacterObject);
                foreach (Gear objGear in lstStack)
                    await objStack.Gear.AddAsync(objGear, GenericToken).ConfigureAwait(false);
                await CharacterObject.StackedFoci.AddAsync(objStack, GenericToken).ConfigureAwait(false);

                // Remove the Gear from the character and replace it with a Stacked Focus item.
                decimal decCost = 0;
                foreach (Gear objGear in lstStack)
                {
                    decCost += await objGear.GetTotalCostAsync(GenericToken).ConfigureAwait(false);
                    await CharacterObject.Gear.RemoveAsync(objGear, GenericToken).ConfigureAwait(false);
                }

                Gear objStackItem = new Gear(CharacterObject)
                {
                    Category = "Stacked Focus",
                    Name = "Stacked Focus: "
                           + await objStack.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false),
                    MinRating = string.Empty,
                    MaxRating = string.Empty,
                    Source = "SR5",
                    Page = "1",
                    Cost = decCost.ToString(GlobalSettings.CultureInfo),
                    Avail = "0"
                };

                await CharacterObject.Gear.AddAsync(objStackItem, GenericToken).ConfigureAwait(false);

                objStack.GearId = objStackItem.InternalId;
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddArmor_Click(object sender, EventArgs e)
        {
            try
            {
                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        blnAddAgain = await AddArmor(
                            await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                          .ConfigureAwait(false) as Location, GenericToken).ConfigureAwait(false);
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async ValueTask<bool> AddArmor(Location objLocation = null, CancellationToken token = default)
        {
            using (ThreadSafeForm<SelectArmor> frmPickArmor = await ThreadSafeForm<SelectArmor>
                                                                    .GetAsync(() => new SelectArmor(CharacterObject),
                                                                              token).ConfigureAwait(false))
            {
                // Make sure the dialogue window was not canceled.
                if (await frmPickArmor.ShowDialogSafeAsync(this, token).ConfigureAwait(false) == DialogResult.Cancel)
                    return false;

                // Open the Armor XML file and locate the selected piece.
                XmlNode objXmlArmor
                    = (await CharacterObject.LoadDataAsync("armor.xml", token: token).ConfigureAwait(false))
                    .TryGetNodeByNameOrId(
                        "/chummer/armors/armor", frmPickArmor.MyForm.SelectedArmor);

                List<Weapon> lstWeapons = new List<Weapon>(1);
                Armor objArmor = new Armor(CharacterObject);

                objArmor.Create(objXmlArmor, frmPickArmor.MyForm.Rating, lstWeapons);
                objArmor.DiscountCost = frmPickArmor.MyForm.BlackMarketDiscount;
                if (objArmor.InternalId.IsEmptyGuid())
                    return frmPickArmor.MyForm.AddAgain;
                if (frmPickArmor.MyForm.FreeCost)
                {
                    objArmor.Cost = "0";
                }

                //objArmor.Location = objLocation;
                if (objLocation != null)
                    await objLocation.Children.AddAsync(objArmor, token).ConfigureAwait(false);
                await CharacterObject.Armor.AddAsync(objArmor, token).ConfigureAwait(false);

                foreach (Weapon objWeapon in lstWeapons)
                {
                    await CharacterObject.Weapons.AddAsync(objWeapon, token).ConfigureAwait(false);
                }

                return frmPickArmor.MyForm.AddAgain;
            }
        }

        private async void cmdAddArmorBundle_Click(object sender, EventArgs e)
        {
            try
            {
                // Add a new location to the Armor Tree.
                string strDescription = await LanguageManager.GetStringAsync("String_AddLocation", token: GenericToken)
                                                             .ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel
                        || string.IsNullOrEmpty(frmPickText.MyForm.SelectedValue))
                        return;
                    Location objLocation = new Location(CharacterObject, CharacterObject.ArmorLocations,
                                                        frmPickText.MyForm.SelectedValue);
                    await CharacterObject.ArmorLocations.AddAsync(objLocation, GenericToken).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdArmorEquipAll_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token: GenericToken)
                                                   .ConfigureAwait(false);
                if (objSelected is Location selectedLocation)
                {
                    // Equip all of the Armor in the Armor Bundle.
                    await selectedLocation.Children.ForEachAsync(child =>
                    {
                        if (child is Armor objArmor)
                        {
                            if (objArmor.Location == selectedLocation)
                            {
                                objArmor.Equipped = true;
                            }
                        }
                    }, GenericToken).ConfigureAwait(false);
                }
                else if (objSelected?.ToString() == "Node_SelectedArmor")
                {
                    await CharacterObject.Armor.ForEachAsync(objArmor =>
                    {
                        if (!objArmor.Equipped && objArmor.Location == null)
                        {
                            objArmor.Equipped = true;
                        }
                    }, GenericToken).ConfigureAwait(false);
                }
                else
                {
                    return;
                }

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdArmorUnEquipAll_Click(object sender, EventArgs e)
        {
            try
            {
                object objSelected = await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token: GenericToken)
                                                   .ConfigureAwait(false);
                if (objSelected is Location selectedLocation)
                {
                    // Equip all of the Armor in the Armor Bundle.
                    await selectedLocation.Children.ForEachAsync(child =>
                    {
                        if (child is Armor objArmor)
                        {
                            if (objArmor.Location == selectedLocation)
                            {
                                objArmor.Equipped = false;
                            }
                        }
                    }, GenericToken).ConfigureAwait(false);
                }
                else if (objSelected?.ToString() == "Node_SelectedArmor")
                {
                    await CharacterObject.Armor.ForEachAsync(objArmor =>
                    {
                        if (objArmor.Equipped && objArmor.Location == null)
                        {
                            objArmor.Equipped = false;
                        }
                    }, GenericToken).ConfigureAwait(false);
                }
                else
                {
                    return;
                }

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdAddVehicleLocation_Click(object sender, EventArgs e)
        {
            try
            {
                ThreadSafeObservableCollection<Location> destCollection;
                // Make sure a Vehicle is selected.
                object objSelected
                    = await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token: GenericToken)
                                       .ConfigureAwait(false);
                if (objSelected is Vehicle objVehicle)
                {
                    destCollection = objVehicle.Locations;
                }
                else if (objSelected == null || objSelected.ToString() == "Node_SelectedVehicles")
                {
                    destCollection = CharacterObject.VehicleLocations;
                }
                else
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_SelectVehicleLocation", token: GenericToken)
                                             .ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectVehicle", token: GenericToken)
                                             .ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                string strDescription = await LanguageManager.GetStringAsync("String_AddLocation", token: GenericToken)
                                                             .ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel
                        || string.IsNullOrEmpty(frmPickText.MyForm.SelectedValue))
                        return;
                    Location objLocation
                        = new Location(CharacterObject, destCollection, frmPickText.MyForm.SelectedValue);
                    await destCollection.AddAsync(objLocation, GenericToken).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        #endregion Button Events

        #region ContextMenu Events

        private async void tsCyberwareAddAsPlugin_Click(object sender, EventArgs e)
        {
            try
            {
                // Make sure a parent items is selected, then open the Select Cyberware window.
                if (!(await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is Cyberware
                        objCyberware && !string.IsNullOrWhiteSpace(objCyberware.AllowedSubsystems)))
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_SelectCyberware", token: GenericToken)
                                             .ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectCyberware", token: GenericToken)
                                             .ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                bool blnAddAgain;
                do
                {
                    blnAddAgain = await PickCyberware(objCyberware, objCyberware.SourceType, token: GenericToken)
                        .ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleCyberwareAddAsPlugin_Click(object sender, EventArgs e)
        {
            try
            {
                // Make sure a parent items is selected, then open the Select Cyberware window.
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is Cyberware
                        objCyberware && !string.IsNullOrWhiteSpace(objCyberware.AllowedSubsystems)))
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_SelectCyberware", token: GenericToken)
                                             .ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectCyberware", token: GenericToken)
                                             .ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                bool blnAddAgain;
                do
                {
                    blnAddAgain = await PickCyberware(objCyberware, objCyberware.SourceType, token: GenericToken)
                        .ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsWeaponAddAccessory_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag,
                                                             GenericToken).ConfigureAwait(false) is Weapon objWeapon))
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_SelectWeaponAccessory", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectWeapon", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Accessories cannot be added to Cyberweapons.
                if (objWeapon.Cyberware)
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_CyberweaponNoAccessory", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_CyberweaponNoAccessory", token: GenericToken)
                                             .ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Open the Weapons XML file and locate the selected Weapon.
                XmlNode objXmlWeapon = await objWeapon.GetNodeAsync(GenericToken).ConfigureAwait(false);
                if (objXmlWeapon == null)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_CannotFindWeapon", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_CannotModifyWeapon", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                XmlDocument xmlDocument = await CharacterObject.LoadDataAsync("weapons.xml", token: GenericToken).ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        // Make sure the Weapon allows Accessories to be added to it.
                        if (!objWeapon.AllowAccessory)
                        {
                            Program.ShowScrollableMessageBox(
                                this,
                                await LanguageManager.GetStringAsync("Message_CannotModifyWeapon", token: GenericToken)
                                                     .ConfigureAwait(false),
                                await LanguageManager.GetStringAsync("MessageTitle_CannotModifyWeapon", token: GenericToken)
                                                     .ConfigureAwait(false),
                                MessageBoxButtons.OK, MessageBoxIcon.Information);
                            break;
                        }

                        using (ThreadSafeForm<SelectWeaponAccessory> frmPickWeaponAccessory
                               = await ThreadSafeForm<SelectWeaponAccessory>.GetAsync(
                                   () => new SelectWeaponAccessory(CharacterObject)
                                   {
                                       ParentWeapon = objWeapon
                                   }, GenericToken).ConfigureAwait(false))
                        {
                            if (await frmPickWeaponAccessory.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickWeaponAccessory.MyForm.AddAgain;

                            // Locate the selected piece.
                            objXmlWeapon = xmlDocument.TryGetNodeByNameOrId("/chummer/accessories/accessory", frmPickWeaponAccessory.MyForm.SelectedAccessory);

                            WeaponAccessory objAccessory = new WeaponAccessory(CharacterObject);
                            objAccessory.Create(objXmlWeapon, frmPickWeaponAccessory.MyForm.SelectedMount,
                                                frmPickWeaponAccessory.MyForm.SelectedRating);
                            objAccessory.Parent = objWeapon;
                            objAccessory.DiscountCost = frmPickWeaponAccessory.MyForm.BlackMarketDiscount;

                            if (frmPickWeaponAccessory.MyForm.FreeCost)
                            {
                                objAccessory.Cost = "0";
                            }

                            await objWeapon.WeaponAccessories.AddAsync(objAccessory, GenericToken).ConfigureAwait(false);
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsAddArmorMod_Click(object sender, EventArgs e)
        {
            try
            {
                // Make sure a parent item is selected, then open the Select Accessory window.
                if (!(await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                    .ConfigureAwait(false) is Armor objArmor))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectArmor", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectArmor", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Open the Armor XML file and locate the selected Armor.
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("armor.xml", token: GenericToken).ConfigureAwait(false);

                XmlNode objXmlArmor = await objArmor.GetNodeAsync(GenericToken).ConfigureAwait(false);

                string strAllowedCategories = objArmor.Category + ',' + objArmor.Name;
                bool blnExcludeGeneralCategory = false;
                XmlNode xmlAddModCategory = objXmlArmor["forcemodcategory"];
                if (xmlAddModCategory != null)
                {
                    strAllowedCategories = xmlAddModCategory.InnerText;
                    blnExcludeGeneralCategory = true;
                }
                else
                {
                    xmlAddModCategory = objXmlArmor["addmodcategory"];
                    if (xmlAddModCategory != null)
                    {
                        strAllowedCategories += ',' + xmlAddModCategory.InnerText;
                    }
                }

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectArmorMod> frmPickArmorMod
                               = await ThreadSafeForm<SelectArmorMod>.GetAsync(
                                   () => new SelectArmorMod(CharacterObject, objArmor)
                                   {
                                       ArmorCost = objArmor.OwnCost,
                                       ArmorCapacity
                                           = Convert.ToDecimal(
                                               objArmor.CalculatedCapacity(GlobalSettings.InvariantCultureInfo),
                                               GlobalSettings.InvariantCultureInfo),
                                       AllowedCategories = strAllowedCategories,
                                       ExcludeGeneralCategory = blnExcludeGeneralCategory,
                                       CapacityDisplayStyle = objArmor.CapacityDisplayStyle
                                   }, GenericToken).ConfigureAwait(false))
                        {
                            if (await frmPickArmorMod.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickArmorMod.MyForm.AddAgain;

                            // Locate the selected piece.
                            objXmlArmor = objXmlDocument.TryGetNodeByNameOrId("/chummer/mods/mod", frmPickArmorMod.MyForm.SelectedArmorMod);

                            ArmorMod objMod = new ArmorMod(CharacterObject);
                            List<Weapon> lstWeapons = new List<Weapon>(1);
                            int intRating
                                = Convert.ToInt32(objXmlArmor?["maxrating"]?.InnerText,
                                                  GlobalSettings.InvariantCultureInfo)
                                  > 1
                                    ? frmPickArmorMod.MyForm.SelectedRating
                                    : 0;

                            objMod.Create(objXmlArmor, intRating, lstWeapons);
                            if (objMod.InternalId.IsEmptyGuid())
                                continue;

                            if (frmPickArmorMod.MyForm.FreeCost)
                            {
                                objMod.Cost = "0";
                            }

                            await objArmor.ArmorMods.AddAsync(objMod, GenericToken).ConfigureAwait(false);

                            // Add any Weapons created by the Mod.
                            foreach (Weapon objWeapon in lstWeapons)
                            {
                                await CharacterObject.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                            }
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsGearAddAsPlugin_Click(object sender, EventArgs e)
        {
            try
            {
                // Make sure a parent items is selected, then open the Select Cyberware window.
                if (!(await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                   .ConfigureAwait(false) is Gear objGear))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                bool blnAddAgain;
                do
                {
                    blnAddAgain = await PickGear(objGear.InternalId, GenericToken).ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleAddWeaponMount_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is Vehicle
                        objVehicle))
                    return;
                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    using (ThreadSafeForm<CreateWeaponMount> frmPickVehicleMod
                           = await ThreadSafeForm<CreateWeaponMount>.GetAsync(
                               () => new CreateWeaponMount(objVehicle, CharacterObject), GenericToken).ConfigureAwait(false))
                    {
                        if (await frmPickVehicleMod.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                            == DialogResult.Cancel)
                            return;
                        await objVehicle.WeaponMounts.AddAsync(frmPickVehicleMod.MyForm.WeaponMount, GenericToken)
                                        .ConfigureAwait(false);
                    }
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleAddMod_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treVehicles.DoThreadSafeFuncAsync(x =>
                {
                    TreeNode objTemp = x.SelectedNode;
                    while (objTemp?.Level > 1)
                        objTemp = objTemp.Parent;
                    return objTemp;
                }, GenericToken).ConfigureAwait(false);

                // Make sure a parent items is selected, then open the Select Vehicle Mod window.
                if (!(objSelectedNode?.Tag is Vehicle objVehicle))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectVehicle", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectVehicle", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Open the Vehicles XML file and locate the selected piece.
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("vehicles.xml", token: GenericToken).ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectVehicleMod> frmPickVehicleMod
                               = await ThreadSafeForm<SelectVehicleMod>.GetAsync(
                                                                           () => new SelectVehicleMod(CharacterObject,
                                                                               objVehicle, objVehicle.Mods), GenericToken)
                                                                       .ConfigureAwait(false))
                        {
                            // Make sure the dialogue window was not canceled.
                            if (await frmPickVehicleMod.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickVehicleMod.MyForm.AddAgain;

                            XmlNode objXmlMod
                                = objXmlDocument.TryGetNodeByNameOrId("/chummer/mods/mod", frmPickVehicleMod.MyForm.SelectedMod);

                            VehicleMod objMod = new VehicleMod(CharacterObject)
                            {
                                DiscountCost = frmPickVehicleMod.MyForm.BlackMarketDiscount
                            };
                            objMod.Create(objXmlMod, frmPickVehicleMod.MyForm.SelectedRating, objVehicle,
                                          frmPickVehicleMod.MyForm.Markup);

                            // Make sure that the Armor Rating does not exceed the maximum allowed by the Vehicle.
                            if (objMod.Name.StartsWith("Armor", StringComparison.Ordinal))
                            {
                                if (objMod.Rating > objVehicle.MaxArmor)
                                {
                                    objMod.Rating = objVehicle.MaxArmor;
                                }
                            }
                            else
                            {
                                switch (objMod.Category)
                                {
                                    case "Handling":
                                    {
                                        if (objMod.Rating > objVehicle.MaxHandling)
                                        {
                                            objMod.Rating = objVehicle.MaxHandling;
                                        }

                                        break;
                                    }
                                    case "Speed":
                                    {
                                        if (objMod.Rating > objVehicle.MaxSpeed)
                                        {
                                            objMod.Rating = objVehicle.MaxSpeed;
                                        }

                                        break;
                                    }
                                    case "Acceleration":
                                    {
                                        if (objMod.Rating > objVehicle.MaxAcceleration)
                                        {
                                            objMod.Rating = objVehicle.MaxAcceleration;
                                        }

                                        break;
                                    }
                                    case "Sensor":
                                    {
                                        if (objMod.Rating > objVehicle.MaxSensor)
                                        {
                                            objMod.Rating = objVehicle.MaxSensor;
                                        }

                                        break;
                                    }
                                    default:
                                    {
                                        if (objMod.Name.StartsWith("Pilot Program", StringComparison.Ordinal)
                                            && objMod.Rating > objVehicle.MaxPilot)
                                        {
                                            objMod.Rating = objVehicle.MaxPilot;
                                        }

                                        break;
                                    }
                                }
                            }

                            // Check the item's Cost and make sure the character can afford it.
                            if (frmPickVehicleMod.MyForm.FreeCost)
                                objMod.Cost = "0";
                            else
                            {
                                // Multiply the cost if applicable.
                                decimal decOldCost = await objMod.GetTotalCostAsync(GenericToken).ConfigureAwait(false);
                                decimal decCost = decOldCost;
                                char chrAvail = (await objMod.TotalAvailTupleAsync(token: GenericToken).ConfigureAwait(false)).Suffix;
                                switch (chrAvail)
                                {
                                    case 'R' when CharacterObjectSettings.MultiplyRestrictedCost:
                                        decCost *= CharacterObjectSettings.RestrictedCostMultiplier;
                                        break;

                                    case 'F' when CharacterObjectSettings.MultiplyForbiddenCost:
                                        decCost *= CharacterObjectSettings.ForbiddenCostMultiplier;
                                        break;
                                }

                                decCost -= decOldCost;
                                objMod.Markup = decCost;
                            }

                            await objVehicle.Mods.AddAsync(objMod, GenericToken).ConfigureAwait(false);
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleAddWeaponWeapon_Click(object sender, EventArgs e)
        {
            try
            {
                // Make sure that a Weapon Mount has been selected.
                // Attempt to locate the selected VehicleMod.
                WeaponMount objWeaponMount = null;
                VehicleMod objMod = null;
                Vehicle objVehicle = null;
                switch (await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                         .ConfigureAwait(false))
                {
                    case WeaponMount selectedMount:
                        objWeaponMount = selectedMount;
                        objVehicle = selectedMount.Parent;
                        break;

                    case VehicleMod selectedMod
                        when (selectedMod.Name.StartsWith("Mechanical Arm", StringComparison.Ordinal)
                              || selectedMod.Name.Contains("Drone Arm")):
                        objMod = selectedMod;
                        objVehicle = selectedMod.Parent;
                        break;
                }

                if (objWeaponMount == null && objMod == null)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_CannotAddWeapon", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_CannotAddWeapon", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information);
                    return;
                }

                if (objWeaponMount?.IsWeaponsFull == true)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_WeaponMountFull", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_CannotAddWeapon", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information);
                    return;
                }

                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("weapons.xml", token: GenericToken).ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectWeapon> frmPickWeapon = await ThreadSafeForm<SelectWeapon>.GetAsync(
                                   () => new SelectWeapon(CharacterObject)
                                   {
                                       LimitToCategories = objMod != null
                                           ? objMod.WeaponMountCategories
                                           : objWeaponMount?.AllowedWeaponCategories ?? string.Empty
                                   }, GenericToken).ConfigureAwait(false))
                        {
                            if (await frmPickWeapon.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                return;

                            // Open the Weapons XML file and locate the selected piece.
                            XmlNode objXmlWeapon = objXmlDocument.TryGetNodeByNameOrId("/chummer/weapons/weapon", frmPickWeapon.MyForm.SelectedWeapon);

                            List<Weapon> lstWeapons = new List<Weapon>(1);
                            Weapon objWeapon = new Weapon(CharacterObject)
                            {
                                ParentVehicle = objVehicle,
                                ParentVehicleMod = objMod,
                                ParentMount = objMod == null ? objWeaponMount : null
                            };
                            objWeapon.Create(objXmlWeapon, lstWeapons);
                            objWeapon.DiscountCost = frmPickWeapon.MyForm.BlackMarketDiscount;

                            if (frmPickWeapon.MyForm.FreeCost)
                            {
                                objWeapon.Cost = "0";
                            }

                            if (objMod != null)
                                await objMod.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                            else
                                await objWeaponMount.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);

                            foreach (Weapon objLoopWeapon in lstWeapons)
                            {
                                if (objMod == null)
                                    await objWeaponMount.Weapons.AddAsync(objLoopWeapon, GenericToken).ConfigureAwait(false);
                                else
                                    await objMod.Weapons.AddAsync(objLoopWeapon, GenericToken).ConfigureAwait(false);
                            }

                            blnAddAgain = frmPickWeapon.MyForm.AddAgain
                                          && (objMod != null || !objWeaponMount.IsWeaponsFull);
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleAddWeaponAccessory_Click(object sender, EventArgs e)
        {
            try
            {
                // Attempt to locate the selected VehicleWeapon.
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is Weapon
                        objWeapon))
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_VehicleWeaponAccessories", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_VehicleWeaponAccessories", token: GenericToken)
                                             .ConfigureAwait(false),
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information);
                    return;
                }

                // Open the Weapons XML file and locate the selected Weapon.
                XmlNode objXmlWeapon = await objWeapon.GetNodeAsync(GenericToken).ConfigureAwait(false);
                if (objXmlWeapon == null)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_CannotFindWeapon", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_CannotModifyWeapon", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("weapons.xml", token: GenericToken).ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        // Make sure the Weapon allows Accessories to be added to it.
                        if (!objWeapon.AllowAccessory)
                        {
                            Program.ShowScrollableMessageBox(
                                this,
                                await LanguageManager.GetStringAsync("Message_CannotModifyWeapon", token: GenericToken)
                                                     .ConfigureAwait(false),
                                await LanguageManager.GetStringAsync("MessageTitle_CannotModifyWeapon", token: GenericToken)
                                                     .ConfigureAwait(false),
                                MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        using (ThreadSafeForm<SelectWeaponAccessory> frmPickWeaponAccessory
                               = await ThreadSafeForm<SelectWeaponAccessory>.GetAsync(
                                   () => new SelectWeaponAccessory(CharacterObject)
                                   {
                                       ParentWeapon = objWeapon
                                   }, GenericToken).ConfigureAwait(false))
                        {
                            if (await frmPickWeaponAccessory.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickWeaponAccessory.MyForm.AddAgain;

                            // Locate the selected piece.
                            objXmlWeapon = objXmlDocument.TryGetNodeByNameOrId("/chummer/accessories/accessory", frmPickWeaponAccessory.MyForm.SelectedAccessory);

                            WeaponAccessory objAccessory = new WeaponAccessory(CharacterObject);
                            objAccessory.Create(objXmlWeapon, frmPickWeaponAccessory.MyForm.SelectedMount,
                                                frmPickWeaponAccessory.MyForm.SelectedRating);
                            objAccessory.Parent = objWeapon;
                            objAccessory.DiscountCost = frmPickWeaponAccessory.MyForm.BlackMarketDiscount;

                            if (frmPickWeaponAccessory.MyForm.FreeCost)
                            {
                                objAccessory.Cost = "0";
                            }

                            await objWeapon.WeaponAccessories.AddAsync(objAccessory, GenericToken).ConfigureAwait(false);
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleAddUnderbarrelWeapon_Click(object sender, EventArgs e)
        {
            try
            {
                // Attempt to locate the selected VehicleWeapon.
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is Weapon
                        objSelectedWeapon))
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_VehicleWeaponUnderbarrel", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_VehicleWeaponUnderbarrel", token: GenericToken)
                                             .ConfigureAwait(false),
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information);
                    return;
                }

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    using (ThreadSafeForm<SelectWeapon> frmPickWeapon = await ThreadSafeForm<SelectWeapon>.GetAsync(
                               () => new SelectWeapon(CharacterObject)
                               {
                                   LimitToCategories = "Underbarrel Weapons",
                                   ParentWeapon = objSelectedWeapon
                               },  GenericToken).ConfigureAwait(false))
                    {
                        frmPickWeapon.MyForm.Mounts.UnionWith(
                            objSelectedWeapon.AccessoryMounts.SplitNoAlloc('/', StringSplitOptions.RemoveEmptyEntries));

                        // Make sure the dialogue window was not canceled.
                        if (await frmPickWeapon.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false) == DialogResult.Cancel)
                            return;

                        // Open the Weapons XML file and locate the selected piece.
                        XmlNode objXmlWeapon
                            = (await CharacterObject.LoadDataAsync("weapons.xml", token: GenericToken)
                                                    .ConfigureAwait(false))
                            .TryGetNodeByNameOrId(
                                "/chummer/weapons/weapon", frmPickWeapon.MyForm.SelectedWeapon);

                        List<Weapon> lstWeapons = new List<Weapon>(1);
                        Weapon objWeapon = new Weapon(CharacterObject)
                        {
                            ParentVehicle = objSelectedWeapon.ParentVehicle
                        };
                        objWeapon.Create(objXmlWeapon, lstWeapons);
                        objWeapon.DiscountCost = frmPickWeapon.MyForm.BlackMarketDiscount;

                        if (frmPickWeapon.MyForm.FreeCost)
                        {
                            objWeapon.Cost = "0";
                        }

                        objWeapon.Parent = objSelectedWeapon;
                        await objSelectedWeapon.UnderbarrelWeapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                        if (!objSelectedWeapon.AllowAccessory)
                            objWeapon.AllowAccessory = false;

                        foreach (Weapon objLoopWeapon in lstWeapons)
                        {
                            await objSelectedWeapon.UnderbarrelWeapons.AddAsync(objLoopWeapon, GenericToken).ConfigureAwait(false);
                            if (!objSelectedWeapon.AllowAccessory)
                                objLoopWeapon.AllowAccessory = false;
                        }
                    }
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsMartialArtsAddTechnique_Click(object sender, EventArgs e)
        {
            try
            {
                // Select the Martial Arts node if we're currently on a child.
                TreeNode objSelectedNode = await treMartialArts.DoThreadSafeFuncAsync(x =>
                {
                    TreeNode objReturn = x.SelectedNode;
                    while (objReturn?.Level > 1)
                        objReturn = objReturn.Parent;
                    return objReturn;
                }, GenericToken).ConfigureAwait(false);

                if (objSelectedNode == null || objSelectedNode.Level <= 0)
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_SelectMartialArtTechnique", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectMartialArtTechnique", token: GenericToken)
                                             .ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (!(objSelectedNode.Tag is MartialArt objMartialArt))
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_SelectMartialArtTechnique", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectMartialArtTechnique", token: GenericToken)
                                             .ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                XmlDocument xmlDocument = await CharacterObject.LoadDataAsync("martialarts.xml", token: GenericToken).ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        XmlNode xmlTechnique;
                        using (ThreadSafeForm<SelectMartialArtTechnique> frmPickMartialArtTechnique
                               = await ThreadSafeForm<SelectMartialArtTechnique>.GetAsync(
                                       () => new SelectMartialArtTechnique(CharacterObject, objMartialArt), GenericToken)
                                   .ConfigureAwait(false))
                        {
                            if (await frmPickMartialArtTechnique.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                return;

                            blnAddAgain = frmPickMartialArtTechnique.MyForm.AddAgain;

                            // Open the Martial Arts XML file and locate the selected piece.
                            xmlTechnique = xmlDocument.TryGetNodeByNameOrId("/chummer/techniques/technique", frmPickMartialArtTechnique.MyForm.SelectedTechnique);
                        }

                        // Create the Improvements for the Technique if there are any.
                        MartialArtTechnique objTechnique = new MartialArtTechnique(CharacterObject);
                        objTechnique.Create(xmlTechnique);
                        if (objTechnique.InternalId.IsEmptyGuid())
                            return;

                        await objMartialArt.Techniques.AddAsync(objTechnique, GenericToken).ConfigureAwait(false);
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleAddGear_Click(object sender, EventArgs e)
        {
            try
            {
                Vehicle objSelectedVehicle;
                Location objLocation = null;
                TreeNode objSelectedNode = await treVehicles
                                                 .DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                 .ConfigureAwait(false);
                switch (objSelectedNode?.Tag)
                {
                    case Vehicle vehicle:
                        objSelectedVehicle = vehicle;
                        break;

                    case Location location:
                        objLocation = location;
                        objSelectedVehicle = objSelectedNode.Parent.Tag as Vehicle;
                        break;

                    default:
                        Program.ShowScrollableMessageBox(
                            this,
                            await LanguageManager.GetStringAsync("Message_SelectGearVehicle", token: GenericToken).ConfigureAwait(false),
                            await LanguageManager.GetStringAsync("MessageTitle_SelectGearVehicle", token: GenericToken)
                                                 .ConfigureAwait(false),
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                }

                await PurchaseVehicleGear(objSelectedVehicle, objLocation, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleSensorAddAsPlugin_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                            .ConfigureAwait(false);
                // Make sure a parent items is selected, then open the Select Gear window.
                if (objSelectedNode == null || objSelectedNode.Level < 2)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_ModifyVehicleGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_ModifyVehicleGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Make sure the Gear was found.
                if (!(objSelectedNode.Tag is Gear objSensor))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_ModifyVehicleGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_ModifyVehicleGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("gear.xml", token: GenericToken).ConfigureAwait(false);
                string strCategories = string.Empty;
                XPathNavigator objSensorNode = await objSensor.GetNodeXPathAsync(GenericToken).ConfigureAwait(false);
                XPathNodeIterator xmlAddonCategoryList = objSensorNode != null
                    ? await objSensorNode.SelectAndCacheExpressionAsync("addoncategory", GenericToken)
                                         .ConfigureAwait(false)
                    : null;
                if (xmlAddonCategoryList?.Count > 0)
                {
                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                  out StringBuilder sbdCategories))
                    {
                        foreach (XPathNavigator objXmlCategory in xmlAddonCategoryList)
                            sbdCategories.Append(objXmlCategory.Value).Append(',');
                        // Remove the trailing comma.
                        --sbdCategories.Length;
                        strCategories = sbdCategories.ToString();
                    }
                }

                List<Weapon> lstWeapons = new List<Weapon>(1);
                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        Gear objGear;
                        lstWeapons.Clear();
                        using (ThreadSafeForm<SelectGear> frmPickGear
                               = await ThreadSafeForm<SelectGear>.GetAsync(
                                                                     () => new SelectGear(CharacterObject, 0, 1,
                                                                         objSensor, strCategories), GenericToken)
                                                                 .ConfigureAwait(false))
                        {
                            if (!string.IsNullOrEmpty(strCategories) && !string.IsNullOrEmpty(objSensor.Capacity)
                                                                     && (!objSensor.Capacity.Contains('[')
                                                                         || objSensor.Capacity.Contains("/[")))
                                frmPickGear.MyForm.ShowNegativeCapacityOnly = true;

                            if (await frmPickGear.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickGear.MyForm.AddAgain;

                            // Open the Gear XML file and locate the selected piece.
                            XmlNode objXmlGear
                                = objXmlDocument.TryGetNodeByNameOrId("/chummer/gears/gear", frmPickGear.MyForm.SelectedGear);

                            // Create the new piece of Gear.
                            objGear = new Gear(CharacterObject);
                            objGear.Create(objXmlGear, frmPickGear.MyForm.SelectedRating, lstWeapons, string.Empty,
                                           false);

                            if (objGear.InternalId.IsEmptyGuid())
                                continue;
                            objGear.Quantity = frmPickGear.MyForm.SelectedQty;

                            // Reduce the cost for Do It Yourself components.
                            if (frmPickGear.MyForm.DoItYourself)
                                objGear.Cost = '(' + objGear.Cost + ") * 0.5";
                            // If the item was marked as free, change its cost.
                            if (frmPickGear.MyForm.FreeCost)
                            {
                                objGear.Cost = "0";
                            }
                        }

                        IsRefreshing = true;
                        try
                        {
                            nudVehicleGearQty.Increment = objGear.CostFor;
                            //nudVehicleGearQty.Minimum = objGear.CostFor;
                        }
                        finally
                        {
                            IsRefreshing = false;
                        }

                        await objSensor.Children.AddAsync(objGear, GenericToken).ConfigureAwait(false);

                        if (lstWeapons.Count > 0)
                        {
                            CharacterObject.Vehicles.FindVehicleGear(objSensor.InternalId, out Vehicle objVehicle,
                                                                     out WeaponAccessory _, out Cyberware _);
                            if (objVehicle != null)
                            {
                                foreach (Weapon objWeapon in lstWeapons)
                                {
                                    await objVehicle.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                                }
                            }
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleGearNotes_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treVehicles
                                                 .DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                 .ConfigureAwait(false);
                switch (objSelectedNode?.Tag)
                {
                    case Gear objGear:
                    {
                        using (ThreadSafeForm<EditNotes> frmItemNotes
                               = await ThreadSafeForm<EditNotes>.GetAsync(
                                                                    () => new EditNotes(objGear.Notes,
                                                                        objGear.NotesColor, GenericToken), GenericToken)
                                                                .ConfigureAwait(false))
                        {
                            if (await frmItemNotes.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                != DialogResult.OK)
                                return;
                            objGear.Notes = frmItemNotes.MyForm.Notes;
                            objGear.NotesColor = frmItemNotes.MyForm.NotesColor;
                            string strTooltip = objGear.Notes.WordWrap();
                            await treVehicles.DoThreadSafeAsync(() =>
                            {
                                objSelectedNode.ForeColor = objGear.PreferredColor;
                                objSelectedNode.ToolTipText = strTooltip;
                            }, GenericToken).ConfigureAwait(false);
                            await SetDirty(true).ConfigureAwait(false);
                        }

                        break;
                    }
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsAdvancedLifestyle_Click(object sender, EventArgs e)
        {
            try
            {
                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        Lifestyle objLifestyle = new Lifestyle(CharacterObject);
                        Lifestyle objLoopLifestyle = objLifestyle;
                        using (ThreadSafeForm<SelectLifestyleAdvanced> frmPickLifestyle
                               = await ThreadSafeForm<SelectLifestyleAdvanced>.GetAsync(
                                                                                  () => new SelectLifestyleAdvanced(
                                                                                      CharacterObject,
                                                                                      objLoopLifestyle), GenericToken)
                                                                              .ConfigureAwait(false))
                        {
                            // Make sure the dialogue window was not canceled.
                            if (await frmPickLifestyle.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                            {
                                if (!ReferenceEquals(objLifestyle, frmPickLifestyle.MyForm.SelectedLifestyle)
                                    && frmPickLifestyle.MyForm.SelectedLifestyle != null)
                                    await frmPickLifestyle.MyForm.SelectedLifestyle.DisposeAsync()
                                                          .ConfigureAwait(false);
                                return;
                            }

                            blnAddAgain = frmPickLifestyle.MyForm.AddAgain;

                            objLifestyle = frmPickLifestyle.MyForm.SelectedLifestyle;
                            objLifestyle.StyleType = LifestyleType.Advanced;
                        }

                        await CharacterObject.Lifestyles.AddAsync(objLifestyle, GenericToken).ConfigureAwait(false);
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsWeaponName_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treWeapons.DoThreadSafeFuncAsync(x =>
                {
                    TreeNode objReturn = x.SelectedNode;
                    while (objReturn?.Level > 1)
                        objReturn = objReturn.Parent;
                    return objReturn;
                }, GenericToken).ConfigureAwait(false);

                // Make sure a parent item is selected, then open the Select Accessory window.
                if (objSelectedNode == null || objSelectedNode.Level <= 0)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectWeaponName", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectWeapon", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Get the information for the currently selected Weapon.
                if (!(objSelectedNode.Tag is Weapon objWeapon))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectWeaponName", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectWeapon", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                string strDescription = await LanguageManager.GetStringAsync("String_WeaponName", token: GenericToken).ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription,
                               DefaultString = objWeapon.CustomName,
                               AllowEmptyString = true
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false) == DialogResult.Cancel)
                        return;

                    objWeapon.CustomName = frmPickText.MyForm.SelectedValue;
                }

                string strText = await objWeapon.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                await treWeapons.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                                .ConfigureAwait(false);

                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsGearName_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                        .ConfigureAwait(false);
                if (objSelectedNode == null || objSelectedNode.Level <= 0)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectGearName", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Get the information for the currently selected Gear.
                if (!(objSelectedNode.Tag is Gear objGear))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectGearName", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                string strDescription = await LanguageManager.GetStringAsync("String_GearName", token: GenericToken).ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription,
                               DefaultString = objGear.GearName,
                               AllowEmptyString = true
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false) == DialogResult.Cancel)
                        return;

                    objGear.GearName = frmPickText.MyForm.SelectedValue;
                }

                string strText = await objGear.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                await treGear.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                             .ConfigureAwait(false);

                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsWeaponAddUnderbarrel_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                           .ConfigureAwait(false);
                // Locate the Weapon that is selected in the tree.
                if (!(objSelectedNode?.Tag is Weapon objSelectedWeapon))
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_SelectWeaponUnderbarrel", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectWeapon", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information);
                    return;
                }

                if (objSelectedWeapon.Cyberware)
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_CyberwareUnderbarrel", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_WeaponUnderbarrel", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    using (ThreadSafeForm<SelectWeapon> frmPickWeapon = await ThreadSafeForm<SelectWeapon>.GetAsync(
                               () => new SelectWeapon(CharacterObject)
                               {
                                   LimitToCategories = "Underbarrel Weapons",
                                   ParentWeapon = objSelectedWeapon
                               }, GenericToken).ConfigureAwait(false))
                    {
                        frmPickWeapon.MyForm.Mounts.UnionWith(
                            objSelectedWeapon.AccessoryMounts.SplitNoAlloc('/', StringSplitOptions.RemoveEmptyEntries));

                        // Make sure the dialogue window was not canceled.
                        if (await frmPickWeapon.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false) == DialogResult.Cancel)
                            return;

                        // Open the Weapons XML file and locate the selected piece.
                        XmlNode objXmlWeapon
                            = (await CharacterObject.LoadDataAsync("weapons.xml", token: GenericToken).ConfigureAwait(false))
                            .TryGetNodeByNameOrId(
                                "/chummer/weapons/weapon", frmPickWeapon.MyForm.SelectedWeapon);

                        List<Weapon> lstWeapons = new List<Weapon>(1);
                        Weapon objWeapon = new Weapon(CharacterObject);
                        objWeapon.Create(objXmlWeapon, lstWeapons);
                        objWeapon.DiscountCost = frmPickWeapon.MyForm.BlackMarketDiscount;
                        objWeapon.Parent = objSelectedWeapon;
                        objWeapon.AllowAccessory = objSelectedWeapon.AllowAccessory;
                        if (!objSelectedWeapon.AllowAccessory)
                            objWeapon.AllowAccessory = false;

                        if (frmPickWeapon.MyForm.FreeCost)
                        {
                            objWeapon.Cost = "0";
                        }

                        await objSelectedWeapon.UnderbarrelWeapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                    }
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsGearRename_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                        .ConfigureAwait(false);
                if (!(objSelectedNode?.Tag is Gear objGear))
                    return;
                using (ThreadSafeForm<SelectText> frmPickText
                       = await ThreadSafeForm<SelectText>.GetAsync(() => new SelectText
                                                         {
                                                             DefaultString = objGear.Extra,
                                                             AllowEmptyString = true
                                                         }, GenericToken)
                                                         .ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;
                    objGear.Extra = frmPickText.MyForm.SelectedValue;
                    string strText = await objGear.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                    await treGear.DoThreadSafeAsync(() => objSelectedNode.Text = strText,
                                                    token: GenericToken).ConfigureAwait(false);
                    await SetDirty(true).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsArmorLocationAddArmor_Click(object sender, EventArgs e)
        {
            try
            {
                bool blnAddAgain;
                do
                {
                    blnAddAgain = await AddArmor(
                        await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token: GenericToken)
                                      .ConfigureAwait(false) as Location,
                        GenericToken).ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsAddArmorGear_Click(object sender, EventArgs e)
        {
            try
            {
                // Make sure a parent items is selected, then open the Select Gear window.
                if (!(await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token: GenericToken)
                                    .ConfigureAwait(false) is Armor
                        objArmor))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectArmor", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectArmor", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                bool blnAddAgain;
                do
                {
                    // Select the root Gear node then open the Select Gear window.
                    blnAddAgain = await PickArmorGear(objArmor.InternalId, true, GenericToken).ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsArmorGearAddAsPlugin_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                         .ConfigureAwait(false);
                // Make sure a parent items is selected, then open the Select Gear window.
                if (objSelectedNode == null || objSelectedNode.Level <= 0)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectArmor", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectArmor", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                string selectedGuid = string.Empty;
                switch (objSelectedNode.Tag)
                {
                    // Make sure the selected item is another piece of Gear.
                    case ArmorMod objMod when string.IsNullOrEmpty(objMod.GearCapacity):
                        Program.ShowScrollableMessageBox(
                            this, await LanguageManager.GetStringAsync("Message_SelectArmor", token: GenericToken).ConfigureAwait(false),
                            await LanguageManager.GetStringAsync("MessageTitle_SelectArmor", token: GenericToken).ConfigureAwait(false),
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;

                    case ArmorMod objMod:
                        selectedGuid = objMod.InternalId;
                        break;

                    case Gear objGear:
                        selectedGuid = objGear.InternalId;
                        break;
                }

                bool blnAddAgain;
                do
                {
                    blnAddAgain = await PickArmorGear(selectedGuid, token: GenericToken).ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsArmorNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsWeaponNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsCyberwareNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsQualityNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treQualities.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsMartialArtsNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treMartialArts.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsSpellNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treSpells.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsComplexFormNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treComplexForms.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                         .ConfigureAwait(false), GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsAIProgramNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treAIPrograms.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsCritterPowersNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treCritterPowers.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                          .ConfigureAwait(false), GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsMetamagicNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treMetamagic.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsGearNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsLifestyleNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treLifestyles.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsWeaponMountLocation_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode
                    = await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false);
                if (!(objSelectedNode?.Tag is WeaponMount objWeaponMount))
                    return;
                string strDescription
                    = await LanguageManager.GetStringAsync("String_VehicleName", token: GenericToken).ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription,
                               DefaultString = objWeaponMount.Location
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;

                    objWeaponMount.Location = frmPickText.MyForm.SelectedValue;
                }

                string strText = await objWeaponMount.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                await treVehicles.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                                 .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleName_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treVehicles.DoThreadSafeFuncAsync(x =>
                {
                    TreeNode objReturn = x.SelectedNode;
                    while (objReturn?.Level > 1)
                        objReturn = objReturn.Parent;
                    return objReturn;
                }, GenericToken).ConfigureAwait(false);

                // Make sure a parent item is selected.
                if (objSelectedNode == null || objSelectedNode.Level <= 0)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectVehicleName", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectVehicle", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Get the information for the currently selected Vehicle.
                if (!(objSelectedNode.Tag is Vehicle objVehicle))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectVehicleName", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectVehicle", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                string strDescription
                    = await LanguageManager.GetStringAsync("String_VehicleName", token: GenericToken).ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription,
                               DefaultString = objVehicle.CustomName,
                               AllowEmptyString = true
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false) == DialogResult.Cancel)
                        return;

                    objVehicle.CustomName = frmPickText.MyForm.SelectedValue;
                }

                string strText = await objVehicle.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                await treVehicles.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                                 .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleAddCyberware_Click(object sender, EventArgs e)
        {
            try
            {
                if (await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                     .ConfigureAwait(false) is string)
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_VehicleCyberwarePlugin", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_NoCyberware", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                Cyberware objCyberwareParent = null;
                string strNeedleId
                    = (await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken).ConfigureAwait(false) as
                        IHasInternalId)?.InternalId;
                VehicleMod objMod
                    = CharacterObject.Vehicles.FindVehicleMod(x => x.InternalId == strNeedleId, out Vehicle objVehicle,
                                                              out WeaponMount _);
                if (objMod == null)
                    objCyberwareParent
                        = CharacterObject.Vehicles.FindVehicleCyberware(x => x.InternalId == strNeedleId, out objMod);

                if (objCyberwareParent == null && objMod?.AllowCyberware != true)
                {
                    Program.ShowScrollableMessageBox(
                        this,
                        await LanguageManager.GetStringAsync("Message_VehicleCyberwarePlugin", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_NoCyberware", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Open the Cyberware XML file and locate the selected piece.
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("cyberware.xml", token: GenericToken).ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectCyberware> frmPickCyberware
                               = await ThreadSafeForm<SelectCyberware>.GetAsync(() => new SelectCyberware(
                                   CharacterObject,
                                   Improvement.ImprovementSource.Cyberware,
                                   objCyberwareParent ?? (object) objMod), GenericToken).ConfigureAwait(false))
                        {
                            if (objCyberwareParent == null)
                            {
                                //frmPickCyberware.SetGrade = "Standard";
                                frmPickCyberware.MyForm.MaximumCapacity = objMod.CapacityRemaining;
                                frmPickCyberware.MyForm.Subsystems = objMod.Subsystems;
                                using (new FetchSafelyFromPool<HashSet<string>>(Utils.StringHashSetPool,
                                           out HashSet<string> setDisallowedMounts))
                                using (new FetchSafelyFromPool<HashSet<string>>(Utils.StringHashSetPool,
                                           out HashSet<string> setHasMounts))
                                {
                                    foreach (Cyberware objLoopCyberware in objMod.Cyberware.DeepWhere(
                                                 x => x.Children, x => string.IsNullOrEmpty(x.PlugsIntoModularMount)))
                                    {
                                        foreach (string strLoop in objLoopCyberware.BlocksMounts.SplitNoAlloc(
                                                     ',', StringSplitOptions.RemoveEmptyEntries))
                                        {
                                            setDisallowedMounts.Add(strLoop + objLoopCyberware.Location);
                                        }

                                        string strLoopHasModularMount = objLoopCyberware.HasModularMount;
                                        if (!string.IsNullOrEmpty(strLoopHasModularMount))
                                            setHasMounts.Add(strLoopHasModularMount);
                                    }

                                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                               out StringBuilder sbdDisallowedMounts))
                                    {
                                        foreach (string strLoop in setDisallowedMounts)
                                        {
                                            if (!strLoop.EndsWith("Right", StringComparison.Ordinal)
                                                && (!strLoop.EndsWith("Left", StringComparison.Ordinal)
                                                    || setDisallowedMounts.Contains(
                                                        strLoop.Substring(0, strLoop.Length - 4) + "Right")))
                                                sbdDisallowedMounts.Append(strLoop.TrimEndOnce("Left")).Append(',');
                                        }

                                        // Remove trailing ","
                                        if (sbdDisallowedMounts.Length > 0)
                                            --sbdDisallowedMounts.Length;
                                        frmPickCyberware.MyForm.DisallowedMounts = sbdDisallowedMounts.ToString();
                                    }

                                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                               out StringBuilder sbdHasMounts))
                                    {
                                        foreach (string strLoop in setHasMounts)
                                            sbdHasMounts.Append(strLoop).Append(',');
                                        // Remove trailing ","
                                        if (sbdHasMounts.Length > 0)
                                            --sbdHasMounts.Length;
                                        frmPickCyberware.MyForm.HasModularMounts = sbdHasMounts.ToString();
                                    }
                                }
                            }
                            else
                            {
                                frmPickCyberware.MyForm.ForcedGrade = objCyberwareParent.Grade;
                                // If the Cyberware has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that conume Capacity).
                                if (!objCyberwareParent.Capacity.Contains('[')
                                    || objCyberwareParent.Capacity.Contains("/["))
                                {
                                    frmPickCyberware.MyForm.Subsystems = objCyberwareParent.AllowedSubsystems;
                                    frmPickCyberware.MyForm.MaximumCapacity = objCyberwareParent.CapacityRemaining;

                                    // Do not allow the user to add a new piece of Cyberware if its Capacity has been reached.
                                    if (CharacterObjectSettings.EnforceCapacity
                                        && objCyberwareParent.CapacityRemaining < 0)
                                    {
                                        Program.ShowScrollableMessageBox(
                                            this,
                                            await LanguageManager.GetStringAsync("Message_CapacityReached", token: GenericToken)
                                                                 .ConfigureAwait(false),
                                            await LanguageManager.GetStringAsync("MessageTitle_CapacityReached", token: GenericToken)
                                                                 .ConfigureAwait(false),
                                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        break;
                                    }
                                }

                                frmPickCyberware.MyForm.CyberwareParent = objCyberwareParent;
                                frmPickCyberware.MyForm.Subsystems = objCyberwareParent.AllowedSubsystems;
                                using (new FetchSafelyFromPool<HashSet<string>>(Utils.StringHashSetPool,
                                           out HashSet<string> setDisallowedMounts))
                                using (new FetchSafelyFromPool<HashSet<string>>(Utils.StringHashSetPool,
                                           out HashSet<string> setHasMounts))
                                {
                                    string strLoopHasModularMount = objCyberwareParent.HasModularMount;
                                    if (!string.IsNullOrEmpty(strLoopHasModularMount))
                                        setHasMounts.Add(strLoopHasModularMount);
                                    foreach (Cyberware objLoopCyberware in objCyberwareParent.Children.DeepWhere(
                                                 x => x.Children, x => string.IsNullOrEmpty(x.PlugsIntoModularMount)))
                                    {
                                        foreach (string strLoop in objLoopCyberware.BlocksMounts.SplitNoAlloc(
                                                     ',', StringSplitOptions.RemoveEmptyEntries))
                                        {
                                            setDisallowedMounts.Add(strLoop + objLoopCyberware.Location);
                                        }

                                        strLoopHasModularMount = objLoopCyberware.HasModularMount;
                                        if (!string.IsNullOrEmpty(strLoopHasModularMount))
                                            setHasMounts.Add(strLoopHasModularMount);
                                    }

                                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                               out StringBuilder sbdDisallowedMounts))
                                    {
                                        foreach (string strLoop in setDisallowedMounts)
                                        {
                                            if (!strLoop.EndsWith("Right", StringComparison.Ordinal)
                                                && (!strLoop.EndsWith("Left", StringComparison.Ordinal)
                                                    || setDisallowedMounts.Contains(
                                                        strLoop.Substring(0, strLoop.Length - 4) + "Right")))
                                                sbdDisallowedMounts.Append(strLoop.TrimEndOnce("Left")).Append(',');
                                        }

                                        // Remove trailing ","
                                        if (sbdDisallowedMounts.Length > 0)
                                            --sbdDisallowedMounts.Length;
                                        frmPickCyberware.MyForm.DisallowedMounts = sbdDisallowedMounts.ToString();
                                    }

                                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                               out StringBuilder sbdHasMounts))
                                    {
                                        foreach (string strLoop in setHasMounts)
                                            sbdHasMounts.Append(strLoop).Append(',');
                                        // Remove trailing ","
                                        if (sbdHasMounts.Length > 0)
                                            --sbdHasMounts.Length;
                                        frmPickCyberware.MyForm.HasModularMounts = sbdHasMounts.ToString();
                                    }
                                }
                            }

                            frmPickCyberware.MyForm.LockGrade();
                            frmPickCyberware.MyForm.ParentVehicle = objVehicle ?? objMod.Parent;

                            if (await frmPickCyberware.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickCyberware.MyForm.AddAgain;

                            XmlNode objXmlCyberware = objXmlDocument.TryGetNodeByNameOrId("/chummer/cyberwares/cyberware", frmPickCyberware.MyForm.SelectedCyberware);
                            Cyberware objCyberware = new Cyberware(CharacterObject);
                            if (!objCyberware.Purchase(objXmlCyberware, Improvement.ImprovementSource.Cyberware,
                                                       frmPickCyberware.MyForm.SelectedGrade,
                                                       frmPickCyberware.MyForm.SelectedRating,
                                                       objVehicle, objMod.Cyberware, CharacterObject.Vehicles,
                                                       objMod.Weapons,
                                                       frmPickCyberware.MyForm.Markup, frmPickCyberware.MyForm.FreeCost,
                                                       frmPickCyberware.MyForm.BlackMarketDiscount, true,
                                                       "String_ExpensePurchaseVehicleCyberware", objCyberwareParent))
                                await objCyberware.DeleteCyberwareAsync(token: GenericToken).ConfigureAwait(false);
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsArmorName_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treArmor.DoThreadSafeFuncAsync(x =>
                {
                    TreeNode objReturn = x.SelectedNode;
                    while (objReturn?.Level > 1)
                        objReturn = objReturn.Parent;
                    return objReturn;
                }, GenericToken).ConfigureAwait(false);

                // Make sure a parent item is selected, then open the Select Accessory window.
                if (objSelectedNode == null || objSelectedNode.Level <= 0)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectArmorName", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectArmor", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Get the information for the currently selected Armor.
                if (!(objSelectedNode.Tag is Armor objArmor))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectArmorName", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectArmor", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                string strDescription = await LanguageManager.GetStringAsync("String_ArmorName", token: GenericToken).ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription,
                               DefaultString = objArmor.CustomName,
                               AllowEmptyString = true
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false) == DialogResult.Cancel)
                        return;

                    objArmor.CustomName = frmPickText.MyForm.SelectedValue;
                }

                string strText = await objArmor.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                await treArmor.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                              .ConfigureAwait(false);

                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsLifestyleName_Click(object sender, EventArgs e)
        {
            try
            {
                // Get the information for the currently selected Lifestyle.
                TreeNode objSelectedNode = await treLifestyles.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                              .ConfigureAwait(false);
                if (!(objSelectedNode?.Tag is IHasCustomName objCustomName))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectLifestyleName", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectLifestyle", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                string strDescription
                    = await LanguageManager.GetStringAsync("String_LifestyleName", token: GenericToken).ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription,
                               DefaultString = objCustomName.CustomName,
                               AllowEmptyString = true
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false) == DialogResult.Cancel)
                        return;

                    if (objCustomName.CustomName == frmPickText.MyForm.SelectedValue)
                        return;
                    objCustomName.CustomName = frmPickText.MyForm.SelectedValue;

                    string strText = await objCustomName.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                    await treLifestyles.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken).ConfigureAwait(false);

                    await SetDirty(true).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsGearRenameLocation_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                        .ConfigureAwait(false);
                if (!(objSelectedNode?.Tag is Location objLocation))
                    return;
                string strDescription
                    = await LanguageManager.GetStringAsync("String_AddLocation", token: GenericToken).ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription,
                               DefaultString = objLocation.Name
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;

                    objLocation.Name = frmPickText.MyForm.SelectedValue;
                }

                string strText = await objLocation.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                await treGear.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                             .ConfigureAwait(false);

                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsWeaponRenameLocation_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                           .ConfigureAwait(false);
                if (!(objSelectedNode?.Tag is Location objLocation))
                    return;
                string strDescription
                    = await LanguageManager.GetStringAsync("String_AddLocation", token: GenericToken).ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription,
                               DefaultString = objLocation.Name
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;

                    objLocation.Name = frmPickText.MyForm.SelectedValue;
                }

                string strText = await objLocation.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                await treWeapons.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken).ConfigureAwait(false);

                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsCreateSpell_Click(object sender, EventArgs e)
        {
            try
            {
                // Run through the list of Active Skills and pick out the two applicable ones.
                int intSkillValue = 0;
                Skill objSpellcasting = await CharacterObject.SkillsSection.GetActiveSkillAsync("Spellcasting", GenericToken).ConfigureAwait(false);
                if (objSpellcasting != null)
                    intSkillValue = await objSpellcasting.GetRatingAsync(GenericToken).ConfigureAwait(false);
                Skill objRitualSpellcasting = await CharacterObject.SkillsSection.GetActiveSkillAsync("Ritual Spellcasting", GenericToken).ConfigureAwait(false);
                if (objRitualSpellcasting != null)
                    intSkillValue = Math.Max(intSkillValue, await objRitualSpellcasting.GetRatingAsync(GenericToken).ConfigureAwait(false));
                // The maximum number of Spells a character can start with is 2 x (highest of Spellcasting or Ritual Spellcasting Skill).
                if (await CharacterObject.Spells.GetCountAsync(GenericToken).ConfigureAwait(false) >= 2 * intSkillValue
                    + await ImprovementManager.ValueOfAsync(CharacterObject, Improvement.ImprovementType.SpellLimit, token: GenericToken)
                                              .ConfigureAwait(false)
                    && !await CharacterObject.GetIgnoreRulesAsync(GenericToken).ConfigureAwait(false))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SpellLimit", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SpellLimit", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // The character is still allowed to add Spells, so show the Create Spell window.
                using (ThreadSafeForm<CreateSpell> frmSpell
                       = await ThreadSafeForm<CreateSpell>.GetAsync(() => new CreateSpell(CharacterObject), GenericToken)
                                                          .ConfigureAwait(false))
                {
                    if (await frmSpell.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false) == DialogResult.Cancel)
                        return;

                    Spell objSpell = frmSpell.MyForm.SelectedSpell;
                    await CharacterObject.Spells.AddAsync(objSpell, GenericToken).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsArmorRenameLocation_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                         .ConfigureAwait(false);
                if (!(objSelectedNode?.Tag is Location objLocation))
                    return;
                string strDescription
                    = await LanguageManager.GetStringAsync("String_AddLocation", token: GenericToken).ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription,
                               DefaultString = objLocation.Name
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false) == DialogResult.Cancel)
                        return;

                    objLocation.Name = frmPickText.MyForm.SelectedValue;
                }

                string strText = await objLocation.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                await treArmor.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                              .ConfigureAwait(false);

                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsCyberwareAddGear_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode
                    = await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false);
                // Make sure a parent items is selected, then open the Select Gear window.
                if (objSelectedNode == null || objSelectedNode.Level <= 0)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectCyberware", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectCyberware", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Make sure the Cyberware is allowed to accept Gear.
                if (!(objSelectedNode.Tag is Cyberware objCyberware) || objCyberware.AllowGear == null)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_CyberwareGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_CyberwareGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Open the Gear XML file and locate the selected piece.
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("gear.xml", token: GenericToken).ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        string strCategories = string.Empty;
                        using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                      out StringBuilder sbdCategories))
                        {
                            using (XmlNodeList xmlGearCategoryList
                                   = objCyberware.AllowGear?.SelectNodes("gearcategory"))
                            {
                                if (xmlGearCategoryList != null)
                                {
                                    foreach (XmlNode objXmlCategory in xmlGearCategoryList)
                                        sbdCategories.Append(objXmlCategory.InnerText).Append(',');
                                    if (sbdCategories.Length > 0)
                                        --sbdCategories.Length;
                                    strCategories = sbdCategories.ToString();
                                }
                            }
                        }

                        string strGearNames = string.Empty;
                        using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                      out StringBuilder sbdGearNames))
                        {
                            using (XmlNodeList xmlGearNameList = objCyberware.AllowGear?.SelectNodes("gearname"))
                            {
                                if (xmlGearNameList?.Count > 0)
                                {
                                    foreach (XmlNode objXmlName in xmlGearNameList)
                                        sbdGearNames.Append(objXmlName.InnerText).Append(',');
                                    --sbdGearNames.Length;
                                    strGearNames = sbdGearNames.ToString();
                                }
                            }
                        }

                        using (ThreadSafeForm<SelectGear> frmPickGear
                               = await ThreadSafeForm<SelectGear>.GetAsync(
                                   () => new SelectGear(CharacterObject, 0, 1, objCyberware, strCategories,
                                                        strGearNames), GenericToken).ConfigureAwait(false))
                        {
                            if (!string.IsNullOrEmpty(strCategories) && !string.IsNullOrEmpty(objCyberware.Capacity) &&
                                objCyberware.Capacity != "0" && (!objCyberware.Capacity.Contains('[') ||
                                                                 objCyberware.Capacity.Contains("/[")))
                                frmPickGear.MyForm.ShowNegativeCapacityOnly = true;

                            if (await frmPickGear.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickGear.MyForm.AddAgain;

                            XmlNode objXmlGear
                                = objXmlDocument.TryGetNodeByNameOrId("/chummer/gears/gear", frmPickGear.MyForm.SelectedGear);

                            // Create the new piece of Gear.
                            List<Weapon> lstWeapons = new List<Weapon>(1);

                            Gear objNewGear = new Gear(CharacterObject);
                            objNewGear.Create(objXmlGear, frmPickGear.MyForm.SelectedRating, lstWeapons, string.Empty,
                                              objCyberware.IsModularCurrentlyEquipped);
                            objNewGear.Quantity = frmPickGear.MyForm.SelectedQty;

                            objNewGear.DiscountCost = frmPickGear.MyForm.BlackMarketDiscount;

                            if (objNewGear.InternalId.IsEmptyGuid())
                                continue;

                            // Reduce the cost for Do It Yourself components.
                            if (frmPickGear.MyForm.DoItYourself)
                                objNewGear.Cost = '(' + objNewGear.Cost + ") * 0.5";
                            // If the item was marked as free, change its cost.
                            if (frmPickGear.MyForm.FreeCost)
                            {
                                objNewGear.Cost = "0";
                            }

                            // Create any Weapons that came with this Gear.
                            foreach (Weapon objWeapon in lstWeapons)
                            {
                                await CharacterObject.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                            }

                            await objCyberware.GearChildren.AddAsync(objNewGear, GenericToken).ConfigureAwait(false);
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleCyberwareAddGear_Click(object sender, EventArgs e)
        {
            try
            {
                // Make sure a parent items is selected, then open the Select Gear window.
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken).ConfigureAwait(false) is
                        Cyberware objCyberware))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_SelectCyberware", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectCyberware", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Make sure the Cyberware is allowed to accept Gear.
                if (objCyberware.AllowGear == null)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_CyberwareGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_CyberwareGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Open the Gear XML file and locate the selected piece.
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("gear.xml", token: GenericToken).ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        string strCategories;
                        using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                      out StringBuilder sbdCategories))
                        {
                            foreach (XmlNode objXmlCategory in objCyberware.AllowGear)
                                sbdCategories.Append(objXmlCategory.InnerText).Append(',');
                            if (sbdCategories.Length > 0)
                                --sbdCategories.Length;
                            strCategories = sbdCategories.ToString();
                        }

                        using (ThreadSafeForm<SelectGear> frmPickGear
                               = await ThreadSafeForm<SelectGear>.GetAsync(
                                                                     () => new SelectGear(CharacterObject, 0, 1,
                                                                         objCyberware, strCategories), GenericToken)
                                                                 .ConfigureAwait(false))
                        {
                            if (!string.IsNullOrEmpty(strCategories) && !string.IsNullOrEmpty(objCyberware.Capacity) &&
                                objCyberware.Capacity != "0" && (!objCyberware.Capacity.Contains('[') ||
                                                                 objCyberware.Capacity.Contains("/[")))
                                frmPickGear.MyForm.ShowNegativeCapacityOnly = true;

                            if (await frmPickGear.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickGear.MyForm.AddAgain;

                            XmlNode objXmlGear
                                = objXmlDocument.TryGetNodeByNameOrId("/chummer/gears/gear", frmPickGear.MyForm.SelectedGear);

                            // Create the new piece of Gear.
                            List<Weapon> lstWeapons = new List<Weapon>(1);

                            Gear objNewGear = new Gear(CharacterObject);
                            objNewGear.Create(objXmlGear, frmPickGear.MyForm.SelectedRating, lstWeapons, string.Empty,
                                              false);
                            objNewGear.Quantity = frmPickGear.MyForm.SelectedQty;

                            objNewGear.DiscountCost = frmPickGear.MyForm.BlackMarketDiscount;

                            if (objNewGear.InternalId.IsEmptyGuid())
                                continue;

                            // Reduce the cost for Do It Yourself components.
                            if (frmPickGear.MyForm.DoItYourself)
                                objNewGear.Cost = '(' + objNewGear.Cost + ") * 0.5";
                            // If the item was marked as free, change its cost.
                            if (frmPickGear.MyForm.FreeCost)
                            {
                                objNewGear.Cost = "0";
                            }

                            // Create any Weapons that came with this Gear.
                            foreach (Weapon objWeapon in lstWeapons)
                            {
                                await CharacterObject.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                            }

                            await objCyberware.GearChildren.AddAsync(objNewGear, GenericToken).ConfigureAwait(false);
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsCyberwareGearMenuAddAsPlugin_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                             .ConfigureAwait(false);
                // Make sure a parent items is selected, then open the Select Gear window.
                if (objSelectedNode == null || objSelectedNode.Level < 2)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_ModifyVehicleGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Locate the Vehicle Sensor Gear.
                if (!(objSelectedNode.Tag is Gear objSensor))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_ModifyVehicleGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                CharacterObject.Cyberware.FindCyberwareGear(objSensor.InternalId, out Cyberware objCyberware);
                // Open the Gear XML file and locate the selected piece.
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("gear.xml", token: GenericToken).ConfigureAwait(false);
                string strCategories = string.Empty;
                XPathNavigator objSensorNode = await objSensor.GetNodeXPathAsync(GenericToken).ConfigureAwait(false);
                XPathNodeIterator xmlAddonCategoryList = objSensorNode != null
                    ? await objSensorNode.SelectAndCacheExpressionAsync("addoncategory", GenericToken)
                                         .ConfigureAwait(false)
                    : null;
                if (xmlAddonCategoryList?.Count > 0)
                {
                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                  out StringBuilder sbdCategories))
                    {
                        foreach (XPathNavigator objXmlCategory in xmlAddonCategoryList)
                            sbdCategories.Append(objXmlCategory.Value).Append(',');
                        // Remove the trailing comma.
                        --sbdCategories.Length;
                        strCategories = sbdCategories.ToString();
                    }
                }

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectGear> frmPickGear
                               = await ThreadSafeForm<SelectGear>.GetAsync(
                                                                     () => new SelectGear(CharacterObject, 0, 1,
                                                                         objSensor, strCategories), GenericToken)
                                                                 .ConfigureAwait(false))
                        {
                            if (!string.IsNullOrEmpty(strCategories) && !string.IsNullOrEmpty(objSensor.Capacity)
                                                                     && (!objSensor.Capacity.Contains('[')
                                                                         || objSensor.Capacity.Contains("/[")))
                                frmPickGear.MyForm.ShowNegativeCapacityOnly = true;

                            if (await frmPickGear.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickGear.MyForm.AddAgain;

                            XmlNode objXmlGear
                                = objXmlDocument.TryGetNodeByNameOrId("/chummer/gears/gear", frmPickGear.MyForm.SelectedGear);

                            // Create the new piece of Gear.
                            List<Weapon> lstWeapons = new List<Weapon>(1);

                            Gear objGear = new Gear(CharacterObject);
                            objGear.Create(objXmlGear, frmPickGear.MyForm.SelectedRating, lstWeapons, string.Empty,
                                           (objSensor.Parent as Gear)?.Equipped
                                           ?? objCyberware?.IsModularCurrentlyEquipped == true);

                            if (objGear.InternalId.IsEmptyGuid())
                                continue;

                            objGear.Quantity = frmPickGear.MyForm.SelectedQty;

                            objGear.DiscountCost = frmPickGear.MyForm.BlackMarketDiscount;

                            // Reduce the cost for Do It Yourself components.
                            if (frmPickGear.MyForm.DoItYourself)
                                objGear.Cost = '(' + objGear.Cost + ") * 0.5";
                            // If the item was marked as free, change its cost.
                            if (frmPickGear.MyForm.FreeCost)
                            {
                                objGear.Cost = "0";
                            }

                            await objSensor.Children.AddAsync(objGear, GenericToken).ConfigureAwait(false);

                            foreach (Weapon objWeapon in lstWeapons)
                            {
                                await CharacterObject.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                            }
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsVehicleCyberwareGearMenuAddAsPlugin_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                            .ConfigureAwait(false);
                // Make sure a parent items is selected, then open the Select Gear window.
                if (objSelectedNode == null)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_ModifyVehicleGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Locate the Vehicle Sensor Gear.
                if (!(objSelectedNode.Tag is Gear objSensor))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_ModifyVehicleGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Open the Gear XML file and locate the selected piece.
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("gear.xml", token: GenericToken).ConfigureAwait(false);
                string strCategories = string.Empty;
                XPathNavigator objSensorNode = await objSensor.GetNodeXPathAsync(GenericToken).ConfigureAwait(false);
                XPathNodeIterator xmlAddonCategoryList = objSensorNode != null
                    ? await objSensorNode.SelectAndCacheExpressionAsync("addoncategory", GenericToken)
                                         .ConfigureAwait(false)
                    : null;
                if (xmlAddonCategoryList?.Count > 0)
                {
                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                  out StringBuilder sbdCategories))
                    {
                        foreach (XPathNavigator objXmlCategory in xmlAddonCategoryList)
                            sbdCategories.Append(objXmlCategory.Value).Append(',');
                        // Remove the trailing comma.
                        --sbdCategories.Length;
                        strCategories = sbdCategories.ToString();
                    }
                }

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectGear> frmPickGear
                               = await ThreadSafeForm<SelectGear>.GetAsync(
                                                                     () => new SelectGear(CharacterObject, 0, 1,
                                                                         objSensor, strCategories), GenericToken)
                                                                 .ConfigureAwait(false))
                        {
                            if (!string.IsNullOrEmpty(strCategories) && !string.IsNullOrEmpty(objSensor.Capacity)
                                                                     && (!objSensor.Capacity.Contains('[')
                                                                         || objSensor.Capacity.Contains("/[")))
                                frmPickGear.MyForm.ShowNegativeCapacityOnly = true;

                            if (await frmPickGear.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickGear.MyForm.AddAgain;

                            XmlNode objXmlGear
                                = objXmlDocument.TryGetNodeByNameOrId("/chummer/gears/gear", frmPickGear.MyForm.SelectedGear);

                            // Create the new piece of Gear.
                            List<Weapon> lstWeapons = new List<Weapon>(1);

                            Gear objGear = new Gear(CharacterObject);
                            objGear.Create(objXmlGear, frmPickGear.MyForm.SelectedRating, lstWeapons, string.Empty,
                                           false);

                            if (objGear.InternalId.IsEmptyGuid())
                                continue;

                            objGear.Quantity = frmPickGear.MyForm.SelectedQty;

                            objGear.DiscountCost = frmPickGear.MyForm.BlackMarketDiscount;

                            // Reduce the cost for Do It Yourself components.
                            if (frmPickGear.MyForm.DoItYourself)
                                objGear.Cost = '(' + objGear.Cost + ") * 0.5";
                            // If the item was marked as free, change its cost.
                            if (frmPickGear.MyForm.FreeCost)
                            {
                                objGear.Cost = "0";
                            }

                            await objSensor.Children.AddAsync(objGear, GenericToken).ConfigureAwait(false);

                            foreach (Weapon objWeapon in lstWeapons)
                            {
                                await CharacterObject.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                            }
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsWeaponAccessoryAddGear_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                           .ConfigureAwait(false);

                // Make sure the Weapon Accessory is allowed to accept Gear.
                if (!(objSelectedNode?.Tag is WeaponAccessory objAccessory) || objAccessory.AllowGear == null)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_WeaponGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_CyberwareGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Open the Gear XML file and locate the selected piece.
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("gear.xml", token: GenericToken)
                                                                  .ConfigureAwait(false);
                string strCategories;
                using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool, out StringBuilder sbdCategories))
                {
                    foreach (XmlNode objXmlCategory in objAccessory.AllowGear)
                        sbdCategories.Append(objXmlCategory.InnerText).Append(',');
                    if (sbdCategories.Length > 0)
                        --sbdCategories.Length;
                    strCategories = sbdCategories.ToString();
                }

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectGear> frmPickGear
                               = await ThreadSafeForm<SelectGear>.GetAsync(
                                   () => new SelectGear(CharacterObject, 0, 1, objAccessory, strCategories),
                                   GenericToken).ConfigureAwait(false))
                        {
                            if (!string.IsNullOrEmpty(strCategories))
                                frmPickGear.MyForm.ShowNegativeCapacityOnly = true;

                            if (await frmPickGear.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickGear.MyForm.AddAgain;

                            XmlNode objXmlGear
                                = objXmlDocument.TryGetNodeByNameOrId("/chummer/gears/gear", frmPickGear.MyForm.SelectedGear);

                            // Create the new piece of Gear.
                            List<Weapon> lstWeapons = new List<Weapon>(1);

                            Gear objGear = new Gear(CharacterObject);
                            objGear.Create(objXmlGear, frmPickGear.MyForm.SelectedRating, lstWeapons, string.Empty,
                                           objAccessory.Equipped);

                            if (objGear.InternalId.IsEmptyGuid())
                                continue;

                            objGear.Quantity = frmPickGear.MyForm.SelectedQty;

                            objGear.DiscountCost = frmPickGear.MyForm.BlackMarketDiscount;

                            // Reduce the cost for Do It Yourself components.
                            if (frmPickGear.MyForm.DoItYourself)
                                objGear.Cost = '(' + objGear.Cost + ") * 0.5";
                            // If the item was marked as free, change its cost.
                            if (frmPickGear.MyForm.FreeCost)
                            {
                                objGear.Cost = "0";
                            }

                            await objAccessory.GearChildren.AddAsync(objGear, GenericToken).ConfigureAwait(false);

                            // Create any Weapons that came with this Gear.
                            foreach (Weapon objWeapon in lstWeapons)
                            {
                                await CharacterObject.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                            }
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void tsWeaponAccessoryGearMenuAddAsPlugin_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                      .ConfigureAwait(false) is Gear objSensor))
                    // Make sure the Gear was found.
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_ModifyVehicleGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                CharacterObject.Weapons.FindWeaponGear(objSensor.InternalId, out WeaponAccessory objAccessory);

                string strCategories = string.Empty;
                XPathNavigator objSensorNode = await objSensor.GetNodeXPathAsync(GenericToken).ConfigureAwait(false);
                XPathNodeIterator xmlAddonCategoryList = objSensorNode != null
                    ? await objSensorNode.SelectAndCacheExpressionAsync("addoncategory", GenericToken)
                                         .ConfigureAwait(false)
                    : null;
                if (xmlAddonCategoryList?.Count > 0)
                {
                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                  out StringBuilder sbdCategories))
                    {
                        foreach (XPathNavigator objXmlCategory in xmlAddonCategoryList)
                            sbdCategories.Append(objXmlCategory.Value).Append(',');
                        // Remove the trailing comma.
                        --sbdCategories.Length;
                        strCategories = sbdCategories.ToString();
                    }
                }

                // Open the Gear XML file and locate the selected piece.
                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("gear.xml", token: GenericToken)
                                                                  .ConfigureAwait(false);

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectGear> frmPickGear
                               = await ThreadSafeForm<SelectGear>.GetAsync(
                                                                     () => new SelectGear(CharacterObject, 0, 1,
                                                                         objSensor, strCategories), GenericToken)
                                                                 .ConfigureAwait(false))
                        {
                            if (!string.IsNullOrEmpty(strCategories) && !string.IsNullOrEmpty(objSensor.Capacity)
                                                                     && (!objSensor.Capacity.Contains('[')
                                                                         || objSensor.Capacity.Contains("/[")))
                                frmPickGear.MyForm.ShowNegativeCapacityOnly = true;

                            if (await frmPickGear.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickGear.MyForm.AddAgain;

                            XmlNode objXmlGear
                                = objXmlDocument.TryGetNodeByNameOrId("/chummer/gears/gear", frmPickGear.MyForm.SelectedGear);

                            // Create the new piece of Gear.
                            List<Weapon> lstWeapons = new List<Weapon>(1);

                            Gear objGear = new Gear(CharacterObject);
                            objGear.Create(objXmlGear, frmPickGear.MyForm.SelectedRating, lstWeapons, string.Empty,
                                           (objSensor.Parent as Gear)?.Equipped ?? objAccessory?.Equipped == true);

                            if (objGear.InternalId.IsEmptyGuid())
                                continue;

                            objGear.Quantity = frmPickGear.MyForm.SelectedQty;

                            objGear.DiscountCost = frmPickGear.MyForm.BlackMarketDiscount;

                            // Reduce the cost for Do It Yourself components.
                            if (frmPickGear.MyForm.DoItYourself)
                                objGear.Cost = '(' + objGear.Cost + ") * 0.5";
                            // If the item was marked as free, change its cost.
                            if (frmPickGear.MyForm.FreeCost)
                            {
                                objGear.Cost = "0";
                            }

                            await objSensor.Children.AddAsync(objGear, GenericToken).ConfigureAwait(false);

                            // Create any Weapons that came with this Gear.
                            foreach (Weapon objWeapon in lstWeapons)
                            {
                                await CharacterObject.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                            }
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void tsVehicleRenameLocation_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                            .ConfigureAwait(false);
                if (!(objSelectedNode?.Tag is Location objLocation))
                    return;

                string strDescription
                    = await LanguageManager.GetStringAsync("String_AddLocation", token: GenericToken).ConfigureAwait(false);
                using (ThreadSafeForm<SelectText> frmPickText = await ThreadSafeForm<SelectText>.GetAsync(
                           () => new SelectText
                           {
                               Description = strDescription,
                               DefaultString = objLocation.Name
                           }, GenericToken).ConfigureAwait(false))
                {
                    if (await frmPickText.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;

                    objLocation.Name = frmPickText.MyForm.SelectedValue;
                }

                string strText = await objLocation.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                await treVehicles
                      .DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                      .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }

            await SetDirty(true).ConfigureAwait(false);
        }

        private async void tsCreateNaturalWeapon_Click(object sender, EventArgs e)
        {
            try
            {
                using (ThreadSafeForm<CreateNaturalWeapon> frmCreateNaturalWeapon
                       = await ThreadSafeForm<CreateNaturalWeapon>.GetAsync(
                           () => new CreateNaturalWeapon(CharacterObject), GenericToken).ConfigureAwait(false))
                {
                    if (await frmCreateNaturalWeapon.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;

                    Weapon objWeapon = frmCreateNaturalWeapon.MyForm.SelectedWeapon;
                    await CharacterObject.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void tsVehicleWeaponAccessoryGearMenuAddAsPlugin_Click(object sender, EventArgs e)
        {
            try
            {
                // Make sure the Gear was found.
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is Gear objSensor))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_ModifyVehicleGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_SelectGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("gear.xml", token: GenericToken)
                                                                  .ConfigureAwait(false);
                string strCategories = string.Empty;
                XPathNavigator objSensorNode = await objSensor.GetNodeXPathAsync(GenericToken).ConfigureAwait(false);
                XPathNodeIterator xmlAddonCategoryList = objSensorNode != null
                    ? await objSensorNode.SelectAndCacheExpressionAsync("addoncategory", GenericToken)
                                         .ConfigureAwait(false)
                    : null;
                if (xmlAddonCategoryList?.Count > 0)
                {
                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                  out StringBuilder sbdCategories))
                    {
                        foreach (XPathNavigator objXmlCategory in xmlAddonCategoryList)
                            sbdCategories.Append(objXmlCategory.Value).Append(',');
                        // Remove the trailing comma.
                        --sbdCategories.Length;
                        strCategories = sbdCategories.ToString();
                    }
                }

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectGear> frmPickGear
                               = await ThreadSafeForm<SelectGear>.GetAsync(
                                                                     () => new SelectGear(CharacterObject, 0, 1,
                                                                         objSensor, strCategories), GenericToken)
                                                                 .ConfigureAwait(false))
                        {
                            if (!string.IsNullOrEmpty(strCategories) && !string.IsNullOrEmpty(objSensor.Capacity)
                                                                     && (!objSensor.Capacity.Contains('[')
                                                                         || objSensor.Capacity.Contains("/[")))
                                frmPickGear.MyForm.ShowNegativeCapacityOnly = true;

                            if (await frmPickGear.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickGear.MyForm.AddAgain;

                            // Open the Gear XML file and locate the selected piece.
                            XmlNode objXmlGear
                                = objXmlDocument.TryGetNodeByNameOrId("/chummer/gears/gear", frmPickGear.MyForm.SelectedGear);

                            // Create the new piece of Gear.
                            List<Weapon> lstWeapons = new List<Weapon>(1);

                            Gear objGear = new Gear(CharacterObject);
                            objGear.Create(objXmlGear, frmPickGear.MyForm.SelectedRating, lstWeapons, string.Empty,
                                           false);

                            if (objGear.InternalId.IsEmptyGuid())
                                continue;

                            objGear.Quantity = frmPickGear.MyForm.SelectedQty;

                            objGear.DiscountCost = frmPickGear.MyForm.BlackMarketDiscount;

                            // Reduce the cost for Do It Yourself components.
                            if (frmPickGear.MyForm.DoItYourself)
                                objGear.Cost = '(' + objGear.Cost + ") * 0.5";
                            // If the item was marked as free, change its cost.
                            if (frmPickGear.MyForm.FreeCost)
                            {
                                objGear.Cost = "0";
                            }

                            await objSensor.Children.AddAsync(objGear, GenericToken).ConfigureAwait(false);

                            // Create any Weapons that came with this Gear.
                            if (lstWeapons.Count > 0)
                            {
                                CharacterObject.Vehicles.FindVehicleGear(objGear.InternalId, out Vehicle objVehicle,
                                                                         out WeaponAccessory _, out Cyberware _);
                                foreach (Weapon objWeapon in lstWeapons)
                                {
                                    await objVehicle.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                                }
                            }
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void tsVehicleWeaponAccessoryAddGear_Click(object sender, EventArgs e)
        {
            try
            {
                TreeNode objSelectedNode = await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                            .ConfigureAwait(false);

                // Make sure the Weapon Accessory is allowed to accept Gear.
                if (!(objSelectedNode?.Tag is WeaponAccessory objAccessory) || objAccessory.AllowGear == null)
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_WeaponGear", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_CyberwareGear", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("gear.xml", token: GenericToken)
                                                                  .ConfigureAwait(false);
                string strCategories;
                using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool, out StringBuilder sbdCategories))
                {
                    foreach (XmlNode objXmlCategory in objAccessory.AllowGear)
                        sbdCategories.Append(objXmlCategory.InnerText).Append(',');
                    if (sbdCategories.Length > 0)
                        --sbdCategories.Length;
                    strCategories = sbdCategories.ToString();
                }

                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                try
                {
                    bool blnAddAgain;
                    do
                    {
                        using (ThreadSafeForm<SelectGear> frmPickGear
                               = await ThreadSafeForm<SelectGear>.GetAsync(
                                   () => new SelectGear(CharacterObject, 0, 1, objAccessory, strCategories),
                                   GenericToken).ConfigureAwait(false))
                        {
                            if (!string.IsNullOrEmpty(strCategories))
                                frmPickGear.MyForm.ShowNegativeCapacityOnly = true;

                            if (await frmPickGear.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                                == DialogResult.Cancel)
                                break;
                            blnAddAgain = frmPickGear.MyForm.AddAgain;

                            // Open the Gear XML file and locate the selected piece.
                            XmlNode objXmlGear
                                = objXmlDocument.TryGetNodeByNameOrId("/chummer/gears/gear", frmPickGear.MyForm.SelectedGear);

                            // Create the new piece of Gear.
                            List<Weapon> lstWeapons = new List<Weapon>(1);

                            Gear objNewGear = new Gear(CharacterObject);
                            objNewGear.Create(objXmlGear, frmPickGear.MyForm.SelectedRating, lstWeapons, string.Empty,
                                              false);

                            if (objNewGear.InternalId.IsEmptyGuid())
                                continue;

                            objNewGear.Quantity = frmPickGear.MyForm.SelectedQty;

                            objNewGear.DiscountCost = frmPickGear.MyForm.BlackMarketDiscount;

                            // Reduce the cost for Do It Yourself components.
                            if (frmPickGear.MyForm.DoItYourself)
                                objNewGear.Cost = '(' + objNewGear.Cost + ") * 0.5";
                            // If the item was marked as free, change its cost.
                            if (frmPickGear.MyForm.FreeCost)
                            {
                                objNewGear.Cost = "0";
                            }

                            await objAccessory.GearChildren.AddAsync(objNewGear, GenericToken).ConfigureAwait(false);

                            // Create any Weapons that came with this Gear.
                            foreach (Weapon objLoopWeapon in lstWeapons)
                            {
                                await objAccessory.Parent.Children.AddAsync(objLoopWeapon, GenericToken).ConfigureAwait(false);
                            }
                        }
                    } while (blnAddAgain);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        #endregion ContextMenu Events

        #region Additional Common Tab Control Events

        private async void treQualities_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedQuality(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async Task RefreshSelectedQuality(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            await tlpCommonLeftSide.DoThreadSafeAsync(x => x.SuspendLayout(), token).ConfigureAwait(false);
            try
            {
                // Locate the selected Quality.
                Quality objQuality = await treQualities
                                           .DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag as Quality, token)
                                           .ConfigureAwait(false);
                await UpdateQualityLevelValue(objQuality, token).ConfigureAwait(false);
                if (objQuality == null)
                {
                    await lblQualitySourceLabel.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    await lblQualityBPLabel.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    await lblQualitySource.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    await lblQualityBP.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                }
                else
                {
                    await lblQualitySourceLabel.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                    await lblQualityBPLabel.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                    await lblQualitySource.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                    await lblQualityBP.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                    await objQuality.SetSourceDetailAsync(lblQualitySource, token).ConfigureAwait(false);
                    string strText
                        = (objQuality.BP * objQuality.Levels * CharacterObjectSettings.KarmaQuality).ToString(
                              GlobalSettings.CultureInfo) +
                          await LanguageManager.GetStringAsync("String_Space", token: token).ConfigureAwait(false)
                          + await LanguageManager.GetStringAsync("String_Karma", token: token).ConfigureAwait(false);
                    await lblQualityBP.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                }
            }
            finally
            {
                await tlpCommonLeftSide.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken).ConfigureAwait(false);
            }
        }

        private async ValueTask UpdateQualityLevelValue(Quality objSelectedQuality = null,
                                                        CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            if (objSelectedQuality == null
                || objSelectedQuality.OriginSource == QualitySource.Improvement
                || objSelectedQuality.OriginSource == QualitySource.Metatype
                || objSelectedQuality.OriginSource == QualitySource.Heritage
                || objSelectedQuality.Levels == 0)
            {
                await nudQualityLevel.DoThreadSafeAsync(x =>
                {
                    x.Value = 1;
                    x.Enabled = false;
                }, token).ConfigureAwait(false);
                return;
            }

            token.ThrowIfCancellationRequested();
            XPathNavigator objQualityNode
                = await objSelectedQuality.GetNodeXPathAsync(token: token).ConfigureAwait(false);
            string strLimitString = objQualityNode != null
                ? (await objQualityNode.SelectSingleNodeAndCacheExpressionAsync("chargenlimit", token: token)
                                       .ConfigureAwait(false))?.Value
                  ?? (await objQualityNode.SelectSingleNodeAndCacheExpressionAsync("limit", token: token)
                                          .ConfigureAwait(false))?.Value
                : string.Empty;
            token.ThrowIfCancellationRequested();
            if (!string.IsNullOrWhiteSpace(strLimitString)
                && await objQualityNode.SelectSingleNodeAndCacheExpressionAsync("nolevels", token: token)
                                       .ConfigureAwait(false) == null
                && int.TryParse(strLimitString, out int intMaxRating))
            {
                await nudQualityLevel.DoThreadSafeAsync(x =>
                {
                    x.Maximum = intMaxRating;
                    x.Value = objSelectedQuality.Levels;
                    x.Enabled = true;
                }, token).ConfigureAwait(false);
            }
            else
            {
                await nudQualityLevel.DoThreadSafeAsync(x =>
                {
                    x.Value = 1;
                    x.Enabled = false;
                }, token).ConfigureAwait(false);
            }
        }

        private int _intSkipQualityLevelChanged;

        private async void nudQualityLevel_ValueChanged(object sender, EventArgs e)
        {
            if (_intSkipQualityLevelChanged > 0)
                return;
            try
            {
                // Locate the selected Quality.
                if (!(await treQualities.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is Quality objSelectedQuality))
                    return;
                bool blnDoRemoveQuality = false;
                using (await EnterReadLock.EnterAsync(objSelectedQuality, GenericToken).ConfigureAwait(false))
                {
                    int intCurrentLevels = objSelectedQuality.Levels;
                    int intSelectedLevels = await nudQualityLevel.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                                 .ConfigureAwait(false);
                    // Helps to capture a write lock here for performance purposes
                    IAsyncDisposable objLocker = await CharacterObject.LockObject.EnterWriteLockAsync(GenericToken)
                                                                      .ConfigureAwait(false);
                    try
                    {
                        // Adding new levels
                        for (; intSelectedLevels > intCurrentLevels; ++intCurrentLevels)
                        {
                            if (!await (await objSelectedQuality.GetNodeXPathAsync(GenericToken).ConfigureAwait(false))
                                       .RequirementsMetAsync(CharacterObject,
                                                             await LanguageManager.GetStringAsync("String_Quality", token: GenericToken)
                                                                 .ConfigureAwait(false), token: GenericToken).ConfigureAwait(false))
                            {
                                await UpdateQualityLevelValue(objSelectedQuality, GenericToken).ConfigureAwait(false);
                                break;
                            }

                            List<Weapon> lstWeapons = new List<Weapon>(1);
                            Quality objQuality = new Quality(CharacterObject);

                            objQuality.Create(await objSelectedQuality.GetNodeAsync(GenericToken).ConfigureAwait(false),
                                              QualitySource.Selected, lstWeapons, objSelectedQuality.Extra);
                            if (objQuality.InternalId.IsEmptyGuid())
                            {
                                // If the Quality could not be added, remove the Improvements that were added during the Quality Creation process.
                                await ImprovementManager
                                      .RemoveImprovementsAsync(CharacterObject, Improvement.ImprovementSource.Quality,
                                                               objQuality.InternalId, token: GenericToken).ConfigureAwait(false);
                                await objQuality.DisposeAsync().ConfigureAwait(false);
                                await UpdateQualityLevelValue(objSelectedQuality, GenericToken).ConfigureAwait(false);
                                break;
                            }

                            objQuality.BP = objSelectedQuality.BP;
                            objQuality.ContributeToLimit = objSelectedQuality.ContributeToLimit;

                            // Make sure that adding the Quality would not cause the character to exceed their BP limits.
                            bool blnAddItem = true;
                            if (objQuality.ContributeToLimit && !CharacterObject.IgnoreRules)
                            {
                                // If the item being checked would cause the limit of 25 BP spent on Positive Qualities to be exceed, do not let it be checked and display a message.
                                string strAmount
                                    = CharacterObjectSettings.QualityKarmaLimit.ToString(GlobalSettings.CultureInfo)
                                      + await LanguageManager.GetStringAsync("String_Space", token: GenericToken).ConfigureAwait(false)
                                      + await LanguageManager.GetStringAsync("String_Karma", token: GenericToken).ConfigureAwait(false);
                                int intMaxQualityAmount = CharacterObjectSettings.QualityKarmaLimit;

                                // Add the cost of the Quality that is being added.
                                int intBP = objQuality.BP;

                                if (objQuality.Type == QualityType.Negative)
                                {
                                    // Check if adding this Quality would put the character over their limit.
                                    if (!CharacterObjectSettings.ExceedNegativeQualities)
                                    {
                                        intBP += CharacterObject.NegativeQualityLimitKarma;
                                        if (intBP < intMaxQualityAmount * -1)
                                        {
                                            Program.ShowScrollableMessageBox(
                                                this,
                                                string.Format(GlobalSettings.CultureInfo,
                                                              await LanguageManager
                                                                    .GetStringAsync("Message_NegativeQualityLimit", token: GenericToken)
                                                                    .ConfigureAwait(false), strAmount),
                                                await LanguageManager
                                                      .GetStringAsync("MessageTitle_NegativeQualityLimit", token: GenericToken)
                                                      .ConfigureAwait(false), MessageBoxButtons.OK,
                                                MessageBoxIcon.Information);
                                            blnAddItem = false;
                                        }
                                        else if (CharacterObject.MetatypeBP < 0
                                                 && intBP + CharacterObject.MetatypeBP < intMaxQualityAmount * -1)
                                        {
                                            Program.ShowScrollableMessageBox(
                                                this,
                                                string.Format(GlobalSettings.CultureInfo,
                                                              await LanguageManager
                                                                    .GetStringAsync(
                                                                        "Message_NegativeQualityAndMetatypeLimit", token: GenericToken)
                                                                    .ConfigureAwait(false), strAmount),
                                                await LanguageManager
                                                      .GetStringAsync("MessageTitle_NegativeQualityLimit", token: GenericToken)
                                                      .ConfigureAwait(false), MessageBoxButtons.OK,
                                                MessageBoxIcon.Information);
                                            blnAddItem = false;
                                        }
                                    }
                                }
                                // Check if adding this Quality would put the character over their limit.
                                else if (!CharacterObjectSettings.ExceedPositiveQualities)
                                {
                                    intBP += CharacterObject.PositiveQualityLimitKarma;
                                    if (intBP > intMaxQualityAmount)
                                    {
                                        Program.ShowScrollableMessageBox(this,
                                                               string.Format(
                                                                   GlobalSettings.CultureInfo,
                                                                   await LanguageManager
                                                                         .GetStringAsync("Message_PositiveQualityLimit", token: GenericToken)
                                                                         .ConfigureAwait(false), strAmount),
                                                               await LanguageManager
                                                                     .GetStringAsync(
                                                                         "MessageTitle_PositiveQualityLimit", token: GenericToken)
                                                                     .ConfigureAwait(false),
                                                               MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        blnAddItem = false;
                                    }
                                }
                            }

                            if (blnAddItem)
                            {
                                //to avoid an System.InvalidOperationException: Cannot change ObservableCollection during a CollectionChanged event.
                                Interlocked.Increment(ref _intSkipQualityLevelChanged);
                                try
                                {
                                    await CharacterObject.Qualities.AddAsync(objQuality, GenericToken).ConfigureAwait(false);
                                }
                                finally
                                {
                                    Interlocked.Decrement(ref _intSkipQualityLevelChanged);
                                }

                                // Add any created Weapons to the character.
                                foreach (Weapon objWeapon in lstWeapons)
                                {
                                    await CharacterObject.Weapons.AddAsync(objWeapon, GenericToken).ConfigureAwait(false);
                                }
                            }
                            else
                            {
                                // If the Quality could not be added, remove the Improvements that were added during the Quality Creation process.
                                await ImprovementManager
                                      .RemoveImprovementsAsync(CharacterObject, Improvement.ImprovementSource.Quality,
                                                               objQuality.InternalId, token: GenericToken).ConfigureAwait(false);
                                await objQuality.DisposeAsync().ConfigureAwait(false);
                                await UpdateQualityLevelValue(objSelectedQuality, GenericToken).ConfigureAwait(false);
                                break;
                            }
                        }

                        // Removing levels
                        for (; intSelectedLevels < intCurrentLevels; --intCurrentLevels)
                        {
                            Quality objInvisibleQuality = await CharacterObject.Qualities.FirstOrDefaultAsync(
                                x => x.SourceID == objSelectedQuality.SourceID
                                     && x.Extra == objSelectedQuality.Extra
                                     && x.SourceName == objSelectedQuality.SourceName
                                     && x.InternalId != objSelectedQuality.InternalId
                                     && !ReferenceEquals(x, objSelectedQuality), GenericToken).ConfigureAwait(false);
                            if (objInvisibleQuality == null
                                || !await RemoveQuality(objInvisibleQuality, false, false, GenericToken)
                                    .ConfigureAwait(false))
                            {
                                blnDoRemoveQuality = true;
                                break;
                            }
                        }
                    }
                    finally
                    {
                        await objLocker.DisposeAsync().ConfigureAwait(false);
                    }
                }

                if (blnDoRemoveQuality && !await RemoveQuality(objSelectedQuality, false, false, GenericToken)
                        .ConfigureAwait(false))
                {
                    await UpdateQualityLevelValue(objSelectedQuality, GenericToken)
                        .ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        #endregion Additional Common Tab Control Events

        #region Additional Cyberware Tab Control Events

        private async void treCyberware_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedCyberware(GenericToken).ConfigureAwait(false);
                await DoRefreshPasteStatus(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboCyberwareGrade_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (IsRefreshing || IsLoading)
                return;
            try
            {
                string strSelectedGrade = await cboCyberwareGrade
                                                .DoThreadSafeFuncAsync(x => x.SelectedValue?.ToString(), GenericToken)
                                                .ConfigureAwait(false);
                if (string.IsNullOrEmpty(strSelectedGrade) ||
                    !(await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is Cyberware objCyberware))
                    return;
                // Locate the selected piece of Cyberware.
                Grade objNewGrade = CharacterObject.GetGrades(objCyberware.SourceType, token: GenericToken)
                                                   .FirstOrDefault(x => x.Name == strSelectedGrade);
                if (objNewGrade == null)
                    return;
                // Updated the selected Cyberware Grade.
                objCyberware.Grade = objNewGrade;

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void chkPrototypeTranshuman_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is Cyberware objCyberware))
                    return;
                // Update the selected Cyberware Rating.
                objCyberware.PrototypeTranshuman = await chkPrototypeTranshuman
                                                         .DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                         .ConfigureAwait(false);

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void nudCyberwareRating_ValueChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                TreeNode objSelectedNode = await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                             .ConfigureAwait(false);
                switch (objSelectedNode?.Tag)
                {
                    // Locate the selected piece of Cyberware.
                    case Cyberware objCyberware:
                    {
                        // Update the selected Cyberware Rating.
                        objCyberware.Rating = await nudCyberwareRating
                                                    .DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                    .ConfigureAwait(false);

                        // See if a Bonus node exists.
                        if (objCyberware.Bonus?.InnerXml.Contains("Rating") == true
                            || objCyberware.PairBonus?.InnerXml.Contains("Rating") == true || objCyberware.WirelessOn
                            && objCyberware.WirelessBonus?.InnerXml.Contains("Rating") == true)
                        {
                            // If the Bonus contains "Rating", remove the existing Improvements and create new ones.
                            await ImprovementManager
                                  .RemoveImprovementsAsync(CharacterObject, objCyberware.SourceType,
                                                           objCyberware.InternalId, token: GenericToken).ConfigureAwait(false);
                            if (objCyberware.Bonus != null)
                                await ImprovementManager.CreateImprovementsAsync(
                                    CharacterObject, objCyberware.SourceType, objCyberware.InternalId,
                                    objCyberware.Bonus, objCyberware.Rating,
                                    await objCyberware.GetCurrentDisplayNameShortAsync(GenericToken)
                                                      .ConfigureAwait(false), token: GenericToken).ConfigureAwait(false);
                            if (objCyberware.WirelessOn && objCyberware.WirelessBonus != null)
                                await ImprovementManager.CreateImprovementsAsync(
                                    CharacterObject, objCyberware.SourceType, objCyberware.InternalId,
                                    objCyberware.WirelessBonus, objCyberware.Rating,
                                    await objCyberware.GetCurrentDisplayNameShortAsync(GenericToken)
                                                      .ConfigureAwait(false), token: GenericToken).ConfigureAwait(false);

                            if (objCyberware.PairBonus != null)
                            {
                                List<Cyberware> lstPairableCyberwares = CharacterObject.Cyberware
                                    .DeepWhere(x => x.Children,
                                               x => objCyberware.IncludePair.Contains(x.Name)
                                                    && x.Extra == objCyberware.Extra && x.IsModularCurrentlyEquipped)
                                    .ToList();
                                int intCyberwaresCount = lstPairableCyberwares.Count;
                                // Need to use slightly different logic if this cyberware has a location (Left or Right) and only pairs with itself because Lefts can only be paired with Rights and Rights only with Lefts
                                if (!string.IsNullOrEmpty(objCyberware.Location)
                                    && objCyberware.IncludePair.All(x => x == objCyberware.Name))
                                {
                                    int intMatchLocationCount = 0;
                                    int intNotMatchLocationCount = 0;
                                    foreach (Cyberware objPairableCyberware in lstPairableCyberwares)
                                    {
                                        if (objPairableCyberware.Location != objCyberware.Location)
                                            ++intNotMatchLocationCount;
                                        else
                                            ++intMatchLocationCount;
                                    }

                                    // Set the count to the total number of cyberwares in matching pairs, which would mean 2x the number of whichever location contains the fewest members (since every single one of theirs would have a pair)
                                    intCyberwaresCount = Math.Min(intNotMatchLocationCount, intMatchLocationCount) * 2;
                                }

                                foreach (Cyberware objLoopCyberware in lstPairableCyberwares)
                                {
                                    await ImprovementManager
                                          .RemoveImprovementsAsync(CharacterObject, objLoopCyberware.SourceType,
                                                                   objLoopCyberware.InternalId + "Pair", token: GenericToken)
                                          .ConfigureAwait(false);
                                    // Go down the list and create pair bonuses for every second item
                                    if (intCyberwaresCount > 0 && (intCyberwaresCount & 1) == 0)
                                    {
                                        await ImprovementManager.CreateImprovementsAsync(
                                            CharacterObject, objLoopCyberware.SourceType,
                                            objLoopCyberware.InternalId + "Pair", objLoopCyberware.PairBonus,
                                            objLoopCyberware.Rating,
                                            await objLoopCyberware.GetCurrentDisplayNameShortAsync(GenericToken)
                                                                  .ConfigureAwait(false), token: GenericToken).ConfigureAwait(false);
                                    }

                                    --intCyberwaresCount;
                                }
                            }

                            if (!objCyberware.IsModularCurrentlyEquipped)
                                await objCyberware.ChangeModularEquipAsync(false, token: GenericToken)
                                                  .ConfigureAwait(false);
                        }

                        string strText = await objCyberware.GetCurrentDisplayNameAsync(GenericToken)
                                                           .ConfigureAwait(false);
                        await treCyberware.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                                          .ConfigureAwait(false);
                        break;
                    }
                    case Gear objGear:
                    {
                        // Find the selected piece of Gear.
                        if (objGear.Category == "Foci" || objGear.Category == "Metamagic Foci"
                                                       || objGear.Category == "Stacked Focus")
                        {
                            if (!await objGear
                                       .RefreshSingleFocusRating(
                                           treFoci,
                                           await nudCyberwareRating
                                                 .DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                 .ConfigureAwait(false), GenericToken).ConfigureAwait(false))
                            {
                                IsRefreshing = true;
                                try
                                {
                                    await nudCyberwareRating
                                          .DoThreadSafeAsync(x => x.ValueAsInt = objGear.Rating, GenericToken)
                                          .ConfigureAwait(false);
                                }
                                finally
                                {
                                    IsRefreshing = false;
                                }

                                return;
                            }
                        }
                        else
                            objGear.Rating = await nudCyberwareRating
                                                   .DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                   .ConfigureAwait(false);

                        // See if a Bonus node exists.
                        if (objGear.Bonus != null || objGear.WirelessOn && objGear.WirelessBonus != null)
                        {
                            await ImprovementManager.RemoveImprovementsAsync(
                                                        CharacterObject, Improvement.ImprovementSource.Gear,
                                                        objGear.InternalId, token: GenericToken)
                                                    .ConfigureAwait(false);
                            if (!string.IsNullOrEmpty(objGear.Extra))
                            {
                                ImprovementManager.ForcedValue = objGear.Extra.TrimEndOnce(", Hacked");
                            }

                            if (objGear.Bonus != null)
                                await ImprovementManager.CreateImprovementsAsync(
                                                            CharacterObject, Improvement.ImprovementSource.Gear,
                                                            objGear.InternalId,
                                                            objGear.Bonus, objGear.Rating,
                                                            await objGear.GetCurrentDisplayNameShortAsync(GenericToken)
                                                                         .ConfigureAwait(false), token: GenericToken)
                                                        .ConfigureAwait(false);
                            if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                await ImprovementManager.CreateImprovementsAsync(
                                                            CharacterObject, Improvement.ImprovementSource.Gear,
                                                            objGear.InternalId,
                                                            objGear.WirelessBonus, objGear.Rating,
                                                            await objGear.GetCurrentDisplayNameShortAsync(GenericToken)
                                                                         .ConfigureAwait(false), token: GenericToken)
                                                        .ConfigureAwait(false);

                            if (!objGear.Equipped)
                                await objGear.ChangeEquippedStatusAsync(false, token: GenericToken)
                                             .ConfigureAwait(false);
                        }

                        string strName = await objGear.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                        await treCyberware.DoThreadSafeAsync(() => objSelectedNode.Text = strName, GenericToken)
                                          .ConfigureAwait(false);
                        break;
                    }
                }

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        #endregion Additional Cyberware Tab Control Events

        #region Additional Street Gear Tab Control Events

        private async void treWeapons_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedWeapon(GenericToken).ConfigureAwait(false);
                await DoRefreshPasteStatus(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void treWeapons_ItemDrag(object sender, ItemDragEventArgs e)
        {
            string strSelectedWeapon = treWeapons.SelectedNode?.Tag.ToString();
            if (string.IsNullOrEmpty(strSelectedWeapon) || treWeapons.SelectedNode.Level != 1)
                return;

            // Do not allow the root element to be moved.
            if (strSelectedWeapon == "Node_SelectedWeapons")
                return;
            _intDragLevel = treWeapons.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treWeapons_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private async void treWeapons_DragDrop(object sender, DragEventArgs e)
        {
            try
            {
                await DoTreeDragDrop(sender, e, treWeapons, ItemTreeViewTypes.Weapons, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void treWeapons_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView) sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView) sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (objNode.Level <= _intDragLevel)
                objNode.BackColor = ColorManager.ControlDarker;

            // Clear the background colour for all other Nodes.
            treWeapons.ClearNodeBackground(objNode);
        }

        private async void treArmor_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedArmor(GenericToken).ConfigureAwait(false);
                await DoRefreshPasteStatus(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void treArmor_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treArmor.SelectedNode == null || treArmor.SelectedNode.Level != 1)
                return;

            _intDragLevel = treArmor.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treArmor_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private async void treArmor_DragDrop(object sender, DragEventArgs e)
        {
            try
            {
                await DoTreeDragDrop(sender, e, treArmor, ItemTreeViewTypes.Armor, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void treArmor_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView) sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView) sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (objNode.Level <= _intDragLevel)
                objNode.BackColor = ColorManager.ControlDarker;

            // Clear the background colour for all other Nodes.
            treArmor.ClearNodeBackground(objNode);
        }

        private async void treLifestyles_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedLifestyle(GenericToken).ConfigureAwait(false);
                await DoRefreshPasteStatus(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void treLifestyles_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                if (!(await treLifestyles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                         .ConfigureAwait(false) is Lifestyle objLifestyle))
                    return;

                string strGuid = objLifestyle.InternalId;
                int intMonths = objLifestyle.Increments;
                int intPosition = await CharacterObject.Lifestyles
                                                       .IndexOfAsync(
                                                           await CharacterObject.Lifestyles.FirstOrDefaultAsync(
                                                               p => p.InternalId == strGuid,
                                                               GenericToken).ConfigureAwait(false),
                                                           GenericToken)
                                                       .ConfigureAwait(false);

                if (objLifestyle.StyleType != LifestyleType.Standard)
                {
                    Lifestyle newLifestyle = objLifestyle;
                    // Edit Advanced Lifestyle.
                    using (ThreadSafeForm<SelectLifestyleAdvanced> frmPickLifestyle
                           = await ThreadSafeForm<SelectLifestyleAdvanced>.GetAsync(
                                                                              () => new SelectLifestyleAdvanced(
                                                                                  CharacterObject, newLifestyle),
                                                                              GenericToken)
                                                                          .ConfigureAwait(false))
                    {
                        DialogResult eResult = await frmPickLifestyle.ShowDialogSafeAsync(this, GenericToken)
                                                                     .ConfigureAwait(false);
                        Lifestyle objSelected = frmPickLifestyle.MyForm.SelectedLifestyle;
                        if (eResult == DialogResult.Cancel)
                        {
                            if (objSelected != null && !ReferenceEquals(objLifestyle, objSelected))
                                await objSelected.DisposeAsync().ConfigureAwait(false);
                            return;
                        }

                        // Update the selected Lifestyle and refresh the list.
                        objLifestyle = objSelected;
                    }
                }
                else
                {
                    // Edit Basic Lifestyle.
                    using (ThreadSafeForm<SelectLifestyle> frmPickLifestyle
                           = await ThreadSafeForm<SelectLifestyle>
                                   .GetAsync(() => new SelectLifestyle(CharacterObject), GenericToken)
                                   .ConfigureAwait(false))
                    {
                        frmPickLifestyle.MyForm.SetLifestyle(objLifestyle);
                        DialogResult eResult = await frmPickLifestyle.ShowDialogSafeAsync(this, GenericToken)
                                                                     .ConfigureAwait(false);
                        Lifestyle objSelected = frmPickLifestyle.MyForm.SelectedLifestyle;
                        if (eResult == DialogResult.Cancel)
                        {
                            if (objSelected != null)
                                await objSelected.DisposeAsync().ConfigureAwait(false);
                            return;
                        }

                        // Update the selected Lifestyle and refresh the list.
                        objLifestyle = objSelected;
                    }
                }

                objLifestyle.Increments = intMonths;

                objLifestyle.SetInternalId(strGuid);
                CharacterObject.Lifestyles[intPosition] = objLifestyle;

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        /*
        private void treLifestyles_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treLifestyles.SelectedNode == null || treLifestyles.SelectedNode.Level != 1)
                return;

            _intDragLevel = treLifestyles.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treLifestyles_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treLifestyles_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else
            {
                intNewIndex = treLifestyles.Nodes[treLifestyles.Nodes.Count - 1].Nodes.Count;
                nodDestination = treLifestyles.Nodes[treLifestyles.Nodes.Count - 1];
            }

            // Put the lifestyle in the right location (or lack thereof)
            CommonFunctions.MoveLifestyleNode(CharacterObject, intNewIndex, nodDestination, treLifestyles);

            // Put the lifestyle in the right order in the tree
            MoveTreeNode(treLifestyles.FindNodeByTag(objSelected?.Tag), intNewIndex);
            // Update the entire tree to prevent any holes in the sort order
            treLifestyles.CacheSortOrder();

            // Clear the background color for all Nodes.
            treLifestyles.ClearNodeBackground(null);

            await SetDirty(true);
        }
        */

        private void treLifestyles_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView) sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView) sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (objNode.Level <= _intDragLevel)
                objNode.BackColor = ColorManager.ControlDarker;

            // Clear the background colour for all other Nodes.
            treLifestyles.ClearNodeBackground(objNode);
        }

        private async void nudLifestyleMonths_ValueChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                // Locate the selected Lifestyle.
                if (!(await treLifestyles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                         .ConfigureAwait(false) is Lifestyle objLifestyle))
                    return;

                IsRefreshing = true;
                try
                {
                    objLifestyle.Increments = await nudLifestyleMonths
                                                    .DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                    .ConfigureAwait(false);
                }
                finally
                {
                    IsRefreshing = false;
                }

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void treGear_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedGear(GenericToken).ConfigureAwait(false);
                await DoRefreshPasteStatus(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void nudGearRating_ValueChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;

            try
            {
                if (!(await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                   .ConfigureAwait(false) is Gear objGear))
                    return;

                if (objGear.Category == "Foci" || objGear.Category == "Metamagic Foci"
                                               || objGear.Category == "Stacked Focus")
                {
                    if (!await objGear
                               .RefreshSingleFocusRating(
                                   treFoci,
                                   await nudGearRating.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                      .ConfigureAwait(false), GenericToken).ConfigureAwait(false))
                    {
                        IsRefreshing = true;
                        try
                        {
                            await nudGearRating.DoThreadSafeAsync(x => x.ValueAsInt = objGear.Rating, GenericToken)
                                               .ConfigureAwait(false);
                        }
                        finally
                        {
                            IsRefreshing = false;
                        }

                        return;
                    }
                }
                else
                    objGear.Rating = await nudGearRating.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                        .ConfigureAwait(false);

                if (objGear.Bonus != null || objGear.WirelessOn && objGear.WirelessBonus != null)
                {
                    await ImprovementManager.RemoveImprovementsAsync(CharacterObject,
                                                                     Improvement.ImprovementSource.Gear,
                                                                     objGear.InternalId, token: GenericToken).ConfigureAwait(false);
                    if (!string.IsNullOrEmpty(objGear.Extra))
                    {
                        ImprovementManager.ForcedValue = objGear.Extra.TrimEndOnce(", Hacked");
                    }

                    if (objGear.Bonded || (objGear.Category != "Foci" && objGear.Category != "Metamagic Foci"
                                                                      && objGear.Category != "Stacked Focus"))
                    {
                        if (objGear.Bonus != null)
                            await ImprovementManager.CreateImprovementsAsync(
                                                        CharacterObject, Improvement.ImprovementSource.Gear,
                                                        objGear.InternalId, objGear.Bonus,
                                                        objGear.Rating,
                                                        await objGear.GetCurrentDisplayNameShortAsync(GenericToken)
                                                                     .ConfigureAwait(false), token: GenericToken)
                                                    .ConfigureAwait(false);
                        if (objGear.WirelessOn && objGear.WirelessBonus != null)
                            await ImprovementManager.CreateImprovementsAsync(
                                                        CharacterObject, Improvement.ImprovementSource.Gear,
                                                        objGear.InternalId,
                                                        objGear.WirelessBonus, objGear.Rating,
                                                        await objGear.GetCurrentDisplayNameShortAsync(GenericToken)
                                                                     .ConfigureAwait(false), token: GenericToken)
                                                    .ConfigureAwait(false);
                    }

                    if (!objGear.Equipped)
                        await objGear.ChangeEquippedStatusAsync(false, token: GenericToken).ConfigureAwait(false);
                }

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void nudGearQty_ValueChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                // Attempt to locate the selected piece of Gear.
                if (!(await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                   .ConfigureAwait(false) is Gear objGear))
                    return;
                objGear.Quantity = await nudGearQty.DoThreadSafeFuncAsync(x => x.Value, GenericToken)
                                                   .ConfigureAwait(false);

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void nudDrugQty_ValueChanged(object sender, EventArgs e)
        {
            // Don't attempt to do anything while the data is still being populated.
            if (IsLoading || IsRefreshing)
                return;

            try
            {
                if (!(await treCustomDrugs.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                          .ConfigureAwait(false) is Drug objDrug))
                    return;
                objDrug.Quantity = await nudDrugQty.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                   .ConfigureAwait(false);
                await RefreshSelectedDrug(GenericToken).ConfigureAwait(false);

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void chkArmorEquipped_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;

            try
            {
                object objSelected = await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                                   .ConfigureAwait(false);
                if (objSelected == null)
                    return;

                bool blnChecked = await chkArmorEquipped.DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                        .ConfigureAwait(false);

                // Locate the selected Armor or Armor Mod.
                switch (objSelected)
                {
                    case Armor objArmor:
                        objArmor.Equipped = blnChecked;
                        break;

                    case ArmorMod objMod:
                        objMod.Equipped = blnChecked;
                        break;

                    case Gear objGear:
                        objGear.Equipped = blnChecked;
                        if (blnChecked)
                        {
                            CharacterObject.Armor.FindArmorGear(objGear.InternalId, out Armor objParentArmor,
                                                                out ArmorMod objParentMod);
                            // Add the Gear's Improvements to the character.
                            if (objParentArmor.Equipped && objParentMod?.Equipped != false)
                            {
                                await objGear.ChangeEquippedStatusAsync(true, token: GenericToken)
                                             .ConfigureAwait(false);
                            }
                        }
                        else
                        {
                            await objGear.ChangeEquippedStatusAsync(false, token: GenericToken).ConfigureAwait(false);
                        }

                        break;

                    default:
                        return;
                }

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void chkWeaponEquipped_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;

            try
            {
                object objSelected = await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                                     .ConfigureAwait(false);
                if (objSelected == null)
                    return;

                bool blnChecked = await chkWeaponEquipped.DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                         .ConfigureAwait(false);
                // Determine if this is a Weapon.
                switch (objSelected)
                {
                    case Weapon objWeapon:
                        objWeapon.Equipped = blnChecked;
                        break;

                    case Gear objGear:
                        // Find the selected Gear.
                        objGear.Equipped = blnChecked;
                        await objGear.ChangeEquippedStatusAsync(blnChecked, token: GenericToken).ConfigureAwait(false);
                        break;

                    case WeaponAccessory objAccessory:
                        objAccessory.Equipped = blnChecked;
                        break;

                    default:
                        return;
                }

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void chkIncludedInWeapon_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                // Locate the selected Weapon Accessory or Modification.
                if (!(await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                      .ConfigureAwait(false) is WeaponAccessory objAccessory))
                    return;
                objAccessory.IncludedInWeapon = await chkIncludedInWeapon
                                                      .DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                      .ConfigureAwait(false);

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void treGear_ItemDrag(object sender, ItemDragEventArgs e)
        {
            string strSelected = treGear.SelectedNode?.Tag.ToString();
            if (string.IsNullOrEmpty(strSelected) || strSelected == "Node_SelectedGear")
                return;
            if (e.Button == MouseButtons.Left)
            {
                if (treGear.SelectedNode.Level > 1 || treGear.SelectedNode.Level < 0)
                    return;
                DragButton = MouseButtons.Left;
            }
            else
            {
                if (treGear.SelectedNode.Level == 0)
                    return;
                DragButton = MouseButtons.Right;
            }

            _intDragLevel = treGear.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treGear_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private async void treGear_DragDrop(object sender, DragEventArgs e)
        {
            try
            {
                await DoTreeDragDrop(sender, e, treGear, ItemTreeViewTypes.Gear, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void treGear_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView) sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView) sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (DragButton == MouseButtons.Left)
            {
                if (objNode.Level <= _intDragLevel)
                    objNode.BackColor = ColorManager.ControlDarker;
            }
            else
                objNode.BackColor = ColorManager.ControlDarker;

            // Clear the background color for all other Nodes.
            treGear.ClearNodeBackground(objNode);
        }

        private async void chkGearEquipped_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;

            try
            {
                // Attempt to locate the selected piece of Gear.
                if (!(await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken).ConfigureAwait(false)
                        is Gear objSelectedGear))
                    return;
                bool blnChecked = await chkGearEquipped.DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                       .ConfigureAwait(false);
                objSelectedGear.Equipped = blnChecked;
                await objSelectedGear.ChangeEquippedStatusAsync(blnChecked, token: GenericToken).ConfigureAwait(false);

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void chkGearHomeNode_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing || treGear.SelectedNode == null)
                return;
            if (!(treGear.SelectedNode?.Tag is IHasMatrixAttributes objCommlink))
                return;
            objCommlink.SetHomeNode(CharacterObject, chkGearHomeNode.Checked);
        }

        private void chkArmorHomeNode_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing || treArmor.SelectedNode == null)
                return;
            if (!(treArmor.SelectedNode?.Tag is IHasMatrixAttributes objCommlink))
                return;
            objCommlink.SetHomeNode(CharacterObject, chkArmorHomeNode.Checked);
        }

        private void chkWeaponHomeNode_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing || treWeapons.SelectedNode == null)
                return;
            if (!(treWeapons.SelectedNode?.Tag is IHasMatrixAttributes objCommlink))
                return;
            objCommlink.SetHomeNode(CharacterObject, chkWeaponHomeNode.Checked);
        }

        private void chkCyberwareHomeNode_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            if (!(treCyberware.SelectedNode?.Tag is IHasMatrixAttributes objCommlink))
                return;
            objCommlink.SetHomeNode(CharacterObject, chkCyberwareHomeNode.Checked);
        }

        private async void chkCommlinks_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                await RefreshGears(treGear, cmsGearLocation, cmsGear, cmsGearAllowRename,
                                   await chkCommlinks.DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                     .ConfigureAwait(false), false, token: GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void chkGearActiveCommlink_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing || treGear.SelectedNode == null)
                return;

            // Attempt to locate the selected piece of Gear.
            if (!(treGear.SelectedNode?.Tag is IHasMatrixAttributes objSelectedCommlink))
                return;
            objSelectedCommlink.SetActiveCommlink(CharacterObject, chkGearActiveCommlink.Checked);
        }

        private void chkArmorActiveCommlink_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing || treArmor.SelectedNode == null)
                return;

            // Attempt to locate the selected piece of Gear.
            if (!(treArmor.SelectedNode?.Tag is IHasMatrixAttributes objSelectedCommlink))
                return;
            objSelectedCommlink.SetActiveCommlink(CharacterObject, chkArmorActiveCommlink.Checked);
        }

        private void chkWeaponActiveCommlink_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing || treWeapons.SelectedNode == null)
                return;

            // Attempt to locate the selected piece of Gear.
            if (!(treWeapons.SelectedNode?.Tag is IHasMatrixAttributes objSelectedCommlink))
                return;
            objSelectedCommlink.SetActiveCommlink(CharacterObject, chkWeaponActiveCommlink.Checked);
        }

        private void chkCyberwareActiveCommlink_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;

            if (!(treCyberware.SelectedNode?.Tag is IHasMatrixAttributes objSelectedCommlink))
                return;
            objSelectedCommlink.SetActiveCommlink(CharacterObject, chkCyberwareActiveCommlink.Checked);
        }

        private void chkVehicleActiveCommlink_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;

            if (!(treVehicles.SelectedNode?.Tag is IHasMatrixAttributes objSelectedCommlink))
                return;
            objSelectedCommlink.SetActiveCommlink(CharacterObject, chkVehicleActiveCommlink.Checked);
        }

        private async void cboGearAttack_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing || !await cboGearAttack.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                        .ConfigureAwait(false))
                    return;

                if (!(await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                   .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                            CharacterObject, cboGearAttack, cboGearAttack,
                            cboGearSleaze, cboGearDataProcessing, cboGearFirewall, GenericToken).ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboGearSleaze_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing || !await cboGearSleaze.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                        .ConfigureAwait(false))
                    return;

                if (!(await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                   .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                            CharacterObject, cboGearSleaze, cboGearAttack,
                            cboGearSleaze, cboGearDataProcessing, cboGearFirewall, GenericToken).ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboGearDataProcessing_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing || !await cboGearDataProcessing.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                                .ConfigureAwait(false))
                    return;

                if (!(await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                   .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                            CharacterObject, cboGearDataProcessing, cboGearAttack,
                            cboGearSleaze, cboGearDataProcessing, cboGearFirewall, GenericToken).ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboGearFirewall_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing || !await cboGearFirewall.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                          .ConfigureAwait(false))
                    return;

                if (!(await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                   .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                            CharacterObject, cboGearFirewall, cboGearAttack,
                            cboGearSleaze, cboGearDataProcessing, cboGearFirewall, GenericToken).ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboVehicleAttack_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing || !await cboVehicleAttack.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                           .ConfigureAwait(false))
                    return;

                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                                           CharacterObject, cboVehicleAttack, cboVehicleAttack,
                                           cboVehicleSleaze, cboVehicleDataProcessing, cboVehicleFirewall, GenericToken)
                                       .ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboVehicleSleaze_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing || !await cboVehicleSleaze.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                           .ConfigureAwait(false))
                    return;

                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                                           CharacterObject, cboVehicleSleaze, cboVehicleAttack,
                                           cboVehicleSleaze, cboVehicleDataProcessing, cboVehicleFirewall, GenericToken)
                                       .ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboVehicleFirewall_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing || !await cboVehicleFirewall.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                             .ConfigureAwait(false))
                    return;

                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                                           CharacterObject, cboVehicleFirewall, cboVehicleAttack,
                                           cboVehicleSleaze, cboVehicleDataProcessing, cboVehicleFirewall, GenericToken)
                                       .ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboVehicleDataProcessing_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing || !await cboVehicleDataProcessing.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                                   .ConfigureAwait(false))
                    return;

                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                                           CharacterObject, cboVehicleDataProcessing, cboVehicleAttack,
                                           cboVehicleSleaze, cboVehicleDataProcessing, cboVehicleFirewall, GenericToken)
                                       .ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboCyberwareAttack_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing || !await cboCyberwareAttack.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                             .ConfigureAwait(false))
                    return;

                if (!(await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                                           CharacterObject, cboCyberwareAttack, cboCyberwareAttack,
                                           cboCyberwareSleaze, cboCyberwareDataProcessing, cboCyberwareFirewall,
                                           GenericToken)
                                       .ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboCyberwareSleaze_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing || !await cboCyberwareSleaze.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                             .ConfigureAwait(false))
                    return;

                if (!(await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                                           CharacterObject, cboCyberwareSleaze, cboCyberwareAttack,
                                           cboCyberwareSleaze, cboCyberwareDataProcessing, cboCyberwareFirewall,
                                           GenericToken)
                                       .ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboCyberwareDataProcessing_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing
                    || !await cboCyberwareDataProcessing.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                        .ConfigureAwait(false))
                    return;

                if (!(await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                                           CharacterObject, cboCyberwareDataProcessing, cboCyberwareAttack,
                                           cboCyberwareSleaze, cboCyberwareDataProcessing, cboCyberwareFirewall,
                                           GenericToken)
                                       .ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboCyberwareFirewall_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (IsRefreshing || !await cboCyberwareFirewall.DoThreadSafeFuncAsync(x => x.Enabled, GenericToken)
                                                               .ConfigureAwait(false))
                    return;

                if (!(await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is
                        IHasMatrixAttributes objTarget))
                    return;

                IsRefreshing = true;
                try
                {
                    if (await objTarget.ProcessMatrixAttributeComboBoxChangeAsync(
                                           CharacterObject, cboCyberwareFirewall, cboCyberwareAttack,
                                           cboCyberwareSleaze, cboCyberwareDataProcessing, cboCyberwareFirewall,
                                           GenericToken)
                                       .ConfigureAwait(false))
                    {
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                }
                finally
                {
                    IsRefreshing = false;
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        #endregion Additional Street Gear Tab Control Events

        #region Additional Drug Tab Control Events

        private async void treCustomDrugs_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedDrug(GenericToken).ConfigureAwait(false);
                await DoRefreshPasteStatus(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        #endregion Additional Drug Tab Control Events

        #region Additional Vehicle Tab Control Events

        private async void treVehicles_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedVehicle(GenericToken).ConfigureAwait(false);
                await DoRefreshPasteStatus(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void treVehicles_ItemDrag(object sender, ItemDragEventArgs e)
        {
            switch (treVehicles.SelectedNode?.Tag)
            {
                // Determine if this is a piece of Gear or a Vehicle. If not, don't let the user drag it.
                case Gear _:
                    DragButton = e.Button;
                    DraggingGear = true;
                    _intDragLevel = treVehicles.SelectedNode.Level;
                    DoDragDrop(e.Item, DragDropEffects.Move);
                    break;

                case Vehicle _:
                    DragButton = e.Button;
                    DraggingGear = false;
                    _intDragLevel = treVehicles.SelectedNode.Level;
                    DoDragDrop(e.Item, DragDropEffects.Move);
                    break;
            }
        }

        private void treVehicles_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private async void treVehicles_DragDrop(object sender, DragEventArgs e)
        {
            try
            {
                await DoTreeDragDrop(sender, e, treVehicles, ItemTreeViewTypes.Vehicles, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void treVehicles_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView) sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView) sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (DragButton == MouseButtons.Left)
            {
                if (objNode.Level <= _intDragLevel)
                    objNode.BackColor = ColorManager.ControlDarker;
            }
            else
                objNode.BackColor = ColorManager.ControlDarker;

            // Clear the background color for all other Nodes.
            treVehicles.ClearNodeBackground(objNode);
        }

        private async void nudVehicleRating_ValueChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;

            try
            {
                TreeNode objSelectedNode = await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                            .ConfigureAwait(false);
                switch (objSelectedNode?.Tag)
                {
                    case VehicleMod objMod:
                    {
                        objMod.Rating = await nudVehicleRating.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                              .ConfigureAwait(false);
                        string strText = await objMod.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                        await treVehicles.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                                         .ConfigureAwait(false);
                        break;
                    }
                    case Gear objGear:
                    {
                        if (objGear.Category == "Foci" || objGear.Category == "Metamagic Foci"
                                                       || objGear.Category == "Stacked Focus")
                        {
                            if (!await objGear.RefreshSingleFocusRating(
                                    treFoci,
                                    await nudVehicleRating.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                          .ConfigureAwait(false), GenericToken).ConfigureAwait(false))
                            {
                                IsRefreshing = true;
                                try
                                {
                                    await nudVehicleRating.DoThreadSafeAsync(
                                        x => x.ValueAsInt = objGear.Rating, GenericToken).ConfigureAwait(false);
                                }
                                finally
                                {
                                    IsRefreshing = false;
                                }

                                return;
                            }
                        }
                        else
                            objGear.Rating
                                = await nudVehicleRating.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                        .ConfigureAwait(false);

                        string strText = await objGear.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                        await treVehicles.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                                         .ConfigureAwait(false);
                        break;
                    }
                    case WeaponAccessory objAccessory:
                    {
                        objAccessory.Rating
                            = await nudVehicleRating.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                    .ConfigureAwait(false);
                        string strText = await objAccessory.GetCurrentDisplayNameAsync(GenericToken)
                                                           .ConfigureAwait(false);
                        await treVehicles.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                                         .ConfigureAwait(false);
                        break;
                    }
                    case Cyberware objCyberware:
                    {
                        objCyberware.Rating
                            = await nudVehicleRating.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                    .ConfigureAwait(false);
                        string strText = await objCyberware.GetCurrentDisplayNameAsync(GenericToken)
                                                           .ConfigureAwait(false);
                        await treVehicles.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                                         .ConfigureAwait(false);
                        break;
                    }
                    default:
                        return;
                }

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void chkVehicleWeaponAccessoryInstalled_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is ICanEquip
                        objEquippable))
                    return;
                objEquippable.Equipped
                    = await chkVehicleWeaponAccessoryInstalled.DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                              .ConfigureAwait(false);

                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void nudVehicleGearQty_ValueChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;

            try
            {
                TreeNode objSelectedNode = await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                            .ConfigureAwait(false);
                if (!(objSelectedNode?.Tag is Gear objGear))
                    return;
                objGear.Quantity = await nudVehicleGearQty.DoThreadSafeFuncAsync(x => x.Value, GenericToken)
                                                          .ConfigureAwait(false);
                string strText = await objGear.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                await treVehicles.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                                 .ConfigureAwait(false);

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void chkVehicleHomeNode_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            if (!(treVehicles.SelectedNode?.Tag is IHasMatrixAttributes objTarget))
                return;
            objTarget.SetHomeNode(CharacterObject, chkVehicleHomeNode.Checked);
        }

        #endregion Additional Vehicle Tab Control Events

        #region Additional Spells and Spirits Tab Control Events

        private async void treSpells_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedSpell(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void treFoci_AfterCheck(object sender, TreeViewEventArgs e)
        {
            try
            {
                if (!e.Node.Checked)
                {
                    if (!(e.Node.Tag is IHasInternalId objId))
                        return;
                    Focus objFocus = await CharacterObject
                                           .Foci.FindAsync(x => x.GearObject.InternalId == objId.InternalId,
                                                           GenericToken)
                                           .ConfigureAwait(false);

                    // Mark the Gear as not Bonded and remove any Improvements.
                    Gear objGear = objFocus?.GearObject;

                    if (objGear != null)
                    {
                        objGear.Bonded = false;
                        await ImprovementManager
                              .RemoveImprovementsAsync(CharacterObject, Improvement.ImprovementSource.Gear,
                                                       objGear.InternalId, token: GenericToken).ConfigureAwait(false);
                        await CharacterObject.Foci.RemoveAsync(objFocus, GenericToken).ConfigureAwait(false);
                    }
                    else
                    {
                        // This is a Stacked Focus.
                        StackedFocus objStack = await CharacterObject.StackedFoci
                                                                     .FindAsync(x => x.InternalId == objId.InternalId, GenericToken)
                                                                     .ConfigureAwait(false);

                        if (objStack != null)
                        {
                            objStack.Bonded = false;
                            await ImprovementManager
                                  .RemoveImprovementsAsync(CharacterObject, Improvement.ImprovementSource.StackedFocus,
                                                           objStack.InternalId, token: GenericToken).ConfigureAwait(false);
                        }
                    }
                }

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void treFoci_BeforeCheck(object sender, TreeViewCancelEventArgs e)
        {
            if (IsRefreshing)
                return;

            TreeView treViewToUse = e.Node.TreeView;

            try
            {
                // Don't bother to do anything since a node is being unchecked.
                if (await treViewToUse.DoThreadSafeFuncAsync(() => e.Node.Checked, GenericToken).ConfigureAwait(false))
                    return;

                string strSelectedId
                    = (await treViewToUse.DoThreadSafeFuncAsync(() => e.Node.Tag, GenericToken)
                                         .ConfigureAwait(false) as IHasInternalId)
                    ?.InternalId ?? string.Empty;

                // Locate the Focus that is being touched.
                Gear objSelectedFocus = CharacterObject.Gear.DeepFindById(strSelectedId);

                // Set the Focus count to 1 and get its current Rating (Force). This number isn't used in the following loops because it isn't yet checked or unchecked.
                int intFociCount = 1;
                int intFociTotal;

                if (objSelectedFocus != null)
                    intFociTotal = objSelectedFocus.Rating;
                else
                {
                    // This is a Stacked Focus.
                    intFociTotal = (await CharacterObject.StackedFoci.FindAsync(x => x.InternalId == strSelectedId, GenericToken)
                                                         .ConfigureAwait(false))
                        ?.TotalForce ?? 0;
                }

                await treViewToUse.DoThreadSafeAsync(y =>
                {
                    // Run through the list of items. Count the number of Foci the character would have bonded including this one, plus the total Force of all checked Foci.
                    foreach (TreeNode objNode in y.Nodes)
                    {
                        if (objNode.Checked)
                        {
                            string strNodeId = objNode.Tag.ToString();
                            ++intFociCount;
                            intFociTotal += CharacterObject
                                            .Gear.FirstOrDefault(x => x.InternalId == strNodeId && x.Bonded)
                                            ?.Rating ?? 0;
                            intFociTotal += CharacterObject.StackedFoci.Find(x => x.InternalId == strNodeId && x.Bonded)
                                                           ?.TotalForce ?? 0;
                        }
                    }
                }, GenericToken).ConfigureAwait(false);

                if (!CharacterObject.IgnoreRules)
                {
                    if (intFociTotal > (await (await CharacterObject.GetAttributeAsync("MAG", token: GenericToken)
                                                                    .ConfigureAwait(false))
                                              .GetTotalValueAsync(GenericToken).ConfigureAwait(false)) * 5 ||
                        CharacterObjectSettings.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept
                                                                           && CharacterObject.InitiateGrade + 1
                                                                           > (await (await CharacterObject
                                                                                   .GetAttributeAsync(
                                                                                       "MAGAdept", token: GenericToken)
                                                                                   .ConfigureAwait(false))
                                                                               .GetTotalValueAsync(GenericToken)
                                                                               .ConfigureAwait(false)))
                    {
                        Program.ShowScrollableMessageBox(
                            this,
                            await LanguageManager.GetStringAsync("Message_FocusMaximumForce", token: GenericToken).ConfigureAwait(false),
                            await LanguageManager.GetStringAsync("MessageTitle_FocusMaximum", token: GenericToken).ConfigureAwait(false),
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                        e.Cancel = true;
                        return;
                    }

                    if (intFociCount > (await (await CharacterObject.GetAttributeAsync("MAG", token: GenericToken)
                                                                    .ConfigureAwait(false))
                                              .GetTotalValueAsync(GenericToken).ConfigureAwait(false)) ||
                        CharacterObjectSettings.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept
                                                                           && intFociCount
                                                                           > (await (await CharacterObject
                                                                                   .GetAttributeAsync(
                                                                                       "MAGAdept", token: GenericToken)
                                                                                   .ConfigureAwait(false))
                                                                               .GetTotalValueAsync(GenericToken)
                                                                               .ConfigureAwait(false)))
                    {
                        Program.ShowScrollableMessageBox(
                            this,
                            await LanguageManager.GetStringAsync("Message_FocusMaximumNumber", token: GenericToken).ConfigureAwait(false),
                            await LanguageManager.GetStringAsync("MessageTitle_FocusMaximum", token: GenericToken).ConfigureAwait(false),
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                        e.Cancel = true;
                        return;
                    }
                }

                if (objSelectedFocus != null)
                {
                    Focus objFocus = new Focus(CharacterObject)
                    {
                        GearObject = objSelectedFocus
                    };

                    if (objSelectedFocus.Equipped && (objSelectedFocus.Bonus != null
                                                      || objSelectedFocus.WirelessOn
                                                      && objSelectedFocus.WirelessBonus != null))
                    {
                        if (!string.IsNullOrEmpty(objSelectedFocus.Extra))
                            ImprovementManager.ForcedValue = objSelectedFocus.Extra;
                        if (objSelectedFocus.Bonus != null)
                        {
                            if (!await ImprovementManager.CreateImprovementsAsync(
                                    CharacterObject, Improvement.ImprovementSource.Gear, objSelectedFocus.InternalId,
                                    objSelectedFocus.Bonus, objSelectedFocus.Rating,
                                    await objSelectedFocus.GetCurrentDisplayNameShortAsync(GenericToken)
                                                          .ConfigureAwait(false), token: GenericToken).ConfigureAwait(false))
                            {
                                // Clear created improvements
                                await objSelectedFocus.ChangeEquippedStatusAsync(false, token: GenericToken)
                                                      .ConfigureAwait(false);
                                await objSelectedFocus.ChangeEquippedStatusAsync(true, token: GenericToken)
                                                      .ConfigureAwait(false);
                                e.Cancel = true;
                                return;
                            }

                            objSelectedFocus.Extra = ImprovementManager.SelectedValue;
                        }

                        if (objSelectedFocus.WirelessOn
                            && objSelectedFocus.WirelessBonus != null
                            && !await ImprovementManager.CreateImprovementsAsync(
                                CharacterObject, Improvement.ImprovementSource.Gear, objSelectedFocus.InternalId,
                                objSelectedFocus.WirelessBonus, objSelectedFocus.Rating,
                                await objSelectedFocus.GetCurrentDisplayNameShortAsync(GenericToken)
                                                      .ConfigureAwait(false), token: GenericToken).ConfigureAwait(false))
                        {
                            // Clear created improvements
                            await objSelectedFocus.ChangeEquippedStatusAsync(false, token: GenericToken)
                                                  .ConfigureAwait(false);
                            await objSelectedFocus.ChangeEquippedStatusAsync(true, token: GenericToken)
                                                  .ConfigureAwait(false);
                            e.Cancel = true;
                            return;
                        }
                    }

                    string strName = await objSelectedFocus.GetCurrentDisplayNameAsync(GenericToken)
                                                           .ConfigureAwait(false);
                    await treViewToUse.DoThreadSafeFuncAsync(() => e.Node.Text = strName, GenericToken)
                                      .ConfigureAwait(false);
                    await CharacterObject.Foci.AddAsync(objFocus, GenericToken).ConfigureAwait(false);
                    objSelectedFocus.Bonded = true;
                }
                else
                {
                    // This is a Stacked Focus.
                    StackedFocus objStack
                        = await CharacterObject.StackedFoci.FindAsync(x => x.InternalId == strSelectedId, GenericToken)
                                               .ConfigureAwait(false);
                    if (objStack != null)
                    {
                        Gear objStackGear = CharacterObject.Gear.DeepFindById(objStack.GearId);
                        if (objStackGear.Equipped)
                        {
                            foreach (Gear objGear in objStack.Gear)
                            {
                                if (objGear.Bonus == null && (!objGear.WirelessOn || objGear.WirelessBonus == null))
                                    continue;
                                if (!string.IsNullOrEmpty(objGear.Extra))
                                    ImprovementManager.ForcedValue = objGear.Extra;
                                if (objGear.Bonus != null)
                                {
                                    if (!await ImprovementManager.CreateImprovementsAsync(
                                            CharacterObject, Improvement.ImprovementSource.StackedFocus,
                                            objStack.InternalId, objGear.Bonus, objGear.Rating,
                                            await objGear.GetCurrentDisplayNameShortAsync(GenericToken)
                                                         .ConfigureAwait(false), token: GenericToken).ConfigureAwait(false))
                                    {
                                        // Clear created improvements
                                        await objStackGear.ChangeEquippedStatusAsync(false, token: GenericToken)
                                                          .ConfigureAwait(false);
                                        await objStackGear.ChangeEquippedStatusAsync(true, token: GenericToken)
                                                          .ConfigureAwait(false);
                                        e.Cancel = true;
                                        return;
                                    }

                                    objGear.Extra = ImprovementManager.SelectedValue;
                                }

                                if (objGear.WirelessOn
                                    && objGear.WirelessBonus != null
                                    && !await ImprovementManager.CreateImprovementsAsync(
                                        CharacterObject, Improvement.ImprovementSource.StackedFocus,
                                        objStack.InternalId, objGear.WirelessBonus, objGear.Rating,
                                        await objGear.GetCurrentDisplayNameShortAsync(GenericToken)
                                                     .ConfigureAwait(false), token: GenericToken).ConfigureAwait(false))
                                {
                                    // Clear created improvements
                                    await objStackGear.ChangeEquippedStatusAsync(false, token: GenericToken)
                                                      .ConfigureAwait(false);
                                    await objStackGear.ChangeEquippedStatusAsync(true, token: GenericToken)
                                                      .ConfigureAwait(false);
                                    e.Cancel = true;
                                    return;
                                }
                            }
                        }

                        objStack.Bonded = true;
                        string strName = await objStackGear.GetCurrentDisplayNameAsync(GenericToken)
                                                           .ConfigureAwait(false);
                        await treViewToUse.DoThreadSafeAsync(() => e.Node.Text = strName, GenericToken)
                                          .ConfigureAwait(false);
                    }
                }

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void nudArmorRating_ValueChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;

            try
            {
                TreeNode objSelectedNode = await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken)
                                                         .ConfigureAwait(false);
                switch (objSelectedNode?.Tag)
                {
                    // Locate the selected ArmorMod.
                    case ArmorMod objMod:
                    {
                        objMod.Rating = await nudArmorRating.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                            .ConfigureAwait(false);
                        string strText = await objMod.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                        await treArmor.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                                      .ConfigureAwait(false);

                        // See if a Bonus node exists.
                        if (objMod.Bonus?.InnerXml.Contains("Rating") == true || objMod.WirelessOn
                            && objMod.WirelessBonus?.InnerXml.Contains("Rating") == true)
                        {
                            // If the Bonus contains "Rating", remove the existing Improvements and create new ones.
                            await ImprovementManager.RemoveImprovementsAsync(
                                                        CharacterObject, Improvement.ImprovementSource.ArmorMod,
                                                        objMod.InternalId, GenericToken)
                                                    .ConfigureAwait(false);
                            if (objMod.Bonus != null)
                                await ImprovementManager.CreateImprovementsAsync(
                                                            CharacterObject, Improvement.ImprovementSource.ArmorMod,
                                                            objMod.InternalId,
                                                            objMod.Bonus, objMod.Rating,
                                                            await objMod.GetCurrentDisplayNameShortAsync(GenericToken)
                                                                        .ConfigureAwait(false), token: GenericToken)
                                                        .ConfigureAwait(false);
                            if (objMod.WirelessOn && objMod.WirelessBonus != null)
                                await ImprovementManager.CreateImprovementsAsync(
                                                            CharacterObject, Improvement.ImprovementSource.ArmorMod,
                                                            objMod.InternalId,
                                                            objMod.WirelessBonus, objMod.Rating,
                                                            await objMod.GetCurrentDisplayNameShortAsync(GenericToken)
                                                                        .ConfigureAwait(false), token: GenericToken)
                                                        .ConfigureAwait(false);
                        }

                        break;
                    }
                    case Gear objGear:
                    {
                        if (objGear.Category == "Foci" || objGear.Category == "Metamagic Foci"
                                                       || objGear.Category == "Stacked Focus")
                        {
                            if (!await objGear.RefreshSingleFocusRating(
                                    treFoci,
                                    await nudArmorRating.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                        .ConfigureAwait(false), GenericToken).ConfigureAwait(false))
                            {
                                IsRefreshing = true;
                                try
                                {
                                    await nudArmorRating.DoThreadSafeAsync(
                                        x => x.ValueAsInt = objGear.Rating, GenericToken).ConfigureAwait(false);
                                }
                                finally
                                {
                                    IsRefreshing = false;
                                }

                                return;
                            }
                        }
                        else
                            objGear.Rating
                                = await nudArmorRating.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                      .ConfigureAwait(false);

                        string strName = await objGear.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                        await treArmor.DoThreadSafeAsync(() => objSelectedNode.Text = strName, GenericToken)
                                      .ConfigureAwait(false);

                        // See if a Bonus node exists.
                        if (objGear.Bonus?.InnerXml.Contains("Rating") == true || objGear.WirelessOn
                            && objGear.WirelessBonus?.InnerXml.Contains("Rating") == true)
                        {
                            // If the Bonus contains "Rating", remove the existing Improvements and create new ones.
                            await ImprovementManager.RemoveImprovementsAsync(
                                                        CharacterObject, Improvement.ImprovementSource.Gear,
                                                        objGear.InternalId, GenericToken)
                                                    .ConfigureAwait(false);
                            if (objGear.Bonus != null)
                                await ImprovementManager.CreateImprovementsAsync(
                                                            CharacterObject, Improvement.ImprovementSource.Gear,
                                                            objGear.InternalId,
                                                            objGear.Bonus, objGear.Rating,
                                                            await objGear.GetCurrentDisplayNameShortAsync(GenericToken)
                                                                         .ConfigureAwait(false), token: GenericToken)
                                                        .ConfigureAwait(false);
                            if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                await ImprovementManager.CreateImprovementsAsync(
                                                            CharacterObject, Improvement.ImprovementSource.Gear,
                                                            objGear.InternalId,
                                                            objGear.WirelessBonus, objGear.Rating,
                                                            await objGear.GetCurrentDisplayNameShortAsync(GenericToken)
                                                                         .ConfigureAwait(false), token: GenericToken)
                                                        .ConfigureAwait(false);

                            if (!objGear.Equipped)
                                await objGear.ChangeEquippedStatusAsync(false, token: GenericToken).ConfigureAwait(false);
                        }

                        break;
                    }
                    case Armor objArmor:
                    {
                        objArmor.Rating = await nudArmorRating.DoThreadSafeFuncAsync(x => x.ValueAsInt, GenericToken)
                                                              .ConfigureAwait(false);
                        string strText = await objArmor.GetCurrentDisplayNameAsync(GenericToken).ConfigureAwait(false);
                        await treArmor.DoThreadSafeAsync(() => objSelectedNode.Text = strText, GenericToken)
                                      .ConfigureAwait(false);
                        break;
                    }
                }

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboTradition_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (IsLoading || IsRefreshing || IsDisposed)
                return;
            SkipUpdate = true;
            try
            {
                string strSelectedId
                    = await cboTradition.DoThreadSafeFuncAsync(x => x.SelectedValue?.ToString(), GenericToken)
                                        .ConfigureAwait(false);
                if (string.IsNullOrEmpty(strSelectedId))
                    return;

                XmlNode xmlTradition = (await CharacterObject.LoadDataAsync("traditions.xml", token: GenericToken)
                                                             .ConfigureAwait(false))
                    .TryGetNodeByNameOrId("/chummer/traditions/tradition", strSelectedId);

                if (xmlTradition == null)
                {
                    await lblTraditionName.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                          .ConfigureAwait(false);
                    await txtTraditionName.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                          .ConfigureAwait(false);
                    await lblSpiritCombat.DoThreadSafeAsync(x => x.Visible = false, GenericToken).ConfigureAwait(false);
                    await lblSpiritDetection.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                            .ConfigureAwait(false);
                    await lblSpiritHealth.DoThreadSafeAsync(x => x.Visible = false, GenericToken).ConfigureAwait(false);
                    await lblSpiritIllusion.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                           .ConfigureAwait(false);
                    await lblSpiritManipulation.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                               .ConfigureAwait(false);
                    await lblTraditionSource.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                            .ConfigureAwait(false);
                    await lblTraditionSourceLabel.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                                 .ConfigureAwait(false);
                    await cboSpiritCombat.DoThreadSafeAsync(x => x.Visible = false, GenericToken).ConfigureAwait(false);
                    await cboSpiritDetection.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                            .ConfigureAwait(false);
                    await cboSpiritHealth.DoThreadSafeAsync(x => x.Visible = false, GenericToken).ConfigureAwait(false);
                    await cboSpiritIllusion.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                           .ConfigureAwait(false);
                    await cboSpiritManipulation.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                               .ConfigureAwait(false);

                    if (CharacterObject.MagicTradition.Type == TraditionType.MAG)
                    {
                        await CharacterObject.MagicTradition.ResetTraditionAsync(GenericToken).ConfigureAwait(false);
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }

                    await cboTradition.DoThreadSafeAsync(x => x.SelectedValue = CharacterObject.MagicTradition.SourceID,
                                                         GenericToken).ConfigureAwait(false);
                }
                else if (strSelectedId == Tradition.CustomMagicalTraditionGuid)
                {
                    if (CharacterObject.MagicTradition.Create(xmlTradition))
                    {
                        await lblTraditionName.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                              .ConfigureAwait(false);
                        await txtTraditionName.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                              .ConfigureAwait(false);
                        await lblSpiritCombat.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                             .ConfigureAwait(false);
                        await lblSpiritDetection.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                                .ConfigureAwait(false);
                        await lblSpiritHealth.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                             .ConfigureAwait(false);
                        await lblSpiritIllusion.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                               .ConfigureAwait(false);
                        await lblSpiritManipulation.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                                   .ConfigureAwait(false);
                        await lblTraditionSource.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                                .ConfigureAwait(false);
                        await lblTraditionSourceLabel.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                                     .ConfigureAwait(false);
                        await cboSpiritCombat.DoThreadSafeAsync(x =>
                        {
                            x.Enabled = true;
                            x.Visible = true;
                        }, GenericToken).ConfigureAwait(false);
                        await cboSpiritDetection.DoThreadSafeAsync(x =>
                        {
                            x.Enabled = true;
                            x.Visible = true;
                        }, GenericToken).ConfigureAwait(false);
                        await cboSpiritHealth.DoThreadSafeAsync(x =>
                        {
                            x.Enabled = true;
                            x.Visible = true;
                        }, GenericToken).ConfigureAwait(false);
                        await cboSpiritIllusion.DoThreadSafeAsync(x =>
                        {
                            x.Enabled = true;
                            x.Visible = true;
                        }, GenericToken).ConfigureAwait(false);
                        await cboSpiritManipulation.DoThreadSafeAsync(x =>
                        {
                            x.Enabled = true;
                            x.Visible = true;
                        }, GenericToken).ConfigureAwait(false);

                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }
                    else
                    {
                        await CharacterObject.MagicTradition.ResetTraditionAsync(GenericToken).ConfigureAwait(false);
                        await cboTradition.DoThreadSafeAsync(
                                              x => x.SelectedValue = CharacterObject.MagicTradition.SourceID,
                                              GenericToken)
                                          .ConfigureAwait(false);
                    }
                }
                else if (CharacterObject.MagicTradition.Create(xmlTradition))
                {
                    await lblTraditionName.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                          .ConfigureAwait(false);
                    await txtTraditionName.DoThreadSafeAsync(x => x.Visible = false, GenericToken)
                                          .ConfigureAwait(false);
                    await lblSpiritCombat.DoThreadSafeAsync(x => x.Visible = true, GenericToken).ConfigureAwait(false);
                    await lblSpiritDetection.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                            .ConfigureAwait(false);
                    await lblSpiritHealth.DoThreadSafeAsync(x => x.Visible = true, GenericToken).ConfigureAwait(false);
                    await lblSpiritIllusion.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                           .ConfigureAwait(false);
                    await lblSpiritManipulation.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                               .ConfigureAwait(false);
                    await cboSpiritCombat.DoThreadSafeAsync(x =>
                    {
                        x.Enabled = false;
                        x.Visible = true;
                    }, GenericToken).ConfigureAwait(false);
                    await cboSpiritDetection.DoThreadSafeAsync(x =>
                    {
                        x.Enabled = false;
                        x.Visible = true;
                    }, GenericToken).ConfigureAwait(false);
                    await cboSpiritHealth.DoThreadSafeAsync(x =>
                    {
                        x.Enabled = false;
                        x.Visible = true;
                    }, GenericToken).ConfigureAwait(false);
                    await cboSpiritIllusion.DoThreadSafeAsync(x =>
                    {
                        x.Enabled = false;
                        x.Visible = true;
                    }, GenericToken).ConfigureAwait(false);
                    await cboSpiritManipulation.DoThreadSafeAsync(x =>
                    {
                        x.Enabled = false;
                        x.Visible = true;
                    }, GenericToken).ConfigureAwait(false);

                    await lblTraditionSource.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                            .ConfigureAwait(false);
                    await lblTraditionSourceLabel.DoThreadSafeAsync(x => x.Visible = true, GenericToken)
                                                 .ConfigureAwait(false);
                    await CharacterObject.MagicTradition.SetSourceDetailAsync(lblTraditionSource, GenericToken)
                                         .ConfigureAwait(false);

                    await RequestCharacterUpdate().ConfigureAwait(false);
                    await SetDirty(true).ConfigureAwait(false);
                }
                else
                {
                    await CharacterObject.MagicTradition.ResetTraditionAsync(GenericToken).ConfigureAwait(false);
                    await cboTradition.DoThreadSafeAsync(x => x.SelectedValue = CharacterObject.MagicTradition.SourceID,
                                                         GenericToken).ConfigureAwait(false);
                }

                await cboDrain.DoThreadSafeAsync(x => x.Visible
                                                     = (!CharacterObject.AdeptEnabled
                                                        || CharacterObject.MagicianEnabled) &&
                                                       CharacterObject.MagicTradition.CanChooseDrainAttribute,
                                                 GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
            finally
            {
                SkipUpdate = false;
            }
        }

        #endregion Additional Spells and Spirits Tab Control Events

        #region Additional Sprites and Complex Forms Tab Control Events

        private async void treComplexForms_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedComplexForm(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboStream_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (IsLoading || IsRefreshing || CharacterObject.MagicTradition.Type == TraditionType.MAG)
                return;
            try
            {
                string strSelectedId = await cboStream
                                             .DoThreadSafeFuncAsync(x => x.SelectedValue?.ToString(), GenericToken)
                                             .ConfigureAwait(false);
                if (string.IsNullOrEmpty(strSelectedId)
                    || strSelectedId == CharacterObject.MagicTradition.SourceIDString)
                    return;

                XmlNode xmlNewStreamNode
                    = (await CharacterObject.LoadDataAsync("streams.xml", token: GenericToken).ConfigureAwait(false))
                    .TryGetNodeByNameOrId("/chummer/traditions/tradition", strSelectedId);
                if (xmlNewStreamNode != null && CharacterObject.MagicTradition.Create(xmlNewStreamNode, true))
                {
                    await RequestCharacterUpdate().ConfigureAwait(false);
                    await SetDirty(true).ConfigureAwait(false);
                }
                else
                {
                    if (CharacterObject.MagicTradition.Type == TraditionType.RES)
                    {
                        await CharacterObject.MagicTradition.ResetTraditionAsync(GenericToken).ConfigureAwait(false);
                        await RequestCharacterUpdate().ConfigureAwait(false);
                        await SetDirty(true).ConfigureAwait(false);
                    }

                    await cboStream
                          .DoThreadSafeAsync(x => x.SelectedValue = CharacterObject.MagicTradition.SourceID,
                                             GenericToken).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void treComplexForms_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteComplexForm_Click(sender, e);
            }
        }

        #endregion Additional Sprites and Complex Forms Tab Control Events

        #region Additional AI Advanced Programs Tab Control Events

        private async void treAIPrograms_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedAIProgram(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async Task RefreshSelectedAIProgram(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                // Locate the Program that is selected in the tree.
                if (await treAIPrograms.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token).ConfigureAwait(false) is
                    AIProgram objProgram)
                {
                    string strText = await objProgram.DisplayRequiresProgramAsync(GlobalSettings.Language, token)
                                                     .ConfigureAwait(false);
                    await lblAIProgramsRequires.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                    await objProgram.SetSourceDetailAsync(lblAIProgramsSource, token).ConfigureAwait(false);
                }
                else
                {
                    await lblAIProgramsRequires.DoThreadSafeAsync(x => x.Text = string.Empty, token)
                                               .ConfigureAwait(false);
                    await SourceString.Blank.SetControlAsync(lblAIProgramsSource, token).ConfigureAwait(false);
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        private void treAIPrograms_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteAIProgram_Click(sender, e);
            }
        }

        #endregion Additional AI Advanced Programs Tab Control Events

        #region Additional Initiation Tab Control Events

        private void chkInitiationGroup_EnabledChanged(object sender, EventArgs e)
        {
            if (!chkInitiationGroup.Enabled)
            {
                chkInitiationGroup.Checked = false;
            }
        }

        private async void chkInitiationSchooling_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;

            try
            {
                await UpdateInitiationCost(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void chkInitiationSchooling_EnabledChanged(object sender, EventArgs e)
        {
            if (!chkInitiationSchooling.Enabled)
            {
                chkInitiationSchooling.Checked = false;
            }
        }

        private async void treMetamagic_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedMetamagic(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async Task RefreshSelectedMetamagic(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            if (!CharacterObject.InitiationEnabled)
                return;
            IsRefreshing = true;
            try
            {
                string strText;
                switch (await treMetamagic.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token).ConfigureAwait(false))
                {
                    case Metamagic objMetamagic:
                    {
                        strText = await LanguageManager.GetStringAsync(
                            objMetamagic.SourceType == Improvement.ImprovementSource.Metamagic
                                ? "Button_RemoveMetamagic"
                                : "Button_RemoveEcho", token: token).ConfigureAwait(false);
                        await cmdDeleteMetamagic.DoThreadSafeAsync(x =>
                        {
                            x.Text = strText;
                            x.Enabled = objMetamagic.Grade >= 0;
                        }, token).ConfigureAwait(false);
                        await objMetamagic.SetSourceDetailAsync(lblMetamagicSource, token).ConfigureAwait(false);
                        break;
                    }
                    case Art objArt:
                    {
                        strText = await LanguageManager.GetStringAsync(
                            objArt.SourceType == Improvement.ImprovementSource.Metamagic
                                ? "Button_RemoveMetamagic"
                                : "Button_RemoveEcho", token: token).ConfigureAwait(false);
                        await cmdDeleteMetamagic.DoThreadSafeAsync(x =>
                        {
                            x.Text = strText;
                            x.Enabled = objArt.Grade >= 0;
                        }, token).ConfigureAwait(false);
                        await objArt.SetSourceDetailAsync(lblMetamagicSource, token).ConfigureAwait(false);
                        break;
                    }
                    case Spell objSpell:
                    {
                        strText = await LanguageManager.GetStringAsync("Button_RemoveMetamagic", token: token)
                                                       .ConfigureAwait(false);
                        await cmdDeleteMetamagic.DoThreadSafeAsync(x =>
                        {
                            x.Text = strText;
                            x.Enabled = objSpell.Grade >= 0;
                        }, token).ConfigureAwait(false);
                        await objSpell.SetSourceDetailAsync(lblMetamagicSource, token).ConfigureAwait(false);
                        break;
                    }
                    case ComplexForm objComplexForm:
                    {
                        strText = await LanguageManager.GetStringAsync("Button_RemoveEcho", token: token)
                                                       .ConfigureAwait(false);
                        await cmdDeleteMetamagic.DoThreadSafeAsync(x =>
                        {
                            x.Text = strText;
                            x.Enabled = objComplexForm.Grade >= 0;
                        }, token).ConfigureAwait(false);
                        await objComplexForm.SetSourceDetailAsync(lblMetamagicSource, token).ConfigureAwait(false);
                        break;
                    }
                    case Enhancement objEnhancement:
                    {
                        strText = await LanguageManager.GetStringAsync(
                            objEnhancement.SourceType == Improvement.ImprovementSource.Metamagic
                                ? "Button_RemoveMetamagic"
                                : "Button_RemoveEcho", token: token).ConfigureAwait(false);
                        await cmdDeleteMetamagic.DoThreadSafeAsync(x =>
                        {
                            x.Text = strText;
                            x.Enabled = objEnhancement.Grade >= 0;
                        }, token).ConfigureAwait(false);
                        await objEnhancement.SetSourceDetailAsync(lblMetamagicSource, token).ConfigureAwait(false);
                        break;
                    }
                    default:
                    {
                        strText = await LanguageManager.GetStringAsync(
                            CharacterObject.MAGEnabled
                                ? "Button_RemoveInitiateGrade"
                                : "Button_RemoveSubmersionGrade", token: token).ConfigureAwait(false);
                        await cmdDeleteMetamagic.DoThreadSafeAsync(x =>
                        {
                            x.Text = strText;
                            x.Enabled = true;
                        }, token).ConfigureAwait(false);
                        await SourceString.Blank.SetControlAsync(lblMetamagicSource, token).ConfigureAwait(false);
                        break;
                    }
                }
                bool blnVisible = await lblMetamagicSource
                                        .DoThreadSafeFuncAsync(x => x.Visible = !string.IsNullOrEmpty(x.Text),
                                                               token: token).ConfigureAwait(false);
                await lblMetamagicSourceLabel.DoThreadSafeAsync(x => x.Visible = blnVisible, token: token)
                                             .ConfigureAwait(false);
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        private void txtGroupNotes_KeyDown(object sender, KeyEventArgs e)
        {
            if (!e.Control || e.KeyCode != Keys.A)
                return;
            e.SuppressKeyPress = true;
            ((TextBox) sender)?.SelectAll();
        }

        #endregion Additional Initiation Tab Control Events

        #region Additional Critter Powers Tab Control Events

        private async void treCritterPowers_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await RefreshSelectedCritterPower(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async Task RefreshSelectedCritterPower(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                // Look for the selected Critter Power.
                if (await treCritterPowers.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token)
                                          .ConfigureAwait(false) is CritterPower
                    objPower)
                {
                    await cmdDeleteCritterPower.DoThreadSafeAsync(x => x.Enabled = objPower.Grade == 0, token)
                                               .ConfigureAwait(false);
                    string strName = await objPower.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                    await lblCritterPowerName.DoThreadSafeAsync(x => x.Text = strName, token).ConfigureAwait(false);
                    string strText = await objPower.DisplayCategoryAsync(GlobalSettings.Language, token)
                                                   .ConfigureAwait(false);
                    await lblCritterPowerCategory.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                    string strText2 = await objPower.DisplayTypeAsync(GlobalSettings.Language, token)
                                                    .ConfigureAwait(false);
                    await lblCritterPowerType.DoThreadSafeAsync(x => x.Text = strText2, token).ConfigureAwait(false);
                    string strText3 = await objPower.DisplayActionAsync(GlobalSettings.Language, token)
                                                    .ConfigureAwait(false);
                    await lblCritterPowerAction.DoThreadSafeAsync(x => x.Text = strText3, token).ConfigureAwait(false);
                    string strText4 = await objPower.DisplayRangeAsync(GlobalSettings.Language, token)
                                                    .ConfigureAwait(false);
                    await lblCritterPowerRange.DoThreadSafeAsync(x => x.Text = strText4, token).ConfigureAwait(false);
                    string strText5 = await objPower.DisplayDurationAsync(GlobalSettings.Language, token)
                                                    .ConfigureAwait(false);
                    await lblCritterPowerDuration.DoThreadSafeAsync(x => x.Text = strText5, token)
                                                 .ConfigureAwait(false);
                    await chkCritterPowerCount.DoThreadSafeAsync(x => x.Checked = objPower.CountTowardsLimit, token)
                                              .ConfigureAwait(false);
                    await objPower.SetSourceDetailAsync(lblCritterPowerSource, token).ConfigureAwait(false);
                    if (objPower.PowerPoints > 0)
                    {
                        await lblCritterPowerPointCost.DoThreadSafeAsync(x =>
                        {
                            x.Text = objPower.PowerPoints.ToString(GlobalSettings
                                                                       .CultureInfo);
                            x.Visible = true;
                        }, token).ConfigureAwait(false);
                        await lblCritterPowerPointCostLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                           .ConfigureAwait(false);
                    }
                    else
                    {
                        await lblCritterPowerPointCost.DoThreadSafeAsync(x => x.Visible = false, token)
                                                      .ConfigureAwait(false);
                        await lblCritterPowerPointCostLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                           .ConfigureAwait(false);
                    }
                }
                else
                {
                    await cmdDeleteCritterPower.DoThreadSafeAsync(x => x.Enabled = false, token).ConfigureAwait(false);
                    await lblCritterPowerName.DoThreadSafeAsync(x => x.Text = string.Empty, token)
                                             .ConfigureAwait(false);
                    await lblCritterPowerCategory.DoThreadSafeAsync(x => x.Text = string.Empty, token)
                                                 .ConfigureAwait(false);
                    await lblCritterPowerType.DoThreadSafeAsync(x => x.Text = string.Empty, token)
                                             .ConfigureAwait(false);
                    await lblCritterPowerAction.DoThreadSafeAsync(x => x.Text = string.Empty, token)
                                               .ConfigureAwait(false);
                    await lblCritterPowerRange.DoThreadSafeAsync(x => x.Text = string.Empty, token)
                                              .ConfigureAwait(false);
                    await lblCritterPowerDuration.DoThreadSafeAsync(x => x.Text = string.Empty, token)
                                                 .ConfigureAwait(false);
                    await chkCritterPowerCount.DoThreadSafeAsync(x => x.Checked = false, token).ConfigureAwait(false);
                    await SourceString.Blank.SetControlAsync(lblCritterPowerSource, token).ConfigureAwait(false);
                    await lblCritterPowerPointCost.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                    await lblCritterPowerPointCostLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        private async void chkCritterPowerCount_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                // Locate the selected Critter Power.
                if (!(await treCritterPowers.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                            .ConfigureAwait(false) is
                        CritterPower objPower))
                    return;
                objPower.CountTowardsLimit
                    = await chkCritterPowerCount.DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                .ConfigureAwait(false);

                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        #endregion Additional Critter Powers Tab Control Events

        #region Tree KeyDown Events

        private async void treQualities_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                try
                {
                    await DeleteQuality(GenericToken).ConfigureAwait(false);
                }
                catch (OperationCanceledException)
                {
                    //swallow this
                }
            }
        }

        private void treSpells_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteSpell_Click(sender, e);
            }
        }

        private void treCyberware_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteCyberware_Click(sender, e);
            }
        }

        private void treLifestyles_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteLifestyle_Click(sender, e);
            }
        }

        private void treArmor_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteArmor_Click(sender, e);
            }
        }

        private void treWeapons_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteWeapon_Click(sender, e);
            }
        }

        private void treGear_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteGear_Click(sender, e);
            }
        }

        private async void treVehicles_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                try
                {
                    await DeleteVehicle(GenericToken).ConfigureAwait(false);
                }
                catch (OperationCanceledException)
                {
                    //swallow this
                }
            }
        }

        private void treMartialArts_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteMartialArt_Click(sender, e);
            }
        }

        private void treCritterPowers_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteCritterPower_Click(sender, e);
            }
        }

        private void treMetamagic_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteMetamagic_Click(sender, e);
            }
        }

        #endregion Tree KeyDown Events

        #region Other Control Events

        private async void tabCharacterTabs_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await DoRefreshPasteStatus(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tabStreetGearTabs_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                await DoRefreshPasteStatus(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private enum CmdOperation
        {
            None,
            Up,
            Down
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            CmdOperation op = CmdOperation.None;

            // Determine which custom operation we're attempting, if any
            switch (keyData)
            {
                case Keys.Up | Keys.Alt:
                    op = CmdOperation.Up;
                    break;

                case Keys.Down | Keys.Alt:
                    op = CmdOperation.Down;
                    break;
            }

            if (op != CmdOperation.Up && op != CmdOperation.Down)
                return base.ProcessCmdKey(ref msg, keyData);
            bool up = op == CmdOperation.Up;
            bool requireParentSortable = false;
            TreeView treActiveView = null;

            if (tabCharacterTabs.SelectedTab == tabStreetGear)
            {
                // Lifestyle Tab.
                if (tabStreetGearTabs.SelectedTab == tabLifestyle)
                {
                    treActiveView = treLifestyles;
                }
                // Armor Tab.
                else if (tabStreetGearTabs.SelectedTab == tabArmor)
                {
                    treActiveView = treArmor;
                }
                // Weapons Tab.
                else if (tabStreetGearTabs.SelectedTab == tabWeapons)
                {
                    treActiveView = treWeapons;
                }
                // Gear Tab.
                else if (tabStreetGearTabs.SelectedTab == tabGear)
                {
                    treActiveView = treGear;
                }
                // Drugs Tab.
                else if (tabStreetGearTabs.SelectedTab == tabDrugs)
                {
                    treActiveView = treCustomDrugs;
                }
            }
            // Cyberware Tab.
            else if (tabCharacterTabs.SelectedTab == tabCyberware)
            {
                // Top-level cyberware is sorted alphabetically, but we can re-arrange any plugins/gear inside them
                requireParentSortable = true;
                treActiveView = treCyberware;
            }
            // Vehicles Tab.
            else if (tabCharacterTabs.SelectedTab == tabVehicles)
            {
                treActiveView = treVehicles;
            }
            // Critter Powers Tab.
            else if (tabCharacterTabs.SelectedTab == tabCritter)
            {
                treActiveView = treCritterPowers;
            }

            if (treActiveView == null)
                return true;
            TreeNode objSelectedNode = treActiveView.SelectedNode;
            TreeNode objParentNode = objSelectedNode?.Parent;
            TreeNodeCollection lstNodes = objParentNode?.Nodes ?? treActiveView.Nodes;

            if (requireParentSortable && !(objParentNode?.Tag is ICanSort))
                return true;
            int intNewIndex = lstNodes.IndexOf(objSelectedNode);
            intNewIndex = up ? Math.Max(0, intNewIndex - 1) : Math.Min(lstNodes.Count - 1, intNewIndex + 1);

            try
            {
                Utils.SafelyRunSynchronously(() => MoveTreeNode(objSelectedNode, intNewIndex, requireParentSortable, GenericToken),
                                             GenericToken);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }

            // Returning true tells the program to consume the input
            return true;

            // If none of our key combinations are used then use the default logic
        }

        #endregion Other Control Events

        #region Custom Methods

        /// <summary>
        /// Calculate the BP used by Primary Attributes.
        /// </summary>
        private static async ValueTask<int> CalculateAttributeBP(IAsyncEnumerable<CharacterAttrib> attribs,
                                                                 IAsyncEnumerable<CharacterAttrib> extraAttribs = null,
                                                                 CancellationToken token = default)
        {
            // Primary and Special Attributes are calculated separately since you can only spend a maximum of 1/2 your BP allotment on Primary Attributes.
            // Special Attributes are not subject to the 1/2 of max BP rule.
            int intBP = await attribs.SumAsync(att => att.GetTotalKarmaCostAsync(token), token).ConfigureAwait(false);
            if (extraAttribs != null)
            {
                intBP += await extraAttribs.SumAsync(att => att.GetTotalKarmaCostAsync(token), token)
                                           .ConfigureAwait(false);
            }

            return intBP;
        }

        private async ValueTask<int> CalculateAttributePriorityPoints(IAsyncEnumerable<CharacterAttrib> attribs,
                                                                      IAsyncEnumerable<CharacterAttrib> extraAttribs
                                                                          = null, CancellationToken token = default)
        {
            int intAtt = 0;
            if (await CharacterObject.GetEffectiveBuildMethodUsesPriorityTablesAsync(token).ConfigureAwait(false))
            {
                // Get the total of "free points" spent
                intAtt += await attribs.SumAsync(att => att.GetSpentPriorityPointsAsync(token), token: token)
                                       .ConfigureAwait(false);
                if (extraAttribs != null)
                {
                    // Get the total of "free points" spent
                    intAtt += await extraAttribs.SumAsync(att => att.GetSpentPriorityPointsAsync(token), token: token)
                                                .ConfigureAwait(false);
                }
            }

            return intAtt;
        }

        private async ValueTask<string> BuildAttributes(IAsyncReadOnlyCollection<CharacterAttrib> attribs,
                                                        IAsyncReadOnlyCollection<CharacterAttrib> extraAttribs = null,
                                                        bool special = false, CancellationToken token = default)
        {
            int bp = await CalculateAttributeBP(attribs, extraAttribs, token).ConfigureAwait(false);
            string s = bp.ToString(GlobalSettings.CultureInfo)
                       + await LanguageManager.GetStringAsync("String_Space", token: token).ConfigureAwait(false)
                       + await LanguageManager.GetStringAsync("String_Karma", token: token).ConfigureAwait(false);
            if (CharacterObject.EffectiveBuildMethodUsesPriorityTables)
            {
                int att = await CalculateAttributePriorityPoints(attribs, extraAttribs, token).ConfigureAwait(false);
                int total = special ? CharacterObject.TotalSpecial : CharacterObject.TotalAttributes;
                if (bp > 0)
                {
                    s = string.Format(GlobalSettings.CultureInfo,
                                      await LanguageManager.GetStringAsync("String_OverPriorityPoints", token: token)
                                                           .ConfigureAwait(false),
                                      total - att, total, bp);
                }
                else
                {
                    s = (total - att).ToString(GlobalSettings.CultureInfo)
                        + await LanguageManager.GetStringAsync("String_Of", token: token).ConfigureAwait(false)
                        + total.ToString(GlobalSettings.CultureInfo);
                }
            }

            return s;
        }

        /// <summary>
        /// Calculate the number of Build Points the character has remaining.
        /// </summary>
        private async ValueTask<int> CalculateBP(bool blnDoUIUpdate = true, CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            int intKarmaPointsRemain = await CharacterObjectSettings.GetBuildKarmaAsync(token).ConfigureAwait(false);
            //int intPointsUsed = 0; // used as a running total for each section
            const int intFreestyleBPMin = 0;
            int intFreestyleBP = 0;
            string strSpace = await LanguageManager.GetStringAsync("String_Space", token: token).ConfigureAwait(false);
            string strPoints = blnDoUIUpdate
                ? await LanguageManager.GetStringAsync("String_Karma", token: token).ConfigureAwait(false)
                : string.Empty;

            // ------------------------------------------------------------------------------
            // Metatype/Metavariant only cost points when working with BP (or when the Metatype Costs Karma option is enabled when working with Karma).
            int intMetatypeBP;
            if (!await CharacterObject.GetEffectiveBuildMethodUsesPriorityTablesAsync(token).ConfigureAwait(false))
            {
                // Subtract the BP used for Metatype.
                intMetatypeBP = await CharacterObject.GetMetatypeBPAsync(token).ConfigureAwait(false)
                                * await CharacterObjectSettings.GetMetatypeCostsKarmaMultiplierAsync(token)
                                                               .ConfigureAwait(false);
            }
            else
            {
                intMetatypeBP = await CharacterObject.GetMetatypeBPAsync(token).ConfigureAwait(false);
            }

            intKarmaPointsRemain -= intMetatypeBP;

            token.ThrowIfCancellationRequested();

            // ------------------------------------------------------------------------------
            // Calculate the points used by Contacts.
            int intPointsInContacts = 0;

            bool blnFriendsInHighPlaces
                = await CharacterObject.GetFriendsInHighPlacesAsync(token).ConfigureAwait(false);
            int intContactPoints = await CharacterObject.GetContactPointsAsync(token).ConfigureAwait(false);
            int intContactPointsLeft = intContactPoints;
            int intHighPlacesFriends = 0;
            ThreadSafeObservableCollection<Contact> lstContacts
                = await CharacterObject.GetContactsAsync(token).ConfigureAwait(false);
            intPointsInContacts += await lstContacts.SumAsync(objContact =>
            {
                // Don't care about free contacts
                if (objContact.EntityType != ContactType.Contact)
                    return 0;
                int intCost = objContact.ContactPoints;
                if (intCost == 0)
                    return 0;

                if (objContact.Connection >= 8 && blnFriendsInHighPlaces)
                {
                    intHighPlacesFriends += intCost;
                }
                else if (!objContact.IsGroup)
                {
                    int over = intContactPointsLeft - intCost;

                    //Prefers to eat 0, we went over
                    if (over < 0)
                    {
                        intContactPointsLeft = 0; //we went over so we know none are left
                        //over is negative so to add we substract
                        //instead of +abs(over)
                        return -over;
                    }
                    else
                    {
                        //otherwise just set;
                        intContactPointsLeft = over;
                    }
                }

                return 0;
            }, token).ConfigureAwait(false);

            await CharacterObject.SetContactPointsUsedAsync(intContactPoints - intContactPointsLeft, token).ConfigureAwait(false);
            int intChaValue = await (await CharacterObject.GetAttributeAsync("CHA", token: token).ConfigureAwait(false))
                                    .GetValueAsync(token).ConfigureAwait(false);

            if (intPointsInContacts > 0 || intChaValue * 4 < intHighPlacesFriends)
            {
                intPointsInContacts += Math.Max(0, intHighPlacesFriends - intChaValue * 4);
            }

            intKarmaPointsRemain -= intPointsInContacts;

            token.ThrowIfCancellationRequested();
            // ------------------------------------------------------------------------------
            // Calculate the BP used by Qualities.
            int intLifeModuleQualities = 0;
            int intKarmaQuality = await CharacterObjectSettings.GetKarmaQualityAsync(token).ConfigureAwait(false);
            ThreadSafeObservableCollection<Quality> lstQualities
                = await CharacterObject.GetQualitiesAsync(token).ConfigureAwait(false);
            using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                          out StringBuilder sbdPositiveQualityTooltip))
            using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                          out StringBuilder sbdNegativeQualityTooltip))
            {
                await lstQualities.ForEachAsync(async objLoopQuality =>
                {
                    if (!objLoopQuality.ContributeToBP)
                        return;
                    if (objLoopQuality.Type == QualityType.LifeModule)
                    {
                        intLifeModuleQualities += objLoopQuality.BP * intKarmaQuality;
                        if (blnDoUIUpdate)
                        {
                            sbdPositiveQualityTooltip.AppendFormat(
                                GlobalSettings.CultureInfo, "{0}{1}({2})",
                                await objLoopQuality.GetCurrentDisplayNameAsync(token).ConfigureAwait(false),
                                strSpace, objLoopQuality.BP * intKarmaQuality).AppendLine();
                        }
                    }
                    else if (blnDoUIUpdate)
                    {
                        switch (objLoopQuality.Type)
                        {
                            case QualityType.Positive:
                                sbdPositiveQualityTooltip.AppendFormat(
                                    GlobalSettings.CultureInfo, "{0}{1}({2})",
                                    await objLoopQuality.GetCurrentDisplayNameAsync(token).ConfigureAwait(false),
                                    strSpace, objLoopQuality.BP * intKarmaQuality).AppendLine();
                                break;

                            case QualityType.Negative:
                                sbdNegativeQualityTooltip.AppendFormat(
                                    GlobalSettings.CultureInfo, "{0}{1}({2})",
                                    await objLoopQuality.GetCurrentDisplayNameAsync(token).ConfigureAwait(false),
                                    strSpace, objLoopQuality.BP * intKarmaQuality).AppendLine();
                                break;
                        }
                    }
                }, token: token).ConfigureAwait(false);

                if (blnDoUIUpdate)
                {
                    token.ThrowIfCancellationRequested();
                    if (await lstContacts
                              .AnyAsync(x => x.EntityType == ContactType.Contact && x.IsGroup && !x.Free, token)
                              .ConfigureAwait(false))
                    {
                        sbdPositiveQualityTooltip.AppendLine(
                            await LanguageManager.GetStringAsync("Label_GroupContacts", token: token)
                                                 .ConfigureAwait(false));
                        await lstContacts.ForEachAsync(async objGroupContact =>
                        {
                            if (objGroupContact.EntityType != ContactType.Contact || !objGroupContact.IsGroup
                                || objGroupContact.Free)
                                return;
                            string strNameToUse = objGroupContact.GroupName;
                            if (string.IsNullOrEmpty(strNameToUse))
                            {
                                strNameToUse = objGroupContact.Name;
                                if (string.IsNullOrEmpty(strNameToUse))
                                    strNameToUse = await LanguageManager.GetStringAsync("String_Unknown", token: token)
                                                                        .ConfigureAwait(false);
                            }
                            else if (!string.IsNullOrWhiteSpace(objGroupContact.Name))
                                strNameToUse += '/' + objGroupContact.Name;

                            sbdPositiveQualityTooltip.AppendFormat(GlobalSettings.CultureInfo, "{0}{1}({2})",
                                                                   strNameToUse,
                                                                   strSpace,
                                                                   objGroupContact.ContactPoints
                                                                   * CharacterObjectSettings.KarmaContact).AppendLine();
                        }, token).ConfigureAwait(false);
                    }

                    await lblPositiveQualitiesBP.SetToolTipAsync(sbdPositiveQualityTooltip.ToString(), token)
                                                .ConfigureAwait(false);
                    await lblNegativeQualitiesBP.SetToolTipAsync(sbdNegativeQualityTooltip.ToString(), token)
                                                .ConfigureAwait(false);
                }
            }

            int intQualityPointsUsed = intLifeModuleQualities
                                       - await CharacterObject.GetNegativeQualityKarmaAsync(token).ConfigureAwait(false)
                                       + await CharacterObject.GetPositiveQualityKarmaAsync(token)
                                                              .ConfigureAwait(false);

            intKarmaPointsRemain -= intQualityPointsUsed;
            intFreestyleBP += intQualityPointsUsed;
            // Changelings must either have a balanced negative and positive number of metagenic qualities, or have 1 more point of positive than negative.
            // If the latter, karma is used to balance them out.
            if (await CharacterObject.GetMetagenicPositiveQualityKarmaAsync(token).ConfigureAwait(false)
                + await CharacterObject.GetMetagenicNegativeQualityKarmaAsync(token).ConfigureAwait(false) == 1)
                intKarmaPointsRemain--;

            token.ThrowIfCancellationRequested();

            // ------------------------------------------------------------------------------
            // Update Primary Attributes and Special Attributes values.
            int intAttributePointsUsed
                = await CalculateAttributeBP(
                    await (await CharacterObject.GetAttributeSectionAsync(token).ConfigureAwait(false))
                          .GetAttributeListAsync(token).ConfigureAwait(false), token: token).ConfigureAwait(false);
            intAttributePointsUsed
                += await CalculateAttributeBP(
                        await (await CharacterObject.GetAttributeSectionAsync(token).ConfigureAwait(false))
                              .GetSpecialAttributeListAsync(token).ConfigureAwait(false), token: token)
                    .ConfigureAwait(false);
            intKarmaPointsRemain -= intAttributePointsUsed;

            token.ThrowIfCancellationRequested();

            // ------------------------------------------------------------------------------
            // Include the BP used by Martial Arts.
            int intMartialArtsPoints = 0;
            string strColon = await LanguageManager.GetStringAsync("String_Colon", token: token).ConfigureAwait(false);
            string strOf = await LanguageManager.GetStringAsync("String_Of", token: token).ConfigureAwait(false);
            using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                          out StringBuilder sbdMartialArtsBPToolTip))
            {
                int intKarmaTechnique
                    = await CharacterObjectSettings.GetKarmaTechniqueAsync(token).ConfigureAwait(false);
                await (await CharacterObject.GetMartialArtsAsync(token).ConfigureAwait(false)).ForEachAsync(
                    async objMartialArt =>
                    {
                        token.ThrowIfCancellationRequested();
                        if (objMartialArt.IsQuality)
                            return;
                        int intLoopCost = objMartialArt.Cost;
                        intMartialArtsPoints += intLoopCost;

                        if (blnDoUIUpdate)
                        {
                            if (sbdMartialArtsBPToolTip.Length > 0)
                                sbdMartialArtsBPToolTip.AppendLine().Append(strSpace).Append('+').Append(strSpace);
                            sbdMartialArtsBPToolTip
                                .Append(await objMartialArt.GetCurrentDisplayNameAsync(token).ConfigureAwait(false))
                                .Append(strSpace).Append('(')
                                .Append(intLoopCost.ToString(GlobalSettings.CultureInfo)).Append(')');

                            bool blnIsFirst = true;
                            foreach (MartialArtTechnique objTechnique in objMartialArt.Techniques)
                            {
                                token.ThrowIfCancellationRequested();
                                if (blnIsFirst)
                                {
                                    blnIsFirst = false;
                                    continue;
                                }

                                intLoopCost = intKarmaTechnique;
                                intMartialArtsPoints += intLoopCost;

                                sbdMartialArtsBPToolTip.AppendLine().Append(strSpace).Append('+').Append(strSpace)
                                                       .Append(await objTechnique.GetCurrentDisplayNameAsync(token)
                                                                   .ConfigureAwait(false)).Append(strSpace)
                                                       .Append('(')
                                                       .Append(intLoopCost.ToString(GlobalSettings.CultureInfo))
                                                       .Append(')');
                            }
                        }
                        else
                            // Add in the Techniques
                            intMartialArtsPoints += Math.Max(objMartialArt.Techniques.Count - 1, 0)
                                                    * intKarmaTechnique;
                    }, token).ConfigureAwait(false);

                token.ThrowIfCancellationRequested();

                if (blnDoUIUpdate)
                    await lblBuildMartialArts.SetToolTipAsync(sbdMartialArtsBPToolTip.ToString(), token)
                                             .ConfigureAwait(false);
            }

            intKarmaPointsRemain -= intMartialArtsPoints;

            SkillsSection objSkillSection = await CharacterObject.GetSkillsSectionAsync(token).ConfigureAwait(false);

            token.ThrowIfCancellationRequested();
            // ------------------------------------------------------------------------------
            // Calculate the BP used by Skill Groups.
            int intSkillGroupsPoints = await objSkillSection.SkillGroups
                                                            .SumAsync(x => x.GetCurrentKarmaCostAsync(token).AsTask(),
                                                                      token: token).ConfigureAwait(false);
            intKarmaPointsRemain -= intSkillGroupsPoints;

            token.ThrowIfCancellationRequested();
            // ------------------------------------------------------------------------------
            // Calculate the BP used by Active Skills.
            int skillPointsKarma = await objSkillSection.Skills
                                                        .SumAsync(x => x.GetCurrentKarmaCostAsync(token).AsTask(),
                                                                  token: token).ConfigureAwait(false);
            intKarmaPointsRemain -= skillPointsKarma;

            token.ThrowIfCancellationRequested();
            // ------------------------------------------------------------------------------
            // Calculate the points used by Knowledge Skills.
            int knowledgeKarmaUsed = await objSkillSection.KnowledgeSkills
                                                          .SumAsync(x => x.GetCurrentKarmaCostAsync(token).AsTask(),
                                                                    token: token).ConfigureAwait(false);

            token.ThrowIfCancellationRequested();
            //TODO: Remaining is named USED?
            intKarmaPointsRemain -= knowledgeKarmaUsed;

            intFreestyleBP += knowledgeKarmaUsed;

            token.ThrowIfCancellationRequested();
            // ------------------------------------------------------------------------------
            // Calculate the BP used by Resources/Nuyen.
            int intNuyenBP = (await CharacterObject.GetNuyenBPAsync(token).ConfigureAwait(false)).StandardRound();

            intKarmaPointsRemain -= intNuyenBP;

            intFreestyleBP += intNuyenBP;

            token.ThrowIfCancellationRequested();
            // ------------------------------------------------------------------------------
            // Calculate the BP used by Spells.
            int intSpellPointsUsed = 0;
            int intRitualPointsUsed = 0;
            int intPrepPointsUsed = 0;
            if (await CharacterObject.GetMagicianEnabledAsync(token).ConfigureAwait(false)
                || await CharacterObject.GetAdeptEnabledAsync(token).ConfigureAwait(false)
                || (await ImprovementManager
                          .GetCachedImprovementListForValueOfAsync(CharacterObject,
                                                                   Improvement.ImprovementType.FreeSpells, token: token)
                          .ConfigureAwait(false)).Count > 0
                || (await ImprovementManager
                          .GetCachedImprovementListForValueOfAsync(CharacterObject,
                                                                   Improvement.ImprovementType.FreeSpellsATT,
                                                                   token: token).ConfigureAwait(false)).Count > 0
                || (await ImprovementManager
                          .GetCachedImprovementListForValueOfAsync(CharacterObject,
                                                                   Improvement.ImprovementType.FreeSpellsSkill,
                                                                   token: token).ConfigureAwait(false)).Count > 0)
            {
                ThreadSafeObservableCollection<Spell> lstSpells
                    = await CharacterObject.GetSpellsAsync(token).ConfigureAwait(false);
                // Count the number of Spells the character currently has and make sure they do not try to select more Spells than they are allowed.
                int spells = await lstSpells
                                   .CountAsync(
                                       spell => spell.Grade == 0 && !spell.Alchemical && spell.Category != "Rituals"
                                                && !spell.FreeBonus, token: token).ConfigureAwait(false);
                int intTouchOnlySpells = await lstSpells
                                               .CountAsync(
                                                   spell => spell.Grade == 0 && !spell.Alchemical
                                                                             && spell.Category != "Rituals"
                                                                             && (spell.Range == "T (A)"
                                                                                 || spell.Range == "T")
                                                                             && !spell.FreeBonus, token: token)
                                               .ConfigureAwait(false);
                int rituals = await lstSpells
                                    .CountAsync(
                                        spell => spell.Grade == 0 && !spell.Alchemical && spell.Category == "Rituals"
                                                 && !spell.FreeBonus, token: token).ConfigureAwait(false);
                int preps = await lstSpells
                                  .CountAsync(spell => spell.Grade == 0 && spell.Alchemical && !spell.FreeBonus,
                                              token: token).ConfigureAwait(false);

                token.ThrowIfCancellationRequested();

                // Each spell costs KarmaSpell.
                int spellCost = await CharacterObject.SpellKarmaCostAsync("Spells", token).ConfigureAwait(false);
                int ritualCost = await CharacterObject.SpellKarmaCostAsync("Rituals", token).ConfigureAwait(false);
                int prepCost = await CharacterObject.SpellKarmaCostAsync("Preparations", token).ConfigureAwait(false);
                int intFreeSpells = await CharacterObject.GetFreeSpellsAsync(token).ConfigureAwait(false);
                int intQualityKarmaToSpellPoints = 0;

                token.ThrowIfCancellationRequested();

                // Factor in any qualities that can be bought with spell points.
                // It is only karma-efficient to use spell points for Mastery qualities if real spell karma cost is not greater than unmodified spell karma cost
                int intKarmaSpell = await CharacterObjectSettings.GetKarmaSpellAsync(token).ConfigureAwait(false);
                if (spellCost <= intKarmaSpell && intFreeSpells > 0 && intKarmaSpell != 0)
                {
                    // Assume that every [spell cost] karma spent on a Mastery quality is paid for with a priority-given spell point instead, as that is the most karma-efficient.
                    int intMasteryQualityKarmaUsed = await lstQualities.SumAsync(
                                                                           objQuality =>
                                                                               objQuality.CanBuyWithSpellPoints,
                                                                           objQuality => objQuality.BP, token)
                                                                       .ConfigureAwait(false);
                    if (intMasteryQualityKarmaUsed != 0)
                    {
                        intQualityKarmaToSpellPoints
                            = Math.Min(
                                intFreeSpells,
                                intMasteryQualityKarmaUsed * intKarmaQuality
                                / intKarmaSpell);
                        spells += intQualityKarmaToSpellPoints;
                    }
                }

                token.ThrowIfCancellationRequested();

                int intLimitMod = (await ImprovementManager
                                         .ValueOfAsync(CharacterObject, Improvement.ImprovementType.SpellLimit,
                                                       token: token).ConfigureAwait(false)
                                   + await ImprovementManager
                                           .ValueOfAsync(CharacterObject, Improvement.ImprovementType.FreeSpells,
                                                         token: token).ConfigureAwait(false)).StandardRound();
                int intLimitModTouchOnly = 0;
                foreach (Improvement imp in await ImprovementManager
                                                  .GetCachedImprovementListForValueOfAsync(
                                                      CharacterObject, Improvement.ImprovementType.FreeSpellsATT,
                                                      token: token).ConfigureAwait(false))
                {
                    token.ThrowIfCancellationRequested();
                    int intAttValue
                        = await (await CharacterObject.GetAttributeAsync(imp.ImprovedName, token: token)
                                                      .ConfigureAwait(false)).GetTotalValueAsync(token)
                                                                             .ConfigureAwait(false);
                    if (imp.UniqueName.Contains("half"))
                        intAttValue = (intAttValue + 1) / 2;
                    if (imp.UniqueName.Contains("touchonly"))
                        intLimitModTouchOnly += intAttValue;
                    else
                        intLimitMod += intAttValue;
                }

                foreach (Improvement imp in await ImprovementManager
                                                  .GetCachedImprovementListForValueOfAsync(
                                                      CharacterObject, Improvement.ImprovementType.FreeSpellsSkill,
                                                      token: token).ConfigureAwait(false))
                {
                    token.ThrowIfCancellationRequested();
                    Skill skill = await objSkillSection.GetActiveSkillAsync(imp.ImprovedName, token)
                                                       .ConfigureAwait(false);
                    if (skill == null)
                        continue;
                    int intSkillValue = await skill.GetTotalBaseRatingAsync(token).ConfigureAwait(false);

                    if (imp.UniqueName.Contains("half"))
                        intSkillValue = (intSkillValue + 1) / 2;
                    if (imp.UniqueName.Contains("touchonly"))
                        intLimitModTouchOnly += intSkillValue;
                    else
                        intLimitMod += intSkillValue;
                    //TODO: I don't like this being hardcoded, even though I know full well CGL are never going to reuse this.
                    spells -= await skill.Specializations.CountAsync(
                                             async spec =>
                                                 await (await CharacterObject.GetSpellsAsync(token)
                                                                             .ConfigureAwait(false)).AnyAsync(
                                                         spell => spell.Category == spec.Name && !spell.FreeBonus,
                                                         token)
                                                     .ConfigureAwait(false),
                                             token)
                                         .ConfigureAwait(false);
                }

                token.ThrowIfCancellationRequested();

                int intPPBought = await nudMysticAdeptMAGMagician.DoThreadSafeFuncAsync(x => x.ValueAsInt, token)
                                                                 .ConfigureAwait(false);
                if (intPPBought > 0)
                {
                    if (await CharacterObjectSettings.GetPrioritySpellsAsAdeptPowersAsync(token).ConfigureAwait(false))
                    {
                        spells += Math.Min(intFreeSpells, intPPBought);
                        intPPBought = Math.Max(0, intPPBought - intFreeSpells);
                    }

                    intAttributePointsUsed = intPPBought * await CharacterObjectSettings
                                                                 .GetKarmaMysticAdeptPowerPointAsync(token)
                                                                 .ConfigureAwait(false);
                    intKarmaPointsRemain -= intAttributePointsUsed;
                }

                spells -= intTouchOnlySpells - Math.Max(0, intTouchOnlySpells - intLimitModTouchOnly);

                int spellPoints = intFreeSpells + intLimitMod;
                int ritualPoints = intFreeSpells + intLimitMod;
                int prepPoints = intFreeSpells + intLimitMod;
                for (int i = intFreeSpells + intLimitMod; i > 0; i--)
                {
                    token.ThrowIfCancellationRequested();
                    if (spells > 0)
                    {
                        spells--;
                        spellPoints--;
                    }
                    else if (rituals > 0)
                    {
                        rituals--;
                        ritualPoints--;
                    }
                    else if (preps > 0)
                    {
                        preps--;
                        prepPoints--;
                    }
                    else
                    {
                        break;
                    }
                }

                intKarmaPointsRemain -= Math.Max(0, spells) * spellCost;
                intKarmaPointsRemain -= Math.Max(0, rituals) * ritualCost;
                intKarmaPointsRemain -= Math.Max(0, preps) * prepCost;

                intSpellPointsUsed += Math.Max(Math.Max(0, spells) * spellCost, 0);
                intRitualPointsUsed += Math.Max(Math.Max(0, rituals) * ritualCost, 0);
                intPrepPointsUsed += Math.Max(Math.Max(0, preps) * prepCost, 0);
                if (blnDoUIUpdate
                    && (lblBuildPrepsBP != null
                        || lblSpellsBP != null
                        || lblBuildRitualsBP != null))
                {
                    token.ThrowIfCancellationRequested();
                    string strFormat = "{0}" + strSpace + '×' + strSpace + "{1}" + strSpace
                                       + await LanguageManager.GetStringAsync("String_Karma", token: token)
                                                              .ConfigureAwait(false)
                                       + strSpace + '=' + strSpace + "{2}" + strSpace + await LanguageManager
                                           .GetStringAsync("String_Karma", token: token).ConfigureAwait(false);
                    if (lblSpellsBP != null)
                    {
                        string strTooltip = string.Format(GlobalSettings.CultureInfo, strFormat, spells, spellCost,
                                                          intSpellPointsUsed);
                        if (intQualityKarmaToSpellPoints != 0)
                            strTooltip += Environment.NewLine + await LanguageManager
                                                                      .GetStringAsync(
                                                                          "Tip_SelectSpell_MasteryQuality",
                                                                          token: token).ConfigureAwait(false);
                        await lblSpellsBP.SetToolTipAsync(strTooltip, token).ConfigureAwait(false);
                    }

                    if (lblBuildRitualsBP != null)
                        await lblBuildRitualsBP
                              .SetToolTipAsync(
                                  string.Format(GlobalSettings.CultureInfo, strFormat, rituals, spellCost,
                                                intRitualPointsUsed), token).ConfigureAwait(false);
                    if (lblBuildPrepsBP != null)
                        await lblBuildPrepsBP
                              .SetToolTipAsync(
                                  string.Format(GlobalSettings.CultureInfo, strFormat, preps, spellCost,
                                                intPrepPointsUsed), token).ConfigureAwait(false);
                    if (intFreeSpells + intLimitMod > 0)
                    {
                        if (lblBuildPrepsBP != null)
                        {
                            string strText = string.Format(GlobalSettings.CultureInfo, "{0}{1}{2}",
                                                           prepPoints + spellPoints + ritualPoints
                                                           - 2 * (intFreeSpells + intLimitMod), strOf,
                                                           spellPoints + ritualPoints - (intFreeSpells + intLimitMod));
                            if (intPrepPointsUsed > 0)
                                strText += string.Format(GlobalSettings.CultureInfo, "{0}{1}{2}{1}{3}", strColon,
                                                         strSpace, intPrepPointsUsed, strPoints);
                            await lblBuildPrepsBP.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                        }

                        if (lblSpellsBP != null)
                        {
                            string strText;
                            if (intQualityKarmaToSpellPoints != 0)
                                strText = string.Format(GlobalSettings.CultureInfo, "{0}{1}{2}({3})",
                                                        prepPoints + spellPoints + ritualPoints
                                                        - 2 * (intFreeSpells + intLimitMod), strOf,
                                                        prepPoints + ritualPoints - (intFreeSpells + intLimitMod),
                                                        string.Format(GlobalSettings.CultureInfo, await LanguageManager
                                                            .GetStringAsync(
                                                                "String_MasteryPointsAcronym", token: token)
                                                            .ConfigureAwait(false), intQualityKarmaToSpellPoints));
                            else
                                strText = string.Format(GlobalSettings.CultureInfo, "{0}{1}{2}",
                                                        prepPoints + spellPoints + ritualPoints
                                                        - 2 * (intFreeSpells + intLimitMod), strOf,
                                                        prepPoints + ritualPoints - (intFreeSpells + intLimitMod));
                            if (intSpellPointsUsed > 0)
                                strText += string.Format(GlobalSettings.CultureInfo, "{0}{1}{2}{1}{3}", strColon,
                                                         strSpace, intSpellPointsUsed, strPoints);
                            await lblSpellsBP.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                        }

                        if (lblBuildRitualsBP != null)
                        {
                            string strText = string.Format(GlobalSettings.CultureInfo, "{0}{1}{2}",
                                                           prepPoints + spellPoints + ritualPoints
                                                           - 2 * (intFreeSpells + intLimitMod), strOf,
                                                           prepPoints + spellPoints - (intFreeSpells + intLimitMod));
                            if (intRitualPointsUsed > 0)
                                strText += string.Format(GlobalSettings.CultureInfo, "{0}{1}{2}{1}{3}", strColon,
                                                         strSpace, intRitualPointsUsed, strPoints);
                            await lblBuildRitualsBP.DoThreadSafeAsync(x => x.Text = strText, token)
                                                   .ConfigureAwait(false);
                        }
                    }
                    else if (intLimitMod == 0)
                    {
                        if (lblBuildPrepsBP != null)
                        {
                            await lblBuildPrepsBP.DoThreadSafeAsync(x => x.Text =
                                                                        intPrepPointsUsed.ToString(
                                                                            GlobalSettings.CultureInfo) + strSpace
                                                                        + strPoints, token).ConfigureAwait(false);
                        }

                        if (lblSpellsBP != null)
                        {
                            await lblSpellsBP.DoThreadSafeAsync(x => x.Text =
                                                                    intSpellPointsUsed.ToString(
                                                                        GlobalSettings.CultureInfo) + strSpace
                                                                    + strPoints, token).ConfigureAwait(false);
                        }

                        if (lblBuildRitualsBP != null)
                        {
                            await lblBuildRitualsBP.DoThreadSafeAsync(x => x.Text =
                                                                          intRitualPointsUsed.ToString(
                                                                              GlobalSettings.CultureInfo) + strSpace
                                                                          + strPoints, token).ConfigureAwait(false);
                        }
                    }
                    else
                    {
                        //TODO: Make the costs render better, currently looks wrong as hell
                        strFormat = "{0}" + strOf + "{1}" + strColon + strSpace + "{2}" + strSpace + strPoints;
                        if (lblBuildPrepsBP != null)
                        {
                            await lblBuildPrepsBP.DoThreadSafeAsync(x => x.Text =
                                                                        string.Format(
                                                                            GlobalSettings.CultureInfo, strFormat,
                                                                            prepPoints + spellPoints + ritualPoints
                                                                            - 2 * intLimitMod,
                                                                            spellPoints + ritualPoints - intLimitMod,
                                                                            intPrepPointsUsed), token)
                                                 .ConfigureAwait(false);
                        }

                        if (lblSpellsBP != null)
                        {
                            await lblSpellsBP.DoThreadSafeAsync(x => x.Text =
                                                                    string.Format(GlobalSettings.CultureInfo, strFormat,
                                                                        prepPoints + spellPoints + ritualPoints
                                                                        - 2 * intLimitMod,
                                                                        prepPoints + ritualPoints - intLimitMod,
                                                                        intSpellPointsUsed), token)
                                             .ConfigureAwait(false);
                        }

                        if (lblBuildRitualsBP != null)
                        {
                            await lblBuildRitualsBP.DoThreadSafeAsync(x => x.Text =
                                                                          string.Format(
                                                                              GlobalSettings.CultureInfo, strFormat,
                                                                              prepPoints + spellPoints + ritualPoints
                                                                              - 2 * intLimitMod,
                                                                              prepPoints + spellPoints - intLimitMod,
                                                                              intRitualPointsUsed), token)
                                                   .ConfigureAwait(false);
                        }
                    }
                }
            }

            intFreestyleBP += intSpellPointsUsed + intRitualPointsUsed + intPrepPointsUsed;

            token.ThrowIfCancellationRequested();
            // ------------------------------------------------------------------------------
            // Calculate the BP used by Foci.
            int intFociPointsUsed = 0;
            using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                          out StringBuilder sbdFociPointsTooltip))
            {
                await (await CharacterObject.GetFociAsync(token).ConfigureAwait(false)).ForEachWithBreakAsync(
                    async objFocus =>
                    {
                        token.ThrowIfCancellationRequested();
                        int intBindingCost = await objFocus.BindingKarmaCostAsync(token).ConfigureAwait(false);
                        intFociPointsUsed += intBindingCost;

                        if (!blnDoUIUpdate)
                            return true;
                        if (sbdFociPointsTooltip.Length > 0)
                            sbdFociPointsTooltip.AppendLine().Append(strSpace).Append('+').Append(strSpace);
                        sbdFociPointsTooltip
                            .Append(await objFocus.GearObject.GetCurrentDisplayNameAsync(token).ConfigureAwait(false))
                            .Append(strSpace).Append('(')
                            .Append(intBindingCost.ToString(GlobalSettings.CultureInfo))
                            .Append(')');
                        return true;
                    }, token).ConfigureAwait(false);

                intKarmaPointsRemain -= intFociPointsUsed;

                // Calculate the BP used by Stacked Foci.
                intKarmaPointsRemain -= await (await CharacterObject.GetStackedFociAsync(token).ConfigureAwait(false))
                                              .SumAsync(
                                                  async objFocus =>
                                                  {
                                                      token.ThrowIfCancellationRequested();
                                                      if (!objFocus.Bonded)
                                                          return 0;
                                                      int intBindingCost = await objFocus.GetBindingCostAsync(token)
                                                          .ConfigureAwait(false);
                                                      intFociPointsUsed += intBindingCost;

                                                      if (!blnDoUIUpdate)
                                                          return intBindingCost;
                                                      if (sbdFociPointsTooltip.Length > 0)
                                                          sbdFociPointsTooltip.AppendLine().Append(strSpace).Append('+')
                                                                              .Append(strSpace);
                                                      sbdFociPointsTooltip
                                                          .Append(await objFocus.GetCurrentDisplayNameAsync(token)
                                                                      .ConfigureAwait(false))
                                                          .Append(strSpace).Append('(')
                                                          .Append(intBindingCost.ToString(GlobalSettings.CultureInfo))
                                                          .Append(')');
                                                      return intBindingCost;
                                                  }, token).ConfigureAwait(false);

                intFreestyleBP += intFociPointsUsed;

                if (blnDoUIUpdate)
                {
                    await lblBuildFoci.SetToolTipAsync(sbdFociPointsTooltip.ToString(), token).ConfigureAwait(false);
                }
            }

            token.ThrowIfCancellationRequested();
            // ------------------------------------------------------------------------------
            // Calculate the BP used by Spirits and Sprites.
            int intSpiritPointsUsed = 0;
            int intSpritePointsUsed = 0;
            intKarmaPointsRemain -= await (await CharacterObject.GetSpiritsAsync(token).ConfigureAwait(false)).SumAsync(
                async objSpirit =>
                {
                    token.ThrowIfCancellationRequested();
                    int intLoopKarma = objSpirit.ServicesOwed
                                       * await CharacterObjectSettings.GetKarmaSpiritAsync(token).ConfigureAwait(false);
                    // Each Sprite costs KarmaSpirit x Services Owed.
                    int intReturn = intLoopKarma;
                    if (objSpirit.EntityType == SpiritType.Spirit)
                    {
                        intSpiritPointsUsed += intLoopKarma;
                        // Each Fettered Spirit costs 3 x Force.
                        if (objSpirit.Fettered)
                        {
                            int intTemp = objSpirit.Force
                                          * await CharacterObjectSettings.GetKarmaSpiritFetteringAsync(token)
                                                                         .ConfigureAwait(false);
                            intReturn += intTemp;
                            intSpiritPointsUsed += intTemp;
                        }
                    }
                    else
                    {
                        intSpritePointsUsed += intLoopKarma;
                    }

                    return intReturn;
                }, token: token).ConfigureAwait(false);
            intFreestyleBP += intSpiritPointsUsed + intSpritePointsUsed;

            token.ThrowIfCancellationRequested();
            // ------------------------------------------------------------------------------
            // Calculate the BP used by Complex Forms.
            int intFormsPointsUsed = await (await CharacterObject.GetComplexFormsAsync(token).ConfigureAwait(false))
                                           .CountAsync(x => x.Grade == 0, token).ConfigureAwait(false);
            int intCfpLimit = await CharacterObject.GetCFPLimitAsync(token).ConfigureAwait(false);
            if (intFormsPointsUsed > intCfpLimit)
                intKarmaPointsRemain -= (intFormsPointsUsed - intCfpLimit)
                                        * await CharacterObject.GetComplexFormKarmaCostAsync(token)
                                                               .ConfigureAwait(false);
            intFreestyleBP += intFormsPointsUsed;

            token.ThrowIfCancellationRequested();
            // ------------------------------------------------------------------------------
            // Calculate the BP used by Programs and Advanced Programs.
            int intAIAdvancedProgramPointsUsed = 0;
            int intAINormalProgramPointsUsed
                = await (await CharacterObject.GetAIProgramsAsync(token).ConfigureAwait(false)).SumAsync(objProgram =>
                {
                    token.ThrowIfCancellationRequested();
                    if (!objProgram.CanDelete)
                        return 0;
                    if (objProgram.IsAdvancedProgram)
                        ++intAIAdvancedProgramPointsUsed;
                    else
                        return 1;
                    return 0;
                }, token).ConfigureAwait(false);
            int intKarmaCost = 0;
            int intNumAdvancedProgramPointsAsNormalPrograms = 0;
            int intAiNormalProgramLimit
                = await CharacterObject.GetAINormalProgramLimitAsync(token).ConfigureAwait(false);
            int intAiAdvancedProgramLimit
                = await CharacterObject.GetAIAdvancedProgramLimitAsync(token).ConfigureAwait(false);
            int intAiNormalProgramKarmaCost
                = await CharacterObject.GetAIProgramKarmaCostAsync(token).ConfigureAwait(false);
            int intAiAdvancedProgramKarmaCost
                = await CharacterObject.GetAIAdvancedProgramKarmaCostAsync(token).ConfigureAwait(false);
            if (intAINormalProgramPointsUsed > intAiNormalProgramLimit)
            {
                if (intAIAdvancedProgramPointsUsed < intAiAdvancedProgramLimit)
                {
                    intNumAdvancedProgramPointsAsNormalPrograms = Math.Min(
                        intAINormalProgramPointsUsed - intAiNormalProgramLimit,
                        intAiAdvancedProgramLimit - intAIAdvancedProgramPointsUsed);
                    intAINormalProgramPointsUsed -= intNumAdvancedProgramPointsAsNormalPrograms;
                }

                if (intAINormalProgramPointsUsed > intAiNormalProgramLimit)
                    intKarmaCost += (intAINormalProgramPointsUsed - intAiNormalProgramLimit)
                                    * intAiNormalProgramKarmaCost;
            }

            if (intAIAdvancedProgramPointsUsed > intAiAdvancedProgramLimit)
            {
                intKarmaCost += (intAIAdvancedProgramPointsUsed - intAiAdvancedProgramLimit)
                                * intAiAdvancedProgramKarmaCost;
            }

            intKarmaPointsRemain -= intKarmaCost;
            intFreestyleBP += intAIAdvancedProgramPointsUsed + intAINormalProgramPointsUsed
                                                             + intNumAdvancedProgramPointsAsNormalPrograms;

            token.ThrowIfCancellationRequested();
            // ------------------------------------------------------------------------------
            // Calculate the BP used by Initiation.
            int intInitiationPoints
                = await (await CharacterObject.GetInitiationGradesAsync(token).ConfigureAwait(false)).SumAsync(
                    async objGrade =>
                    {
                        int intLoop = objGrade.KarmaCost;
                        // Add the Karma cost of extra Metamagic/Echoes to the Initiation cost.
                        int metamagicKarma
                            = Math.Max(
                                await (await CharacterObject.GetMetamagicsAsync(token).ConfigureAwait(false))
                                      .CountAsync(x => x.Grade == objGrade.Grade, token: token).ConfigureAwait(false)
                                - 1,
                                0);
                        intLoop
                            += await CharacterObjectSettings.GetKarmaMetamagicAsync(token).ConfigureAwait(false)
                               * metamagicKarma;
                        return intLoop;
                    }, token).ConfigureAwait(false);

            // Add the Karma cost of extra Metamagic/Echoes to the Initiation cost.
            intInitiationPoints += await (await CharacterObject.GetEnhancementsAsync(token).ConfigureAwait(false))
                                         .GetCountAsync(token).ConfigureAwait(false) * 2;
            intInitiationPoints += await (await CharacterObject.GetPowersAsync(token).ConfigureAwait(false))
                                         .SumAsync(objPower => objPower.Enhancements.GetCountAsync(token).AsTask(),
                                                   token).ConfigureAwait(false) * 2;

            // Joining a Network does not cost Karma for Technomancers, so this only applies to Magicians/Adepts.
            // Check to see if the character is a member of a Group.
            if (await CharacterObject.GetGroupMemberAsync(token).ConfigureAwait(false)
                && await CharacterObject.GetMAGEnabledAsync(token).ConfigureAwait(false))
                intInitiationPoints
                    += await CharacterObjectSettings.GetKarmaJoinGroupAsync(token).ConfigureAwait(false);

            intKarmaPointsRemain -= intInitiationPoints;
            intFreestyleBP += intInitiationPoints;

            // Add the Karma cost of any Critter Powers.
            await (await CharacterObject.GetCritterPowersAsync(token).ConfigureAwait(false)).ForEachAsync(
                objPower => intKarmaPointsRemain -= objPower.Karma, token).ConfigureAwait(false);

            await CharacterObject.SetKarmaAsync(intKarmaPointsRemain, token).ConfigureAwait(false);

            if (!blnDoUIUpdate)
                return intKarmaPointsRemain;
            token.ThrowIfCancellationRequested();
            await lblKarmaMetatypeBP.DoThreadSafeAsync(
                                        x => x.Text = intMetatypeBP.ToString(GlobalSettings.CultureInfo) + strSpace
                                            + strPoints, token: token)
                                    .ConfigureAwait(false);
            using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                          out StringBuilder sbdContactPoints))
            {
                sbdContactPoints.Append(intContactPointsLeft.ToString(GlobalSettings.CultureInfo));
                if (blnFriendsInHighPlaces)
                {
                    sbdContactPoints.Append('/')
                                    .Append(Math.Max(0, intChaValue * 4 - intHighPlacesFriends)
                                                .ToString(GlobalSettings.CultureInfo));
                }

                sbdContactPoints.Append(strOf).Append(intContactPoints.ToString(GlobalSettings.CultureInfo));
                if (blnFriendsInHighPlaces)
                {
                    sbdContactPoints.Append('/')
                                    .Append((intChaValue * 4).ToString(GlobalSettings.CultureInfo));
                }

                if (intPointsInContacts > 0 || intChaValue * 4 < intHighPlacesFriends)
                {
                    sbdContactPoints.Append(strSpace).Append('(')
                                    .Append(intPointsInContacts.ToString(GlobalSettings.CultureInfo)).Append(strSpace)
                                    .Append(strPoints).Append(')');
                }

                string strContactPoints = sbdContactPoints.ToString();
                await lblContactsBP.DoThreadSafeAsync(x => x.Text = strContactPoints, token).ConfigureAwait(false);
                await lblContactPoints.DoThreadSafeAsync(x => x.Text = strContactPoints, token).ConfigureAwait(false);
            }

            string strTemp
                = await BuildAttributes(
                    await (await CharacterObject.GetAttributeSectionAsync(token).ConfigureAwait(false))
                          .GetAttributeListAsync(token).ConfigureAwait(false), token: token).ConfigureAwait(false);
            token.ThrowIfCancellationRequested();
            await lblAttributesBP.DoThreadSafeAsync(x => x.Text = strTemp, token).ConfigureAwait(false);
            string strTemp2
                = await BuildAttributes(
                        await (await CharacterObject.GetAttributeSectionAsync(token).ConfigureAwait(false))
                              .GetSpecialAttributeListAsync(token).ConfigureAwait(false), null, true, token)
                    .ConfigureAwait(false);
            token.ThrowIfCancellationRequested();
            await lblPBuildSpecial.DoThreadSafeAsync(x => x.Text = strTemp2, token).ConfigureAwait(false);
            await lblMartialArtsBP
                  .DoThreadSafeAsync(
                      x => x.Text = intMartialArtsPoints.ToString(GlobalSettings.CultureInfo) + strSpace + strPoints,
                      token).ConfigureAwait(false);
            await lblNuyenBP
                  .DoThreadSafeAsync(
                      x => x.Text = intNuyenBP.ToString(GlobalSettings.CultureInfo) + strSpace + strPoints, token)
                  .ConfigureAwait(false);
            await lblFociBP
                  .DoThreadSafeAsync(
                      x => x.Text = intFociPointsUsed.ToString(GlobalSettings.CultureInfo) + strSpace + strPoints,
                      token).ConfigureAwait(false);
            await lblSpiritsBP
                  .DoThreadSafeAsync(
                      x => x.Text = intSpiritPointsUsed.ToString(GlobalSettings.CultureInfo) + strSpace + strPoints,
                      token).ConfigureAwait(false);
            await lblSpritesBP
                  .DoThreadSafeAsync(
                      x => x.Text = intSpritePointsUsed.ToString(GlobalSettings.CultureInfo) + strSpace + strPoints,
                      token).ConfigureAwait(false);
            using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                          out StringBuilder sbdComplexFormsBP))
            {
                if (intCfpLimit > 0)
                {
                    sbdComplexFormsBP.Append(intFormsPointsUsed.ToString(GlobalSettings.CultureInfo)).Append(strOf)
                                     .Append(intCfpLimit.ToString(GlobalSettings.CultureInfo));
                    if (intFormsPointsUsed > intCfpLimit)
                    {
                        sbdComplexFormsBP.Append(strColon).Append(strSpace)
                                         .Append(((intFormsPointsUsed - intCfpLimit)
                                                  * await CharacterObject.GetComplexFormKarmaCostAsync(token)
                                                                         .ConfigureAwait(false))
                                                 .ToString(GlobalSettings.CultureInfo)).Append(strSpace)
                                         .Append(strPoints);
                    }
                }
                else
                {
                    sbdComplexFormsBP
                        .Append(((intFormsPointsUsed - intCfpLimit)
                                 * await CharacterObject.GetComplexFormKarmaCostAsync(token).ConfigureAwait(false))
                                .ToString(GlobalSettings.CultureInfo)).Append(strSpace).Append(strPoints);
                }

                await lblComplexFormsBP.DoThreadSafeAsync(x => x.Text = sbdComplexFormsBP.ToString(), token)
                                       .ConfigureAwait(false);
            }

            await lblAINormalProgramsBP.DoThreadSafeAsync(
                x => x.Text = ((intAINormalProgramPointsUsed - intAiNormalProgramLimit)
                               * intAiNormalProgramKarmaCost).ToString(GlobalSettings.CultureInfo) + strSpace
                    + strPoints, token).ConfigureAwait(false);
            await lblAIAdvancedProgramsBP.DoThreadSafeAsync(
                x => x.Text = ((intAIAdvancedProgramPointsUsed - intAiAdvancedProgramLimit)
                               * intAiAdvancedProgramKarmaCost).ToString(GlobalSettings.CultureInfo)
                              + strSpace + strPoints, token).ConfigureAwait(false);
            await lblInitiationBP.DoThreadSafeAsync(
                x => x.Text = intInitiationPoints.ToString(GlobalSettings.CultureInfo)
                              + strSpace + strPoints, token).ConfigureAwait(false);
            // ------------------------------------------------------------------------------
            // Update the number of BP remaining in the StatusBar.
            Color objControlTextColor = await ColorManager.GetControlTextAsync(token).ConfigureAwait(false);
            int intBuildKarma = _blnFreestyle
                ? 0
                : await CharacterObjectSettings.GetBuildKarmaAsync(token).ConfigureAwait(false);
            await tsMain.DoThreadSafeAsync(() =>
            {
                tslKarmaRemaining.Text = intKarmaPointsRemain.ToString(GlobalSettings.CultureInfo);
                if (_blnFreestyle)
                {
                    tslKarma.Text = Math.Max(intFreestyleBP, intFreestyleBPMin).ToString(GlobalSettings.CultureInfo);
                    tslKarma.ForeColor = intFreestyleBP < intFreestyleBPMin
                        ? ColorManager.ErrorColor
                        : objControlTextColor;
                }
                else
                {
                    tslKarma.Text = intBuildKarma.ToString(GlobalSettings.CultureInfo);
                    tslKarma.ForeColor = objControlTextColor;
                }
            }, token).ConfigureAwait(false);

            return intKarmaPointsRemain;
        }

        private async Task UpdateSkillRelatedInfo(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            string strKarma = await LanguageManager.GetStringAsync("String_Karma", token: token).ConfigureAwait(false);
            string strOf = await LanguageManager.GetStringAsync("String_Of", token: token).ConfigureAwait(false);
            string strColon = await LanguageManager.GetStringAsync("String_Colon", token: token).ConfigureAwait(false);
            string strSpace = await LanguageManager.GetStringAsync("String_Space", token: token).ConfigureAwait(false);
            string strZeroKarma = 0.ToString(GlobalSettings.CultureInfo) + strSpace + strKarma;
            //Update Skill Labels
            //Active skills
            string strTemp = strZeroKarma;
            int intActiveSkillPointsMaximum = CharacterObject.SkillsSection.SkillPointsMaximum;
            if (intActiveSkillPointsMaximum > 0)
            {
                strTemp = (await CharacterObject.SkillsSection.GetSkillPointsAsync(token).ConfigureAwait(false))
                    .ToString(GlobalSettings.CultureInfo) + strOf
                                                          + intActiveSkillPointsMaximum.ToString(
                                                              GlobalSettings.CultureInfo);
            }

            int intActiveSkillsTotalCostKarma = await CharacterObject.SkillsSection.Skills
                                                                     .SumAsync(
                                                                         x => x.GetCurrentKarmaCostAsync(token)
                                                                               .AsTask(), token: token)
                                                                     .ConfigureAwait(false);
            if (intActiveSkillsTotalCostKarma > 0)
            {
                if (strTemp != strZeroKarma)
                {
                    strTemp += strColon + strSpace + intActiveSkillsTotalCostKarma.ToString(GlobalSettings.CultureInfo)
                               + strSpace + strKarma;
                }
                else
                {
                    strTemp = intActiveSkillsTotalCostKarma.ToString(GlobalSettings.CultureInfo) + strSpace + strKarma;
                }
            }

            await lblActiveSkillsBP.DoThreadSafeAsync(x => x.Text = strTemp, token).ConfigureAwait(false);
            //Knowledge skills
            string strTemp2 = strZeroKarma;
            int intKnowledgeSkillPointsMaximum = await CharacterObject.SkillsSection.GetKnowledgeSkillPointsAsync(token)
                                                                      .ConfigureAwait(false);
            if (intKnowledgeSkillPointsMaximum > 0)
            {
                strTemp2
                    = (await CharacterObject.SkillsSection.GetKnowledgeSkillPointsRemainAsync(token)
                                            .ConfigureAwait(false)).ToString(GlobalSettings.CultureInfo) + strOf
                    + intKnowledgeSkillPointsMaximum.ToString(GlobalSettings.CultureInfo);
            }

            int intKnowledgeSkillsTotalCostKarma
                = await CharacterObject.SkillsSection.KnowledgeSkills
                                       .SumAsync(x => x.GetCurrentKarmaCostAsync(token).AsTask(), token: token)
                                       .ConfigureAwait(false);
            if (intKnowledgeSkillsTotalCostKarma > 0)
            {
                if (strTemp2 != strZeroKarma)
                {
                    strTemp2 += strColon + strSpace
                                         + intKnowledgeSkillsTotalCostKarma.ToString(GlobalSettings.CultureInfo)
                                         + strSpace + strKarma;
                }
                else
                {
                    strTemp2 = intKnowledgeSkillsTotalCostKarma.ToString(GlobalSettings.CultureInfo) + strSpace
                        + strKarma;
                }
            }

            await lblKnowledgeSkillsBP.DoThreadSafeAsync(x => x.Text = strTemp2, token).ConfigureAwait(false);
            //Groups
            string strTemp3 = strZeroKarma;
            int intSkillGroupPointsMaximum = CharacterObject.SkillsSection.SkillGroupPointsMaximum;
            if (intSkillGroupPointsMaximum > 0)
            {
                strTemp3
                    = (await CharacterObject.SkillsSection.GetSkillGroupPointsAsync(token).ConfigureAwait(false))
                    .ToString(GlobalSettings.CultureInfo) + strOf
                                                          + intSkillGroupPointsMaximum.ToString(
                                                              GlobalSettings.CultureInfo);
            }

            int intSkillGroupsTotalCostKarma = await CharacterObject.SkillsSection.SkillGroups
                                                                    .SumAsync(
                                                                        x => x.GetCurrentKarmaCostAsync(token).AsTask(),
                                                                        token: token).ConfigureAwait(false);
            if (intSkillGroupsTotalCostKarma > 0)
            {
                if (strTemp3 != strZeroKarma)
                {
                    strTemp3 += strColon + strSpace + intSkillGroupsTotalCostKarma.ToString(GlobalSettings.CultureInfo)
                                + strSpace + strKarma;
                }
                else
                {
                    strTemp3 = intSkillGroupsTotalCostKarma.ToString(GlobalSettings.CultureInfo) + strSpace + strKarma;
                }
            }

            await lblSkillGroupsBP.DoThreadSafeAsync(x => x.Text = strTemp3, token).ConfigureAwait(false);
        }

        private int _intFileUpdateQueued;

        protected override async void LiveUpdateFromCharacterFile(object sender, FileSystemEventArgs e)
        {
            if (Interlocked.Increment(ref _intFileUpdateQueued) > 1)
            {
                Interlocked.Decrement(ref _intFileUpdateQueued);
                return;
            }

            try
            {
                while (IsDirty || IsLoading || SkipUpdate || IsCharacterUpdateRequested)
                    await Utils.SafeSleepAsync(GenericToken).ConfigureAwait(false);

                string strCharacterFile = CharacterObject.FileName;
                if (string.IsNullOrEmpty(strCharacterFile) || !File.Exists(strCharacterFile))
                    return;

                // Character is not dirty and their savefile was updated outside of Chummer5 while it is open, so reload them
                CursorWait objCursorWaitOuter
                    = await CursorWait.NewAsync(this, true, GenericToken).ConfigureAwait(false);
                try
                {
                    CursorWait objCursorWait
                        = await CursorWait.NewAsync(this, token: GenericToken).ConfigureAwait(false);
                    try
                    {
                        using (ThreadSafeForm<LoadingBar> frmLoadingBar = await Program.CreateAndShowProgressBarAsync(
                                   Path.GetFileName(strCharacterFile),
                                   Character.NumLoadingSections + 1, GenericToken).ConfigureAwait(false))
                        {
                            SkipUpdate = true;
                            try
                            {
                                await CharacterObject
                                      .LoadAsync(frmLoadingForm: frmLoadingBar.MyForm, token: GenericToken)
                                      .ConfigureAwait(false);
                                await frmLoadingBar.MyForm.PerformStepAsync(
                                    await LanguageManager.GetStringAsync("String_UI", token: GenericToken)
                                                         .ConfigureAwait(false),
                                    token: GenericToken).ConfigureAwait(false);

                                await this.DoThreadSafeAsync(() =>
                                {
                                    // Select the Magician's Tradition.
                                    if (CharacterObject.MagicTradition.Type == TraditionType.MAG)
                                        cboTradition.SelectedValue = CharacterObject.MagicTradition.SourceID;
                                    else if (cboTradition.SelectedIndex == -1 && cboTradition.Items.Count > 0)
                                        cboTradition.SelectedIndex = 0;

                                    // Select the Technomancer's Stream.
                                    if (CharacterObject.MagicTradition.Type == TraditionType.RES)
                                        cboStream.SelectedValue = CharacterObject.MagicTradition.SourceID;
                                    else if (cboStream.SelectedIndex == -1 && cboStream.Items.Count > 0)
                                        cboStream.SelectedIndex = 0;
                                }, GenericToken).ConfigureAwait(false);
                            }
                            finally
                            {
                                SkipUpdate = false;
                            }
                        }
                    }
                    finally
                    {
                        await objCursorWait.DisposeAsync().ConfigureAwait(false);
                    }

                    // Immediately call character update because we know it's necessary
                    Task tskUpdate = await RequestCharacterUpdate().ConfigureAwait(false);
                    try
                    {
                        await tskUpdate.ConfigureAwait(false);
                    }
                    catch (OperationCanceledException)
                    {
                        return;
                    }

                    IsDirty = false;

                    ConcurrentBag<string> lstInternalIdsNeedingReapplyImprovements
                        = await CharacterObject.TakeInternalIdsNeedingReapplyImprovementsAsync(GenericToken)
                                               .ConfigureAwait(false);
                    if (lstInternalIdsNeedingReapplyImprovements?.Count > 0 && !Utils.IsUnitTest
                                                                            && Program.ShowScrollableMessageBox(
                                                                                this,
                                                                                await LanguageManager
                                                                                    .GetStringAsync(
                                                                                        "Message_ImprovementLoadError",
                                                                                        token: GenericToken)
                                                                                    .ConfigureAwait(false),
                                                                                await LanguageManager
                                                                                    .GetStringAsync(
                                                                                        "MessageTitle_ImprovementLoadError",
                                                                                        token: GenericToken)
                                                                                    .ConfigureAwait(false),
                                                                                MessageBoxButtons.YesNo,
                                                                                MessageBoxIcon.Exclamation)
                                                                            == DialogResult.Yes)
                    {
                        await DoReapplyImprovements(lstInternalIdsNeedingReapplyImprovements,
                                                    GenericToken).ConfigureAwait(false);
                    }
                }
                finally
                {
                    await objCursorWaitOuter.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
            finally
            {
                Interlocked.Decrement(ref _intFileUpdateQueued);
            }
        }

        /// <summary>
        /// Update the Character information.
        /// </summary>
        protected override async Task DoUpdateCharacterInfo(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            using (await EnterReadLock.EnterAsync(CharacterObject, token).ConfigureAwait(false))
            {
                while (SkipUpdate)
                    await Utils.SafeSleepAsync(token).ConfigureAwait(false);
                SkipUpdate = true;
                try
                {
                    Task tskAutosave = Task.CompletedTask;
                    if (AutosaveStopWatch.Elapsed.Minutes >= 5 && IsDirty)
                    {
                        tskAutosave = AutoSaveCharacter(token);
                    }

                    CursorWait objCursorWait = await CursorWait.NewAsync(this, true, token).ConfigureAwait(false);
                    try
                    {
                        // TODO: DataBind these wherever possible
                        // Calculate the number of Build Points remaining.
                        await CalculateBP(true, token).ConfigureAwait(false);
                        await CalculateNuyen(token).ConfigureAwait(false);
                        if (await CharacterObject.GetMetatypeAsync(token).ConfigureAwait(false) == "Free Spirit"
                            && !await CharacterObject.GetIsCritterAsync(token).ConfigureAwait(false)
                            || (await CharacterObject.GetMetatypeCategoryAsync(token).ConfigureAwait(false)).EndsWith(
                                "Spirits", StringComparison.Ordinal))
                        {
                            await lblCritterPowerPointsLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                            .ConfigureAwait(false);
                            string strFreeSpiritPowerPoints = await CharacterObject
                                                                    .CalculateFreeSpiritPowerPointsAsync(token)
                                                                    .ConfigureAwait(false);
                            await lblCritterPowerPoints.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Text = strFreeSpiritPowerPoints;
                            }, token).ConfigureAwait(false);
                        }
                        else if (await CharacterObject.GetIsFreeSpriteAsync(token).ConfigureAwait(false))
                        {
                            await lblCritterPowerPointsLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                            .ConfigureAwait(false);
                            string strFreeSpritePowerPoints = await CharacterObject
                                                                    .CalculateFreeSpritePowerPointsAsync(token)
                                                                    .ConfigureAwait(false);
                            await lblCritterPowerPoints.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Text = strFreeSpritePowerPoints;
                            }, token).ConfigureAwait(false);
                        }
                        else
                        {
                            await lblCritterPowerPointsLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                            await lblCritterPowerPoints.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                        }

                        await Task.WhenAll(RefreshSelectedQuality(token), RefreshSelectedCyberware(token),
                                           RefreshSelectedArmor(token),
                                           RefreshSelectedGear(token), RefreshSelectedDrug(token),
                                           RefreshSelectedLifestyle(token),
                                           RefreshSelectedVehicle(token), RefreshSelectedWeapon(token),
                                           RefreshSelectedSpell(token),
                                           RefreshSelectedComplexForm(token), RefreshSelectedCritterPower(token),
                                           RefreshSelectedAIProgram(token), RefreshSelectedMetamagic(token),
                                           RefreshSelectedMartialArt(token), UpdateInitiationCost(token),
                                           UpdateSkillRelatedInfo(token)).ConfigureAwait(false);
                        await tskAutosave.ConfigureAwait(false);
                    }
                    finally
                    {
                        await objCursorWait.DisposeAsync().ConfigureAwait(false);
                    }
                }
                finally
                {
                    SkipUpdate = false;
                }
            }
        }

        /// <summary>
        /// Calculate the amount of Nuyen the character has remaining.
        /// </summary>
        private async ValueTask<decimal> CalculateNuyen(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            decimal decDeductions = 0;
            decimal decStolenDeductions = 0;
            decimal decStolenNuyenAllowance
                = await ImprovementManager.ValueOfAsync(CharacterObject, Improvement.ImprovementType.Nuyen,
                                                        strImprovedName: "Stolen", token: token).ConfigureAwait(false);
            token.ThrowIfCancellationRequested();
            ThreadSafeObservableCollection<Cyberware> lstCyberware
                = await CharacterObject.GetCyberwareAsync(token).ConfigureAwait(false);
            ThreadSafeObservableCollection<Armor> lstArmor
                = await CharacterObject.GetArmorAsync(token).ConfigureAwait(false);
            ThreadSafeObservableCollection<Weapon> lstWeapons
                = await CharacterObject.GetWeaponsAsync(token).ConfigureAwait(false);
            ThreadSafeObservableCollection<Gear> lstGear
                = await CharacterObject.GetGearAsync(token).ConfigureAwait(false);
            ThreadSafeObservableCollection<Vehicle> lstVehicles
                = await CharacterObject.GetVehiclesAsync(token).ConfigureAwait(false);
            ThreadSafeObservableCollection<Drug> lstDrugs
                = await CharacterObject.GetDrugsAsync(token).ConfigureAwait(false);
            //If the character has the Stolen Gear quality or something similar, we need to handle the nuyen a little differently.
            if (decStolenNuyenAllowance != 0)
            {
                decDeductions
                    += await lstCyberware.SumParallelAsync(x => x.GetNonStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                       + await lstArmor.SumParallelAsync(x => x.GetNonStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                       + await lstWeapons.SumParallelAsync(x => x.GetNonStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                       + await lstGear.SumParallelAsync(x => x.GetNonStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                       + await lstVehicles.SumParallelAsync(x => x.GetNonStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                       + await lstDrugs.SumParallelAsync(x => x.GetNonStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false);
                decStolenDeductions
                    += await lstCyberware.SumParallelAsync(x => x.GetStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                       + await lstArmor.SumParallelAsync(x => x.GetStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                       + await lstWeapons.SumParallelAsync(x => x.GetStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                       + await lstGear.SumParallelAsync(x => x.GetStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                       + await lstVehicles.SumParallelAsync(x => x.GetStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                       + await lstDrugs.SumParallelAsync(x => x.GetStolenTotalCostAsync(token).AsTask(), token).ConfigureAwait(false);
            }
            else
            {
                decDeductions += await lstCyberware.SumParallelAsync(x => x.GetTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                                 + await lstArmor.SumParallelAsync(x => x.GetTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                                 + await lstWeapons.SumParallelAsync(x => x.GetTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                                 + await lstGear.SumParallelAsync(x => x.GetTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                                 + await lstVehicles.SumParallelAsync(x => x.GetTotalCostAsync(token).AsTask(), token).ConfigureAwait(false)
                                 + await lstDrugs.SumParallelAsync(x => x.GetTotalCostAsync(token).AsTask(), token).ConfigureAwait(false);
            }

            token.ThrowIfCancellationRequested();
            // Initiation Grade cost.
            decDeductions += await (await CharacterObject.GetLifestylesAsync(token).ConfigureAwait(false))
                                   .SumParallelAsync(x => x.GetTotalCostAsync(token).AsTask(), token)
                                   .ConfigureAwait(false)
                             + 10000 * await (await CharacterObject.GetInitiationGradesAsync(token)
                                                                   .ConfigureAwait(false))
                                             .CountAsync(x => x.Schooling, token).ConfigureAwait(false);
            token.ThrowIfCancellationRequested();

            await CharacterObject.SetStolenNuyenAsync(decStolenNuyenAllowance - decStolenDeductions, token)
                                 .ConfigureAwait(false);
            decimal decReturn = await CharacterObject.GetTotalStartingNuyenAsync(token).ConfigureAwait(false)
                                - decDeductions
                                + _decStartingLifestyleNuyen;
            await CharacterObject.SetNuyenAsync(decReturn, token).ConfigureAwait(false);
            return decReturn;
        }

        /// <summary>
        /// Refresh the information for the currently displayed piece of Cyberware.
        /// </summary>
        private async Task RefreshSelectedCyberware(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                await flpCyberware.DoThreadSafeAsync(x => x.SuspendLayout(), token).ConfigureAwait(false);
                try
                {
                    TreeNode objSelectedNode = await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode, token)
                                                                 .ConfigureAwait(false);
                    object objSelectedNodeTag = objSelectedNode?.Tag;
                    if (objSelectedNodeTag == null || objSelectedNode.Level == 0)
                    {
                        await gpbCyberwareCommon.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await gpbCyberwareMatrix.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);

                        // Buttons
                        await cmdDeleteCyberware
                              .DoThreadSafeAsync(x => x.Enabled = objSelectedNodeTag is ICanRemove, token)
                              .ConfigureAwait(false);
                        return;
                    }

                    if (objSelectedNodeTag is IHasRating objHasRating)
                    {
                        string strText = string.Format(
                            GlobalSettings.CultureInfo,
                            await LanguageManager.GetStringAsync(
                                "Label_RatingFormat", token: token).ConfigureAwait(false),
                            await LanguageManager.GetStringAsync(
                                objHasRating.RatingLabel, token: token).ConfigureAwait(false));
                        await lblCyberwareRatingLabel.DoThreadSafeAsync(x => x.Text = strText, token)
                                                     .ConfigureAwait(false);
                    }

                    string strESSFormat = CharacterObjectSettings.EssenceFormat;
                    if (objSelectedNodeTag is IHasSource objSelected)
                    {
                        await lblCyberwareSourceLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                     .ConfigureAwait(false);
                        await lblCyberwareSource.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await objSelected.SetSourceDetailAsync(lblCyberwareSource, token).ConfigureAwait(false);
                    }
                    else
                    {
                        await lblCyberwareSourceLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                     .ConfigureAwait(false);
                        await lblCyberwareSource.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    }

                    if (objSelectedNodeTag is IHasStolenProperty loot && (await ImprovementManager
                            .GetCachedImprovementListForValueOfAsync(
                                CharacterObject,
                                Improvement.ImprovementType.Nuyen, "Stolen", token: token).ConfigureAwait(false))
                        .Count > 0)
                    {
                        await chkCyberwareStolen.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await chkCyberwareStolen.DoThreadSafeAsync(x => x.Checked = loot.Stolen, token)
                                                .ConfigureAwait(false);
                    }
                    else
                    {
                        await chkCyberwareStolen.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    }

                    switch (objSelectedNodeTag)
                    {
                        // Locate the selected piece of Cyberware.
                        case Cyberware objCyberware:
                        {
                            await gpbCyberwareCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                    .ConfigureAwait(false);
                            await gpbCyberwareMatrix
                                  .DoThreadSafeAsync(
                                      x => x.Visible = objCyberware.SourceType
                                                       == Improvement.ImprovementSource.Cyberware, token)
                                  .ConfigureAwait(false);

                            // Buttons
                            await cmdDeleteCyberware
                                  .DoThreadSafeAsync(x => x.Enabled = string.IsNullOrEmpty(objCyberware.ParentID),
                                                     token).ConfigureAwait(false);

                            // gpbCyberwareCommon
                            string strName = await objCyberware.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                            await lblCyberwareName
                                  .DoThreadSafeAsync(x => x.Text = strName, token)
                                  .ConfigureAwait(false);
                            string strCategory = await objCyberware.DisplayCategoryAsync(GlobalSettings.Language, token)
                                                                   .ConfigureAwait(false);
                            await lblCyberwareCategory.DoThreadSafeAsync(x => x.Text = strCategory, token)
                                                      .ConfigureAwait(false);
                            // Cyberware Grade is not available for Genetech items.
                            // Cyberware Grade is only available on root-level items (sub-components cannot have a different Grade than the piece they belong to).
                            await cboCyberwareGrade.DoThreadSafeAsync(x => x.Enabled = objCyberware.Parent == null
                                                                          && !objCyberware.Suite
                                                                          && string.IsNullOrWhiteSpace(
                                                                              objCyberware.ForceGrade), token)
                                                   .ConfigureAwait(false);
                            XPathNavigator xmlCyberware
                                = await objCyberware.GetNodeXPathAsync(token: token).ConfigureAwait(false);
                            HashSet<string> setDisallowedGrades = null;
                            if (xmlCyberware != null
                                && await xmlCyberware.SelectSingleNodeAndCacheExpressionAsync("bannedgrades", token)
                                                     .ConfigureAwait(false) != null)
                            {
                                setDisallowedGrades = new HashSet<string>();
                                foreach (XPathNavigator objNode in await xmlCyberware
                                                                         .SelectAndCacheExpressionAsync(
                                                                             "bannedgrades/grade", token)
                                                                         .ConfigureAwait(false))
                                {
                                    setDisallowedGrades.Add(objNode.Value);
                                }
                            }

                            await PopulateCyberwareGradeList(
                                objCyberware.SourceType == Improvement.ImprovementSource.Bioware,
                                setDisallowedGrades,
                                await cboCyberwareGrade.DoThreadSafeFuncAsync(x => x.Enabled, token)
                                                       .ConfigureAwait(false)
                                    ? string.Empty
                                    : objCyberware.Grade.Name, token).ConfigureAwait(false);
                            await lblCyberwareGradeLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                            await cboCyberwareGrade.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.SelectedValue = objCyberware.Grade.Name;
                                if (x.SelectedIndex == -1 && x.Items.Count > 0)
                                    x.SelectedIndex = 0;
                            }, token).ConfigureAwait(false);
                            await lblCyberwareEssenceLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                          .ConfigureAwait(false);
                            await lblCyberwareEssence.DoThreadSafeAsync(x => x.Visible = true, token)
                                                     .ConfigureAwait(false);
                            if (objCyberware.Parent == null || objCyberware.AddToParentESS)
                            {
                                decimal decCalculatedEss
                                    = await objCyberware.GetCalculatedESSAsync(token).ConfigureAwait(false);
                                if (objCyberware.Parent == null)
                                    await lblCyberwareEssence
                                          .DoThreadSafeAsync(
                                              x => x.Text = decCalculatedEss.ToString(
                                                  strESSFormat, GlobalSettings.CultureInfo), token)
                                          .ConfigureAwait(false);
                                else
                                    await lblCyberwareEssence
                                          .DoThreadSafeAsync(
                                              x => x.Text = '+'
                                                            + decCalculatedEss.ToString(
                                                                strESSFormat, GlobalSettings.CultureInfo), token)
                                          .ConfigureAwait(false);
                            }
                            else
                                await lblCyberwareEssence
                                      .DoThreadSafeAsync(
                                          x => x.Text = 0.0m.ToString(strESSFormat, GlobalSettings.CultureInfo), token)
                                      .ConfigureAwait(false);

                            string strAvail = await objCyberware.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblCyberwareAvail
                                  .DoThreadSafeAsync(x => x.Text = strAvail, token)
                                  .ConfigureAwait(false);
                            await cmdCyberwareChangeMount
                                  .DoThreadSafeAsync(
                                      x => x.Visible = !string.IsNullOrEmpty(objCyberware.PlugsIntoModularMount), token)
                                  .ConfigureAwait(false);
                            // Enable and set the Rating values as needed.
                            if (objCyberware.MaxRating == 0)
                            {
                                await nudCyberwareRating.DoThreadSafeAsync(x =>
                                {
                                    x.Maximum = 0;
                                    x.Minimum = 0;
                                    x.Value = 0;
                                    x.Visible = false;
                                }, token).ConfigureAwait(false);
                                await lblCyberwareRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                             .ConfigureAwait(false);
                            }
                            else
                            {
                                await nudCyberwareRating.DoThreadSafeAsync(x =>
                                {
                                    x.Maximum = objCyberware.MaxRating;
                                    x.Minimum = objCyberware.MinRating;
                                    x.Value = objCyberware.Rating;
                                    x.Visible = true;
                                    x.Enabled = x.Maximum != x.Minimum
                                                && string.IsNullOrEmpty(objCyberware.ParentID);
                                }, token).ConfigureAwait(false);
                                await lblCyberwareRatingLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                             .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await lblCyberwareCapacity
                                  .DoThreadSafeAsync(x => x.Text = objCyberware.DisplayCapacity, token)
                                  .ConfigureAwait(false);
                            string strCost = (await objCyberware.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token).ConfigureAwait(false);
                            await lblCyberwareCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                                  .ConfigureAwait(false);
                            if (await objCyberware.GetIsLimbAsync(token).ConfigureAwait(false))
                            {
                                await lblCyberlimbAGILabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                          .ConfigureAwait(false);
                                await lblCyberlimbAGI.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = objCyberware.GetAttributeTotalValue("AGI")
                                                         .ToString(GlobalSettings.CultureInfo);
                                }, token).ConfigureAwait(false);
                                await lblCyberlimbSTRLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                          .ConfigureAwait(false);
                                await lblCyberlimbSTR.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = objCyberware.GetAttributeTotalValue("STR")
                                                         .ToString(GlobalSettings.CultureInfo);
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await lblCyberlimbAGILabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                                await lblCyberlimbAGI.DoThreadSafeAsync(x => x.Visible = false, token)
                                                     .ConfigureAwait(false);
                                await lblCyberlimbSTRLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                                await lblCyberlimbSTR.DoThreadSafeAsync(x => x.Visible = false, token)
                                                     .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = CharacterObject.GenerateBlackMarketMappings(
                                                                     await (await CharacterObject
                                                                               .LoadDataXPathAsync(
                                                                                   objCyberware.SourceType
                                                                                   == Improvement.ImprovementSource
                                                                                       .Cyberware
                                                                                       ? "cyberware.xml"
                                                                                       : "bioware.xml", token: token)
                                                                               .ConfigureAwait(false))
                                                                           .SelectSingleNodeAndCacheExpressionAsync(
                                                                               "/chummer", token: token)
                                                                           .ConfigureAwait(false), token)
                                                                 .Contains(objCyberware.Category);
                                await chkCyberwareBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = !string.IsNullOrEmpty(objCyberware.ParentID)
                                        ? objCyberware.Parent?.DiscountCost == true
                                        : objCyberware.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkCyberwareBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await chkPrototypeTranshuman.DoThreadSafeAsync(x =>
                            {
                                x.Visible = CharacterObject.IsPrototypeTranshuman;
                                x.Enabled = objCyberware.Parent == null
                                            && objCyberware.SourceType == Improvement.ImprovementSource.Bioware;
                                x.Checked = objCyberware.PrototypeTranshuman && CharacterObject.IsPrototypeTranshuman;
                            }, token).ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // gpbCyberwareMatrix
                            if (await gpbCyberwareMatrix.DoThreadSafeFuncAsync(x => x.Visible, token)
                                                        .ConfigureAwait(false))
                            {
                                int intDeviceRating = objCyberware.GetTotalMatrixAttribute("Device Rating");
                                await lblCyberDeviceRating
                                      .DoThreadSafeAsync(
                                          x => x.Text = intDeviceRating.ToString(GlobalSettings.CultureInfo), token)
                                      .ConfigureAwait(false);
                                await objCyberware.RefreshMatrixAttributeComboBoxesAsync(
                                    cboCyberwareAttack, cboCyberwareSleaze, cboCyberwareDataProcessing,
                                    cboCyberwareFirewall, token).ConfigureAwait(false);

                                await chkCyberwareActiveCommlink.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = objCyberware.IsCommlink;
                                    x.Checked = objCyberware.IsActiveCommlink(CharacterObject);
                                }, token).ConfigureAwait(false);
                                if (CharacterObject.IsAI)
                                {
                                    await chkCyberwareHomeNode.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Checked = objCyberware.IsHomeNode(CharacterObject);
                                        x.Enabled = chkCyberwareActiveCommlink.Visible &&
                                                    objCyberware.GetTotalMatrixAttribute("Program Limit")
                                                    >= (CharacterObject.DEP.TotalValue > intDeviceRating
                                                        ? 2
                                                        : 1);
                                    }, token).ConfigureAwait(false);
                                }
                                else
                                    await chkCyberwareHomeNode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                              .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            string strNodeText
                                = await objCyberware.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                            await treCyberware
                                  .DoThreadSafeAsync(() => objSelectedNode.Text = strNodeText,
                                                     token).ConfigureAwait(false);
                            break;
                        }
                        case Gear objGear:
                        {
                            await gpbCyberwareCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                    .ConfigureAwait(false);
                            await gpbCyberwareMatrix.DoThreadSafeAsync(x => x.Visible = true, token)
                                                    .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // Buttons
                            await cmdDeleteCyberware
                                  .DoThreadSafeAsync(x => x.Enabled = !objGear.IncludedInParent, token)
                                  .ConfigureAwait(false);
                            // gpbCyberwareCommon
                            string strName = await objGear.GetCurrentDisplayNameShortAsync(token).ConfigureAwait(false);
                            await lblCyberwareName
                                  .DoThreadSafeAsync(x => x.Text = strName, token)
                                  .ConfigureAwait(false);
                            await lblCyberwareCategory
                                  .DoThreadSafeAsync(x => x.Text = objGear.DisplayCategory(GlobalSettings.Language),
                                                     token).ConfigureAwait(false);
                            await lblCyberwareGradeLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            await cboCyberwareGrade.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            await lblCyberwareEssenceLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                            await lblCyberwareEssence.DoThreadSafeAsync(x => x.Visible = false, token)
                                                     .ConfigureAwait(false);
                            string strAvail = await objGear.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblCyberwareAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                                   .ConfigureAwait(false);
                            await cmdCyberwareChangeMount.DoThreadSafeAsync(x => x.Visible = false, token)
                                                         .ConfigureAwait(false);
                            int intGearMaxRatingValue = objGear.MaxRatingValue;
                            if (intGearMaxRatingValue > 0 && intGearMaxRatingValue != int.MaxValue)
                            {
                                int intGearMinRatingValue = objGear.MinRatingValue;
                                await nudCyberwareRating.DoThreadSafeAsync(x =>
                                {
                                    if (objGear.MinRatingValue > 0)
                                        x.Minimum = intGearMinRatingValue;
                                    else if (intGearMinRatingValue == 0 && objGear.Name.Contains("Credstick,"))
                                        x.Minimum = 0;
                                    else
                                        x.Minimum = 1;
                                    x.Maximum = intGearMaxRatingValue;
                                    x.Value = objGear.Rating;
                                    x.Enabled = nudCyberwareRating.Minimum != nudCyberwareRating.Maximum
                                                && string.IsNullOrEmpty(objGear.ParentID);
                                    x.Visible = true;
                                }, token).ConfigureAwait(false);
                                await lblCyberwareRatingLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                             .ConfigureAwait(false);
                            }
                            else
                            {
                                await nudCyberwareRating.DoThreadSafeAsync(x =>
                                {
                                    x.Minimum = 0;
                                    x.Maximum = 0;
                                    x.Visible = false;
                                }, token).ConfigureAwait(false);
                                await lblCyberwareRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                             .ConfigureAwait(false);
                            }

                            await lblCyberwareCapacity.DoThreadSafeAsync(x => x.Text = objGear.DisplayCapacity, token)
                                                      .ConfigureAwait(false);
                            string strCost = (await objGear.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token)
                                                                    .ConfigureAwait(false);
                            await lblCyberwareCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                                  .ConfigureAwait(false);
                            await lblCyberlimbAGILabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                      .ConfigureAwait(false);
                            await lblCyberlimbAGI.DoThreadSafeAsync(x => x.Visible = false, token)
                                                 .ConfigureAwait(false);
                            await lblCyberlimbSTRLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                      .ConfigureAwait(false);
                            await lblCyberlimbSTR.DoThreadSafeAsync(x => x.Visible = false, token)
                                                 .ConfigureAwait(false);
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = !objGear.IncludedInParent && CharacterObject
                                                                               .GenerateBlackMarketMappings(
                                                                                   await (await CharacterObject
                                                                                           .LoadDataXPathAsync(
                                                                                               "gear.xml", token: token)
                                                                                           .ConfigureAwait(false))
                                                                                       .SelectSingleNodeAndCacheExpressionAsync(
                                                                                           "/chummer", token: token)
                                                                                       .ConfigureAwait(false), token)
                                                                               .Contains(objGear.Category);
                                await chkCyberwareBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objGear.IncludedInParent
                                        ? (objGear.Parent as ICanBlackMarketDiscount)?.DiscountCost == true
                                        : objGear.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkCyberwareBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await chkPrototypeTranshuman.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // gpbCyberwareMatrix
                            int intDeviceRating = objGear.GetTotalMatrixAttribute("Device Rating");
                            await lblCyberDeviceRating
                                  .DoThreadSafeAsync(x => x.Text = intDeviceRating.ToString(GlobalSettings.CultureInfo),
                                                     token).ConfigureAwait(false);
                            await objGear.RefreshMatrixAttributeComboBoxesAsync(cboCyberwareAttack, cboCyberwareSleaze,
                                cboCyberwareDataProcessing,
                                cboCyberwareFirewall, token).ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            await chkCyberwareActiveCommlink.DoThreadSafeAsync(x =>
                            {
                                x.Visible = objGear.IsCommlink;
                                x.Checked = objGear.IsActiveCommlink(CharacterObject);
                            }, token).ConfigureAwait(false);
                            if (CharacterObject.IsAI)
                            {
                                bool blnEnabled
                                    = await chkCyberwareActiveCommlink.DoThreadSafeFuncAsync(x => x.Visible, token)
                                                                      .ConfigureAwait(false)
                                      && objGear.GetTotalMatrixAttribute("Program Limit")
                                      >= (await CharacterObject.DEP.GetTotalValueAsync(token).ConfigureAwait(false)
                                          > intDeviceRating
                                          ? 2
                                          : 1);
                                await chkCyberwareHomeNode.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Checked = objGear.IsHomeNode(CharacterObject);
                                    x.Enabled = blnEnabled;
                                }, token).ConfigureAwait(false);
                            }
                            else
                                await chkCyberwareHomeNode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);

                            token.ThrowIfCancellationRequested();
                            string strText = await objGear.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                            await treCyberware
                                  .DoThreadSafeAsync(() => objSelectedNode.Text = strText, token)
                                  .ConfigureAwait(false);
                            break;
                        }
                    }
                }
                finally
                {
                    await flpCyberware.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken).ConfigureAwait(false);
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        /// <summary>
        /// Refresh the information for the currently displayed Weapon.
        /// </summary>
        private async Task RefreshSelectedWeapon(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                await flpWeapons.DoThreadSafeAsync(x => x.SuspendLayout(), token).ConfigureAwait(false);
                try
                {
                    TreeNode objSelectedNode = await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode, token)
                                                               .ConfigureAwait(false);
                    object objSelectedNodeTag = objSelectedNode?.Tag;
                    if (objSelectedNodeTag == null || objSelectedNode.Level <= 0)
                    {
                        await gpbWeaponsCommon.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await gpbWeaponsWeapon.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await gpbWeaponsMatrix.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        token.ThrowIfCancellationRequested();
                        // Buttons
                        await cmdDeleteWeapon
                              .DoThreadSafeAsync(x => x.Enabled = objSelectedNodeTag is ICanRemove, token)
                              .ConfigureAwait(false);
                        return;
                    }

                    string strSpace = await LanguageManager.GetStringAsync("String_Space", token: token)
                                                           .ConfigureAwait(false);
                    if (objSelectedNodeTag is IHasSource objSelected)
                    {
                        await lblWeaponSourceLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                  .ConfigureAwait(false);
                        await lblWeaponSource.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await objSelected.SetSourceDetailAsync(lblWeaponSource, token).ConfigureAwait(false);
                    }
                    else
                    {
                        await lblWeaponSourceLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                        await lblWeaponSource.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    }

                    if (objSelectedNodeTag is IHasRating objHasRating)
                    {
                        string strText = string.Format(
                            GlobalSettings.CultureInfo,
                            await LanguageManager.GetStringAsync(
                                "Label_RatingFormat", token: token).ConfigureAwait(false),
                            await LanguageManager.GetStringAsync(
                                objHasRating.RatingLabel, token: token).ConfigureAwait(false));
                        await lblWeaponRatingLabel.DoThreadSafeAsync(x => x.Text = strText, token)
                                                  .ConfigureAwait(false);
                    }

                    if (objSelectedNodeTag is IHasStolenProperty loot
                        && (await ImprovementManager
                                  .GetCachedImprovementListForValueOfAsync(
                                      CharacterObject,
                                      Improvement.ImprovementType.Nuyen,
                                      "Stolen", token: token).ConfigureAwait(false)).Count > 0)
                    {
                        await chkWeaponStolen.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await chkWeaponStolen.DoThreadSafeAsync(x => x.Checked = loot.Stolen, token)
                                             .ConfigureAwait(false);
                    }
                    else
                    {
                        await chkWeaponStolen.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    }

                    switch (objSelectedNodeTag)
                    {
                        case Weapon objWeapon:
                        {
                            await gpbWeaponsCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                  .ConfigureAwait(false);
                            await gpbWeaponsWeapon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                  .ConfigureAwait(false);
                            await gpbWeaponsMatrix.DoThreadSafeAsync(x => x.Visible = true, token)
                                                  .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // Buttons
                            await cmdDeleteWeapon.DoThreadSafeAsync(x => x.Enabled = !objWeapon.IncludedInWeapon &&
                                                                        !objWeapon.Cyberware &&
                                                                        objWeapon.Category != "Gear" &&
                                                                        !objWeapon.Category.StartsWith(
                                                                            "Quality", StringComparison.Ordinal) &&
                                                                        string.IsNullOrEmpty(objWeapon.ParentID), token)
                                                 .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // gpbWeaponsCommon
                            string strName = await objWeapon.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                            await lblWeaponName.DoThreadSafeAsync(x => x.Text = strName, token)
                                               .ConfigureAwait(false);
                            string strText = await objWeapon.DisplayCategoryAsync(GlobalSettings.Language, token)
                                                            .ConfigureAwait(false);
                            await lblWeaponCategory.DoThreadSafeAsync(x => x.Text = strText, token)
                                                   .ConfigureAwait(false);
                            await lblWeaponRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                      .ConfigureAwait(false);
                            await lblWeaponRating.DoThreadSafeAsync(x => x.Visible = false, token)
                                                 .ConfigureAwait(false);
                            await lblWeaponCapacityLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            await lblWeaponCapacity.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            string strAvail = await objWeapon.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblWeaponAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                                .ConfigureAwait(false);
                            string strCost = (await objWeapon.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync(
                                                 "String_NuyenSymbol", token: token).ConfigureAwait(false);
                            await lblWeaponCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                           .ConfigureAwait(false);
                            await lblWeaponSlotsLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                     .ConfigureAwait(false);
                            await lblWeaponSlots.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                            if (!string.IsNullOrWhiteSpace(objWeapon.AccessoryMounts))
                            {
                                if (!GlobalSettings.Language.Equals(GlobalSettings.DefaultLanguage,
                                                                    StringComparison.OrdinalIgnoreCase))
                                {
                                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                               out StringBuilder sbdSlotsText))
                                    {
                                        foreach (string strMount in objWeapon.AccessoryMounts.SplitNoAlloc(
                                                     '/', StringSplitOptions.RemoveEmptyEntries))
                                            sbdSlotsText
                                                .Append(await LanguageManager
                                                              .GetStringAsync("String_Mount" + strMount, token: token)
                                                              .ConfigureAwait(false))
                                                .Append('/');
                                        if (sbdSlotsText.Length > 0)
                                            --sbdSlotsText.Length;
                                        await lblWeaponSlots
                                              .DoThreadSafeAsync(x => x.Text = sbdSlotsText.ToString(), token)
                                              .ConfigureAwait(false);
                                    }
                                }
                                else
                                    await lblWeaponSlots
                                          .DoThreadSafeAsync(x => x.Text = objWeapon.AccessoryMounts, token)
                                          .ConfigureAwait(false);
                            }
                            else
                            {
                                string strNone = await LanguageManager.GetStringAsync("String_None", token: token)
                                                                      .ConfigureAwait(false);
                                await lblWeaponSlots.DoThreadSafeAsync(x => x.Text = strNone, token)
                                                    .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await lblWeaponConcealLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                       .ConfigureAwait(false);
                            await lblWeaponConceal.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Text = objWeapon.DisplayConcealability;
                            }, token).ConfigureAwait(false);
                            string strText2 = await LanguageManager.GetStringAsync(objWeapon.Parent == null
                                ? "Checkbox_Equipped"
                                : "Checkbox_Installed", token: token).ConfigureAwait(false);
                            await chkWeaponEquipped.DoThreadSafeAsync(x =>
                            {
                                x.Text = strText2;
                                x.Enabled = !objWeapon.IncludedInWeapon;
                                x.Checked = objWeapon.Equipped;
                            }, token).ConfigureAwait(false);
                            await chkIncludedInWeapon.DoThreadSafeAsync(x =>
                            {
                                x.Visible = objWeapon.Parent != null;
                                x.Enabled = false;
                                x.Checked = objWeapon.IncludedInWeapon;
                            }, token).ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = !objWeapon.IncludedInWeapon && CharacterObject
                                    .GenerateBlackMarketMappings(
                                        await (await CharacterObject
                                                     .LoadDataXPathAsync(
                                                         "weapons.xml", token: token).ConfigureAwait(false))
                                              .SelectSingleNodeAndCacheExpressionAsync(
                                                  "/chummer", token: token).ConfigureAwait(false), token)
                                    .Contains(objWeapon.Category);
                                await chkWeaponBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objWeapon.IncludedInWeapon
                                        ? objWeapon.Parent?.DiscountCost == true
                                        : objWeapon.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkWeaponBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            // gpbWeaponsWeapon
                            string strText3 = await LanguageManager.GetStringAsync("String_Weapon", token: token)
                                                                   .ConfigureAwait(false);
                            await gpbWeaponsWeapon.DoThreadSafeAsync(x => x.Text = strText3, token)
                                                  .ConfigureAwait(false);
                            await lblWeaponDamageLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                      .ConfigureAwait(false);
                            await lblWeaponDamage.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Text = objWeapon.DisplayDamage;
                            }, token).ConfigureAwait(false);
                            await lblWeaponAPLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                  .ConfigureAwait(false);
                            await lblWeaponAP.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Text = objWeapon.DisplayTotalAP;
                            }, token).ConfigureAwait(false);
                            await lblWeaponAccuracyLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                            await lblWeaponAccuracy.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Text = objWeapon.DisplayAccuracy;
                            }, token).ConfigureAwait(false);
                            await lblWeaponDicePoolLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                            string strPool
                                = (await objWeapon.GetDicePoolAsync(token: token).ConfigureAwait(false)).ToString(
                                    GlobalSettings.CultureInfo);
                            await lblWeaponDicePool.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Text = strPool;
                            }, token).ConfigureAwait(false);
                            await lblWeaponDicePool.SetToolTipAsync(objWeapon.DicePoolTooltip, token)
                                                   .ConfigureAwait(false);
                            if (objWeapon.RangeType == "Ranged")
                            {
                                await lblWeaponReachLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                         .ConfigureAwait(false);
                                await lblWeaponReach.DoThreadSafeAsync(x => x.Visible = false, token)
                                                    .ConfigureAwait(false);
                                await lblWeaponRCLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                      .ConfigureAwait(false);
                                await lblWeaponRC.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = objWeapon.DisplayTotalRC;
                                }, token).ConfigureAwait(false);
                                await lblWeaponRC.SetToolTipAsync(objWeapon.RCToolTip, token).ConfigureAwait(false);
                                await lblWeaponAmmoLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                                await lblWeaponAmmo.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = objWeapon.DisplayAmmo;
                                }, token).ConfigureAwait(false);
                                await lblWeaponModeLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                                await lblWeaponMode.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = objWeapon.DisplayMode;
                                }, token).ConfigureAwait(false);

                                await tlpWeaponsRanges.DoThreadSafeAsync(x => x.Visible = true, token)
                                                      .ConfigureAwait(false);
                                await lblWeaponRangeMain
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.CurrentDisplayRange, token)
                                      .ConfigureAwait(false);
                                await lblWeaponRangeAlternate
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.CurrentDisplayAlternateRange, token)
                                      .ConfigureAwait(false);
                                Dictionary<string, string> dicRanges
                                    = await objWeapon.GetRangeStringsAsync(GlobalSettings.CultureInfo, token: token)
                                                     .ConfigureAwait(false);
                                await lblWeaponRangeShortLabel
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.RangeModifier("Short"), token)
                                      .ConfigureAwait(false);
                                await lblWeaponRangeMediumLabel
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.RangeModifier("Medium"), token)
                                      .ConfigureAwait(false);
                                await lblWeaponRangeLongLabel
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.RangeModifier("Long"), token)
                                      .ConfigureAwait(false);
                                await lblWeaponRangeExtremeLabel
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.RangeModifier("Extreme"), token)
                                      .ConfigureAwait(false);
                                await lblWeaponRangeShort
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["short"], token)
                                      .ConfigureAwait(false);
                                await lblWeaponRangeMedium
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["medium"], token)
                                      .ConfigureAwait(false);
                                await lblWeaponRangeLong
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["long"], token)
                                      .ConfigureAwait(false);
                                await lblWeaponRangeExtreme
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["extreme"], token)
                                      .ConfigureAwait(false);
                                await lblWeaponAlternateRangeShort
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["alternateshort"], token)
                                      .ConfigureAwait(false);
                                await lblWeaponAlternateRangeMedium
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["alternatemedium"], token)
                                      .ConfigureAwait(false);
                                await lblWeaponAlternateRangeLong
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["alternatelong"], token)
                                      .ConfigureAwait(false);
                                await lblWeaponAlternateRangeExtreme
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["alternateextreme"], token)
                                      .ConfigureAwait(false);
                            }
                            else
                            {
                                await lblWeaponReachLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                         .ConfigureAwait(false);
                                string strReach
                                    = (await objWeapon.GetTotalReachAsync(token).ConfigureAwait(false)).ToString(
                                        GlobalSettings.CultureInfo);
                                await lblWeaponReach.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = strReach;
                                }, token).ConfigureAwait(false);
                                await lblWeaponRCLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                      .ConfigureAwait(false);
                                await lblWeaponRC.DoThreadSafeAsync(x => x.Visible = false, token)
                                                 .ConfigureAwait(false);
                                if (objWeapon.Ammo != "0")
                                {
                                    await lblWeaponAmmoLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                            .ConfigureAwait(false);
                                    await lblWeaponAmmo.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Text = objWeapon.DisplayAmmo;
                                    }, token).ConfigureAwait(false);
                                }
                                else
                                {
                                    await lblWeaponAmmoLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                                    await lblWeaponAmmo.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                                }

                                await lblWeaponModeLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                                await lblWeaponMode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                                await tlpWeaponsRanges.DoThreadSafeAsync(x => x.Visible = false, token)
                                                      .ConfigureAwait(false);
                            }

                            // gpbWeaponsMatrix
                            int intDeviceRating = objWeapon.GetTotalMatrixAttribute("Device Rating");
                            await lblWeaponDeviceRating
                                  .DoThreadSafeAsync(x => x.Text = intDeviceRating.ToString(GlobalSettings.CultureInfo),
                                                     token).ConfigureAwait(false);
                            await lblWeaponAttack.DoThreadSafeAsync(x => x.Text = objWeapon
                                                                        .GetTotalMatrixAttribute("Attack")
                                                                        .ToString(GlobalSettings.CultureInfo), token)
                                                 .ConfigureAwait(false);
                            await lblWeaponSleaze.DoThreadSafeAsync(x => x.Text = objWeapon
                                                                        .GetTotalMatrixAttribute("Sleaze")
                                                                        .ToString(GlobalSettings.CultureInfo), token)
                                                 .ConfigureAwait(false);
                            await lblWeaponDataProcessing.DoThreadSafeAsync(
                                                             x => x.Text = objWeapon
                                                                           .GetTotalMatrixAttribute("Data Processing")
                                                                           .ToString(GlobalSettings.CultureInfo), token)
                                                         .ConfigureAwait(false);
                            await lblWeaponFirewall.DoThreadSafeAsync(x => x.Text = objWeapon
                                                                          .GetTotalMatrixAttribute("Firewall")
                                                                          .ToString(GlobalSettings.CultureInfo), token)
                                                   .ConfigureAwait(false);
                            await chkWeaponActiveCommlink.DoThreadSafeAsync(x =>
                            {
                                x.Visible = objWeapon.IsCommlink;
                                x.Checked = objWeapon.IsActiveCommlink(CharacterObject);
                            }, token).ConfigureAwait(false);
                            if (CharacterObject.IsAI)
                            {
                                await chkWeaponHomeNode.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Checked = objWeapon.IsHomeNode(CharacterObject);
                                    x.Enabled = objWeapon.IsCommlink &&
                                                objWeapon.GetTotalMatrixAttribute("Program Limit") >=
                                                (CharacterObject.DEP.TotalValue > intDeviceRating ? 2 : 1);
                                }, token).ConfigureAwait(false);
                            }
                            else
                                await chkWeaponHomeNode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);

                            token.ThrowIfCancellationRequested();
                            break;
                        }
                        case WeaponAccessory objSelectedAccessory:
                        {
                            await gpbWeaponsCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                  .ConfigureAwait(false);
                            await gpbWeaponsWeapon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                  .ConfigureAwait(false);
                            await gpbWeaponsMatrix.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // Buttons
                            await cmdDeleteWeapon.DoThreadSafeAsync(x => x.Enabled
                                                                        = !objSelectedAccessory.IncludedInWeapon &&
                                                                          string.IsNullOrEmpty(
                                                                              objSelectedAccessory.ParentID), token)
                                                 .ConfigureAwait(false);
                            // gpbWeaponsCommon
                            string strName = await objSelectedAccessory.GetCurrentDisplayNameAsync(token)
                                                                       .ConfigureAwait(false);
                            await lblWeaponName
                                  .DoThreadSafeAsync(x => x.Text = strName, token)
                                  .ConfigureAwait(false);
                            string strText = await LanguageManager
                                                   .GetStringAsync("String_WeaponAccessory", token: token)
                                                   .ConfigureAwait(false);
                            await lblWeaponCategory.DoThreadSafeAsync(x => x.Text = strText, token)
                                                   .ConfigureAwait(false);
                            if (objSelectedAccessory.MaxRating > 0)
                            {
                                await lblWeaponRatingLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                          .ConfigureAwait(false);
                                await lblWeaponRating.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    lblWeaponRating.Text
                                        = objSelectedAccessory.Rating.ToString(GlobalSettings.CultureInfo);
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await lblWeaponRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                                await lblWeaponRating.DoThreadSafeAsync(x => x.Visible = false, token)
                                                     .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await lblWeaponCapacityLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            await lblWeaponCapacity.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            string strAvail = await objSelectedAccessory.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblWeaponAvail
                                  .DoThreadSafeAsync(x => x.Text = strAvail, token)
                                  .ConfigureAwait(false);
                            string strCost = (await objSelectedAccessory.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync(
                                                 "String_NuyenSymbol", token: token).ConfigureAwait(false);
                            await lblWeaponCost.DoThreadSafeAsync(x => x.Text = strCost, token).ConfigureAwait(false);
                            await lblWeaponSlotsLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                     .ConfigureAwait(false);
                            await lblWeaponSlots.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                            using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                          out StringBuilder sbdSlotsText))
                            {
                                sbdSlotsText.Append(objSelectedAccessory.Mount);
                                if (sbdSlotsText.Length > 0
                                    && !GlobalSettings.Language.Equals(GlobalSettings.DefaultLanguage,
                                                                       StringComparison.OrdinalIgnoreCase))
                                {
                                    sbdSlotsText.Clear();
                                    foreach (string strMount in objSelectedAccessory.Mount.SplitNoAlloc(
                                                 '/', StringSplitOptions.RemoveEmptyEntries))
                                        sbdSlotsText
                                            .Append(await LanguageManager
                                                          .GetStringAsync("String_Mount" + strMount, token: token)
                                                          .ConfigureAwait(false))
                                            .Append('/');
                                    --sbdSlotsText.Length;
                                }

                                token.ThrowIfCancellationRequested();
                                if (!string.IsNullOrEmpty(objSelectedAccessory.ExtraMount)
                                    && objSelectedAccessory.ExtraMount != "None")
                                {
                                    bool boolHaveAddedItem = false;
                                    foreach (string strCurrentExtraMount in
                                             objSelectedAccessory.ExtraMount.SplitNoAlloc(
                                                 '/', StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        if (!boolHaveAddedItem)
                                        {
                                            sbdSlotsText.Append(strSpace).Append('+').Append(strSpace);
                                            boolHaveAddedItem = true;
                                        }

                                        sbdSlotsText
                                            .Append(await LanguageManager.GetStringAsync(
                                                                             "String_Mount" + strCurrentExtraMount,
                                                                             token: token)
                                                                         .ConfigureAwait(false))
                                            .Append('/');
                                    }

                                    // Remove the trailing /
                                    if (boolHaveAddedItem)
                                        --sbdSlotsText.Length;
                                }

                                await lblWeaponSlots.DoThreadSafeAsync(x => x.Text = sbdSlotsText.ToString(), token)
                                                    .ConfigureAwait(false);
                            }

                            await lblWeaponConcealLabel
                                  .DoThreadSafeAsync(x => x.Visible = objSelectedAccessory.TotalConcealability != 0,
                                                     token).ConfigureAwait(false);
                            await lblWeaponConceal.DoThreadSafeAsync(x =>
                            {
                                x.Visible = objSelectedAccessory.TotalConcealability != 0;
                                x.Text
                                    = objSelectedAccessory.TotalConcealability.ToString(
                                        "+#,0;-#,0;0", GlobalSettings.CultureInfo);
                            }, token).ConfigureAwait(false);
                            string strText2 = await LanguageManager.GetStringAsync(objSelectedAccessory.Parent == null
                                ? "Checkbox_Equipped"
                                : "Checkbox_Installed", token: token).ConfigureAwait(false);
                            await chkWeaponEquipped.DoThreadSafeAsync(x =>
                            {
                                x.Text = strText2;
                                x.Enabled = !objSelectedAccessory.IncludedInWeapon;
                                x.Checked = objSelectedAccessory.Equipped;
                            }, token).ConfigureAwait(false);
                            await chkIncludedInWeapon.DoThreadSafeAsync(x =>
                            {
                                x.Visible = objSelectedAccessory.Parent != null;
                                x.Enabled = CharacterObjectSettings.AllowEditPartOfBaseWeapon;
                                x.Checked = objSelectedAccessory.IncludedInWeapon;
                            }, token).ConfigureAwait(false);
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = !objSelectedAccessory.IncludedInWeapon
                                                  && CharacterObject
                                                     .GenerateBlackMarketMappings(
                                                         await (await CharacterObject
                                                                      .LoadDataXPathAsync("weapons.xml", token: token)
                                                                      .ConfigureAwait(false))
                                                               .SelectSingleNodeAndCacheExpressionAsync(
                                                                   "/chummer", token: token).ConfigureAwait(false),
                                                         token)
                                                     .Contains(objSelectedAccessory.Parent?.Category);
                                await chkWeaponBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objSelectedAccessory.IncludedInWeapon
                                        ? objSelectedAccessory.Parent?.DiscountCost == true
                                        : objSelectedAccessory.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkWeaponBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            // gpbWeaponsWeapon
                            string strText3 = await LanguageManager
                                                    .GetStringAsync("String_WeaponAccessory", token: token)
                                                    .ConfigureAwait(false);
                            await gpbWeaponsWeapon.DoThreadSafeAsync(x => x.Text = strText3, token)
                                                  .ConfigureAwait(false);
                            if (string.IsNullOrEmpty(objSelectedAccessory.Damage))
                            {
                                await lblWeaponDamageLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                                await lblWeaponDamage.DoThreadSafeAsync(x => x.Visible = false, token)
                                                     .ConfigureAwait(false);
                            }
                            else
                            {
                                await lblWeaponDamageLabel
                                      .DoThreadSafeAsync(
                                          x => x.Visible = !string.IsNullOrEmpty(objSelectedAccessory.Damage), token)
                                      .ConfigureAwait(false);
                                await lblWeaponDamage.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = !string.IsNullOrEmpty(objSelectedAccessory
                                                                          .Damage);
                                    x.Text = Convert
                                             .ToInt32(objSelectedAccessory.Damage,
                                                      GlobalSettings.InvariantCultureInfo)
                                             .ToString("+#,0;-#,0;0", GlobalSettings.CultureInfo);
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            if (string.IsNullOrEmpty(objSelectedAccessory.AP))
                            {
                                await lblWeaponAPLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                      .ConfigureAwait(false);
                                await lblWeaponAP.DoThreadSafeAsync(x => x.Visible = false, token)
                                                 .ConfigureAwait(false);
                            }
                            else
                            {
                                await lblWeaponAPLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                      .ConfigureAwait(false);
                                await lblWeaponAP.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = Convert
                                             .ToInt32(objSelectedAccessory.AP, GlobalSettings.InvariantCultureInfo)
                                             .ToString("+#,0;-#,0;0", GlobalSettings.CultureInfo);
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            if (objSelectedAccessory.Accuracy == 0)
                            {
                                await lblWeaponAccuracyLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                                await lblWeaponAccuracy.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                            }
                            else
                            {
                                await lblWeaponAccuracyLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                            .ConfigureAwait(false);
                                await lblWeaponAccuracy.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text
                                        = objSelectedAccessory.Accuracy.ToString(
                                            "+#,0;-#,0;0", GlobalSettings.CultureInfo);
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            if (objSelectedAccessory.DicePool == 0)
                            {
                                await lblWeaponDicePoolLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                                await lblWeaponDicePool.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                            }
                            else
                            {
                                await lblWeaponDicePoolLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                            .ConfigureAwait(false);
                                await lblWeaponDicePool.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text
                                        = objSelectedAccessory.DicePool.ToString(
                                            "+#,0;-#,0;0", GlobalSettings.CultureInfo);
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await lblWeaponReachLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                     .ConfigureAwait(false);
                            await lblWeaponReach.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                            if (string.IsNullOrEmpty(objSelectedAccessory.RC))
                            {
                                await lblWeaponRCLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                      .ConfigureAwait(false);
                                await lblWeaponRC.DoThreadSafeAsync(x => x.Visible = false, token)
                                                 .ConfigureAwait(false);
                            }
                            else
                            {
                                await lblWeaponRCLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                      .ConfigureAwait(false);
                                await lblWeaponRC.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = Convert
                                             .ToInt32(objSelectedAccessory.RC, GlobalSettings.InvariantCultureInfo)
                                             .ToString("+#,0;-#,0;0", GlobalSettings.CultureInfo);
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            if (objSelectedAccessory.TotalAmmoBonus != 0
                                || (!string.IsNullOrEmpty(objSelectedAccessory.ModifyAmmoCapacity)
                                    && objSelectedAccessory.ModifyAmmoCapacity != "0"))
                            {
                                await lblWeaponAmmoLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                                await lblWeaponAmmo.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                                using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                              out StringBuilder sbdAmmoBonus))
                                {
                                    int intAmmoBonus = objSelectedAccessory.TotalAmmoBonus;
                                    if (intAmmoBonus != 0)
                                        sbdAmmoBonus.Append(
                                            (intAmmoBonus / 100.0m).ToString(
                                                "+#,0%;-#,0%;0%", GlobalSettings.CultureInfo));
                                    if (!string.IsNullOrEmpty(objSelectedAccessory.ModifyAmmoCapacity)
                                        && objSelectedAccessory.ModifyAmmoCapacity != "0")
                                        sbdAmmoBonus.Append(objSelectedAccessory.ModifyAmmoCapacity);
                                    await lblWeaponAmmo.DoThreadSafeAsync(x => x.Text = sbdAmmoBonus.ToString(), token)
                                                       .ConfigureAwait(false);
                                }
                            }
                            else
                            {
                                await lblWeaponAmmoLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                                await lblWeaponAmmo.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await lblWeaponModeLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                    .ConfigureAwait(false);
                            await lblWeaponMode.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            await tlpWeaponsRanges.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                            break;
                        }
                        case Gear objGear:
                        {
                            await gpbWeaponsCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                  .ConfigureAwait(false);
                            await gpbWeaponsWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                            await gpbWeaponsMatrix.DoThreadSafeAsync(x => x.Visible = true, token)
                                                  .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // Buttons
                            await cmdDeleteWeapon.DoThreadSafeAsync(x => x.Enabled = !objGear.IncludedInParent, token)
                                                 .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // gpbWeaponsCommon
                            string strName = await objGear.GetCurrentDisplayNameShortAsync(token).ConfigureAwait(false);
                            await lblWeaponName.DoThreadSafeAsync(x => x.Text = strName, token)
                                               .ConfigureAwait(false);
                            await lblWeaponCategory
                                  .DoThreadSafeAsync(x => x.Text = objGear.DisplayCategory(GlobalSettings.Language),
                                                     token).ConfigureAwait(false);
                            int intGearMaxRatingValue = objGear.MaxRatingValue;
                            if (intGearMaxRatingValue > 0 && intGearMaxRatingValue != int.MaxValue)
                            {
                                await lblWeaponRatingLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                          .ConfigureAwait(false);
                                await lblWeaponRating.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = objGear.Rating.ToString(GlobalSettings.CultureInfo);
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await lblWeaponRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                                await lblWeaponRating.DoThreadSafeAsync(x => x.Visible = false, token)
                                                     .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await lblWeaponCapacityLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                            await lblWeaponCapacity.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Text = objGear.DisplayCapacity;
                            }, token).ConfigureAwait(false);
                            string strAvail = await objGear.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblWeaponAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                                .ConfigureAwait(false);
                            string strCost = (await objGear.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token)
                                                                    .ConfigureAwait(false);
                            await lblWeaponCost.DoThreadSafeAsync(x => x.Text = strCost, token).ConfigureAwait(false);
                            await lblWeaponSlotsLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                     .ConfigureAwait(false);
                            await lblWeaponSlots.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                            await lblWeaponConcealLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                            await lblWeaponConceal.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                            string strText = await LanguageManager.GetStringAsync(
                                "Checkbox_Equipped", token: token).ConfigureAwait(false);
                            await chkWeaponEquipped.DoThreadSafeAsync(x =>
                            {
                                x.Text = strText;
                                x.Checked = objGear.Equipped;
                                x.Enabled = objGear.CanChangeEquip;
                            }, token).ConfigureAwait(false);
                            await chkIncludedInWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                     .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = !objGear.IncludedInParent && CharacterObject
                                                                               .GenerateBlackMarketMappings(
                                                                                   await (await CharacterObject
                                                                                           .LoadDataXPathAsync(
                                                                                               "gear.xml", token: token)
                                                                                           .ConfigureAwait(false))
                                                                                       .SelectSingleNodeAndCacheExpressionAsync(
                                                                                           "/chummer", token: token)
                                                                                       .ConfigureAwait(false), token)
                                                                               .Contains(objGear.Category);
                                await chkWeaponBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objGear.IncludedInParent
                                        ? (objGear.Parent as ICanBlackMarketDiscount)?.DiscountCost == true
                                        : objGear.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkWeaponBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            // gpbWeaponsMatrix
                            int intDeviceRating = objGear.GetTotalMatrixAttribute("Device Rating");
                            await lblWeaponDeviceRating
                                  .DoThreadSafeAsync(x => x.Text = intDeviceRating.ToString(GlobalSettings.CultureInfo),
                                                     token).ConfigureAwait(false);
                            await lblWeaponAttack.DoThreadSafeAsync(x => x.Text = objGear
                                                                        .GetTotalMatrixAttribute("Attack")
                                                                        .ToString(GlobalSettings.CultureInfo), token)
                                                 .ConfigureAwait(false);
                            await lblWeaponSleaze.DoThreadSafeAsync(x => x.Text = objGear
                                                                        .GetTotalMatrixAttribute("Sleaze")
                                                                        .ToString(GlobalSettings.CultureInfo), token)
                                                 .ConfigureAwait(false);
                            await lblWeaponDataProcessing.DoThreadSafeAsync(
                                                             x => x.Text = objGear
                                                                           .GetTotalMatrixAttribute("Data Processing")
                                                                           .ToString(GlobalSettings.CultureInfo), token)
                                                         .ConfigureAwait(false);
                            await lblWeaponFirewall.DoThreadSafeAsync(x => x.Text = objGear
                                                                          .GetTotalMatrixAttribute("Firewall")
                                                                          .ToString(GlobalSettings.CultureInfo), token)
                                                   .ConfigureAwait(false);
                            await chkWeaponActiveCommlink.DoThreadSafeAsync(x =>
                            {
                                x.Visible = objGear.IsCommlink;
                                x.Checked = objGear.IsActiveCommlink(CharacterObject);
                            }, token).ConfigureAwait(false);
                            if (CharacterObject.IsAI)
                            {
                                await chkWeaponHomeNode.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Checked = objGear.IsHomeNode(CharacterObject);
                                    x.Enabled = objGear.IsCommlink &&
                                                objGear.GetTotalMatrixAttribute("Program Limit") >=
                                                (CharacterObject.DEP.TotalValue > intDeviceRating ? 2 : 1);
                                }, token).ConfigureAwait(false);
                            }
                            else
                                await chkWeaponHomeNode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);

                            break;
                        }
                        default:
                            await gpbWeaponsCommon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                            await gpbWeaponsWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                            await gpbWeaponsMatrix.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                            // Buttons
                            await cmdDeleteWeapon.DoThreadSafeAsync(x => x.Enabled = false, token)
                                                 .ConfigureAwait(false);
                            break;
                    }
                }
                finally
                {
                    await flpWeapons.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken).ConfigureAwait(false);
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        /// <summary>
        /// Refresh the information for the currently displayed Armor.
        /// </summary>
        private async Task RefreshSelectedArmor(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                await flpArmor.DoThreadSafeAsync(x => x.SuspendLayout(), token).ConfigureAwait(false);
                try
                {
                    TreeNode objSelectedNode = await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode, token)
                                                             .ConfigureAwait(false);
                    object objSelectedNodeTag = objSelectedNode?.Tag;
                    if (objSelectedNodeTag == null)
                    {
                        await gpbArmorCommon.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await gpbArmorMatrix.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await gpbArmorLocation.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        // Buttons
                        await cmdDeleteArmor.DoThreadSafeAsync(x => x.Enabled = false, token).ConfigureAwait(false);
                        return;
                    }

                    token.ThrowIfCancellationRequested();
                    if (objSelectedNodeTag is IHasSource objSelected)
                    {
                        await lblArmorSourceLabel.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await lblArmorSource.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await objSelected.SetSourceDetailAsync(lblArmorSource, token).ConfigureAwait(false);
                    }
                    else
                    {
                        await lblArmorSourceLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                 .ConfigureAwait(false);
                        await lblArmorSource.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    }

                    token.ThrowIfCancellationRequested();
                    if (objSelectedNodeTag is IHasStolenProperty loot && (await ImprovementManager
                            .GetCachedImprovementListForValueOfAsync(
                                CharacterObject,
                                Improvement.ImprovementType.Nuyen, "Stolen", token: token).ConfigureAwait(false)).Count
                        > 0)
                    {
                        await chkArmorStolen.DoThreadSafeAsync(x =>
                        {
                            x.Visible = true;
                            x.Checked = loot.Stolen;
                        }, token).ConfigureAwait(false);
                    }
                    else
                    {
                        await chkArmorStolen.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    }

                    token.ThrowIfCancellationRequested();
                    if (objSelectedNodeTag is IHasRating objHasRating)
                    {
                        string strText = string.Format(
                            GlobalSettings.CultureInfo,
                            await LanguageManager.GetStringAsync(
                                "Label_RatingFormat", token: token).ConfigureAwait(false),
                            await LanguageManager.GetStringAsync(
                                objHasRating.RatingLabel, token: token).ConfigureAwait(false));
                        await lblArmorRatingLabel.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                    }

                    token.ThrowIfCancellationRequested();
                    if (objSelectedNodeTag is Armor objArmor)
                    {
                        await gpbArmorCommon.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await gpbArmorMatrix.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await gpbArmorLocation.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        token.ThrowIfCancellationRequested();
                        // Buttons
                        await cmdDeleteArmor.DoThreadSafeAsync(x => x.Enabled = true, token).ConfigureAwait(false);
                        token.ThrowIfCancellationRequested();
                        // gpbArmorCommon
                        await lblArmorValueLabel.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await lblArmorValue.DoThreadSafeAsync(x =>
                        {
                            x.Visible = true;
                            x.Text = objArmor.DisplayArmorValue;
                        }, token).ConfigureAwait(false);
                        string strAvail = await objArmor.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                        await lblArmorAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                           .ConfigureAwait(false);
                        await lblArmorCapacity.DoThreadSafeAsync(x => x.Text = objArmor.DisplayCapacity, token)
                                              .ConfigureAwait(false);
                        await lblArmorRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                 .ConfigureAwait(false);
                        await nudArmorRating.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        string strCost = (await objArmor.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                             CharacterObjectSettings.NuyenFormat,
                                             GlobalSettings.CultureInfo)
                                         + await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token).ConfigureAwait(false);
                        await lblArmorCost.DoThreadSafeAsync(x => x.Text = strCost, token).ConfigureAwait(false);
                        await chkArmorEquipped.DoThreadSafeAsync(x =>
                        {
                            x.Visible = true;
                            x.Checked = objArmor.Equipped;
                            x.Enabled = true;
                        }, token).ConfigureAwait(false);
                        await chkIncludedInArmor.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        token.ThrowIfCancellationRequested();
                        if (CharacterObject.BlackMarketDiscount)
                        {
                            bool blnEnabled = CharacterObject
                                              .GenerateBlackMarketMappings(
                                                  await (await CharacterObject.LoadDataXPathAsync(
                                                            "armor.xml", token: token).ConfigureAwait(false))
                                                        .SelectSingleNodeAndCacheExpressionAsync(
                                                            "/chummer", token: token).ConfigureAwait(false), token)
                                              .Contains(objArmor.Category);
                            await chkArmorBlackMarketDiscount.DoThreadSafeAsync(x =>
                            {
                                x.Enabled = blnEnabled;
                                x.Checked = objArmor.DiscountCost;
                            }, token).ConfigureAwait(false);
                        }
                        else
                        {
                            await chkArmorBlackMarketDiscount.DoThreadSafeAsync(x =>
                            {
                                x.Enabled = false;
                                x.Checked = false;
                            }, token).ConfigureAwait(false);
                        }

                        token.ThrowIfCancellationRequested();
                        // gpbArmorMatrix
                        int intDeviceRating = objArmor.GetTotalMatrixAttribute("Device Rating");
                        await lblArmorDeviceRating
                              .DoThreadSafeAsync(x => x.Text = intDeviceRating.ToString(GlobalSettings.CultureInfo),
                                                 token).ConfigureAwait(false);
                        await lblArmorAttack.DoThreadSafeAsync(x => x.Text
                                                                   = objArmor.GetTotalMatrixAttribute("Attack")
                                                                             .ToString(GlobalSettings.CultureInfo),
                                                               token).ConfigureAwait(false);
                        await lblArmorSleaze.DoThreadSafeAsync(x => x.Text
                                                                   = objArmor.GetTotalMatrixAttribute("Sleaze")
                                                                             .ToString(GlobalSettings.CultureInfo),
                                                               token).ConfigureAwait(false);
                        await lblArmorDataProcessing.DoThreadSafeAsync(x => x.Text = objArmor
                                                                           .GetTotalMatrixAttribute("Data Processing")
                                                                           .ToString(GlobalSettings.CultureInfo), token)
                                                    .ConfigureAwait(false);
                        await lblArmorFirewall.DoThreadSafeAsync(x => x.Text = objArmor
                                                                               .GetTotalMatrixAttribute("Firewall")
                                                                               .ToString(GlobalSettings.CultureInfo),
                                                                 token).ConfigureAwait(false);
                        await chkArmorActiveCommlink.DoThreadSafeAsync(x =>
                        {
                            x.Visible = objArmor.IsCommlink;
                            x.Checked = objArmor.IsActiveCommlink(CharacterObject);
                        }, token).ConfigureAwait(false);
                        if (CharacterObject.IsAI)
                        {
                            await chkArmorHomeNode.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Checked = objArmor.IsHomeNode(CharacterObject);
                                x.Enabled = objArmor.IsCommlink &&
                                            objArmor.GetTotalMatrixAttribute("Program Limit") >=
                                            (CharacterObject.DEP.TotalValue > intDeviceRating ? 2 : 1);
                            }, token).ConfigureAwait(false);
                        }
                        else
                            await chkArmorHomeNode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                    }
                    else
                    {
                        string strSpace = await LanguageManager.GetStringAsync("String_Space", token: token)
                                                               .ConfigureAwait(false);
                        if (objSelectedNodeTag is ArmorMod objArmorMod)
                        {
                            await gpbArmorCommon.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                            await gpbArmorMatrix.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                            await gpbArmorLocation.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // Buttons
                            await cmdDeleteArmor.DoThreadSafeAsync(x => x.Enabled = !objArmorMod.IncludedInArmor, token)
                                                .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // gpbArmorCommon
                            if (objArmorMod.Armor != 0)
                            {
                                await lblArmorValueLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                                await lblArmorValue.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = objArmorMod.Armor.ToString("+0;-0;0", GlobalSettings.CultureInfo);
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await lblArmorValueLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                                await lblArmorValue.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            }
                            
                            string strAvail = await objArmorMod.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblArmorAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                               .ConfigureAwait(false);
                            await lblArmorCapacity.DoThreadSafeAsync(
                                x => x.Text = objArmorMod.Parent.CapacityDisplayStyle == CapacityStyle.Zero
                                    ? "[0]"
                                    : objArmorMod.CalculatedCapacity, token).ConfigureAwait(false);
                            if (!string.IsNullOrEmpty(objArmorMod.GearCapacity))
                            {
                                string strText = objArmorMod.GearCapacity + '/'
                                                                          + lblArmorCapacity.Text
                                                                          + strSpace + '('
                                                                          +
                                                                          objArmorMod.GearCapacityRemaining.ToString(
                                                                              "#,0.##", GlobalSettings.CultureInfo) +
                                                                          strSpace
                                                                          + await LanguageManager.GetStringAsync(
                                                                                  "String_Remaining", token: token)
                                                                              .ConfigureAwait(false) + ')';
                                await lblArmorCapacity.DoThreadSafeAsync(x => x.Text = strText, token)
                                                      .ConfigureAwait(false);
                            }

                            if (objArmorMod.MaximumRating > 1)
                            {
                                await lblArmorRatingLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                         .ConfigureAwait(false);
                                await nudArmorRating.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Maximum = objArmorMod.MaximumRating;
                                    x.Value = objArmorMod.Rating;
                                    x.Enabled = !objArmorMod.IncludedInArmor;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await lblArmorRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                         .ConfigureAwait(false);
                                await nudArmorRating.DoThreadSafeAsync(x => x.Visible = false, token)
                                                    .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            string strCost = (await objArmorMod.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync(
                                                 "String_NuyenSymbol", token: token).ConfigureAwait(false);
                            await lblArmorCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                              .ConfigureAwait(false);
                            await chkArmorEquipped.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Checked = objArmorMod.Equipped;
                                x.Enabled = !objArmorMod.IncludedInArmor;
                            }, token).ConfigureAwait(false);
                            await chkIncludedInArmor.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Checked = objArmorMod.IncludedInArmor;
                            }, token).ConfigureAwait(false);
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = !objArmorMod.IncludedInArmor && CharacterObject
                                    .GenerateBlackMarketMappings(
                                        await (await CharacterObject
                                                     .LoadDataXPathAsync(
                                                         "armor.xml", token: token).ConfigureAwait(false))
                                              .SelectSingleNodeAndCacheExpressionAsync(
                                                  "/chummer/modcategories", token: token).ConfigureAwait(false), token)
                                    .Contains(objArmorMod.Category);
                                await chkArmorBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objArmorMod.IncludedInArmor
                                        ? objArmorMod.Parent?.DiscountCost == true
                                        : objArmorMod.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkArmorBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }
                        }
                        else
                        {
                            switch (objSelectedNodeTag)
                            {
                                case Gear objSelectedGear:
                                {
                                    await gpbArmorCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                                    await gpbArmorMatrix.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                                    await gpbArmorLocation.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                                    token.ThrowIfCancellationRequested();
                                    // Buttons
                                    await cmdDeleteArmor
                                          .DoThreadSafeAsync(x => x.Enabled = !objSelectedGear.IncludedInParent, token)
                                          .ConfigureAwait(false);
                                    token.ThrowIfCancellationRequested();
                                    // gpbArmorCommon
                                    await lblArmorValueLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                                    await lblArmorValue.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                                    string strAvail = await objSelectedGear.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                                    await lblArmorAvail
                                          .DoThreadSafeAsync(x => x.Text = strAvail, token)
                                          .ConfigureAwait(false);
                                    CharacterObject.Armor.FindArmorGear(objSelectedGear.InternalId, out objArmor,
                                                                        out objArmorMod);
                                    if (objArmorMod != null)
                                        await lblArmorCapacity
                                              .DoThreadSafeAsync(x => x.Text = objSelectedGear.CalculatedCapacity,
                                                                 token).ConfigureAwait(false);
                                    else if (objArmor.CapacityDisplayStyle == CapacityStyle.Zero)
                                        await lblArmorCapacity
                                              .DoThreadSafeAsync(
                                                  x => x.Text = '[' + 0.ToString(GlobalSettings.CultureInfo) + ']',
                                                  token).ConfigureAwait(false);
                                    else
                                        await lblArmorCapacity
                                              .DoThreadSafeAsync(x => x.Text = objSelectedGear.CalculatedArmorCapacity,
                                                                 token).ConfigureAwait(false);
                                    int intMaxRatingValue = objSelectedGear.MaxRatingValue;
                                    if (intMaxRatingValue > 1 && intMaxRatingValue != int.MaxValue)
                                    {
                                        await lblArmorRatingLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                 .ConfigureAwait(false);
                                        await nudArmorRating.DoThreadSafeAsync(x =>
                                        {
                                            x.Visible = true;
                                            x.Maximum = intMaxRatingValue;
                                            int intMinRatingValue = objSelectedGear.MinRatingValue;
                                            x.Minimum = intMinRatingValue;
                                            x.Value = objSelectedGear.Rating;
                                            x.Enabled = intMinRatingValue != intMaxRatingValue
                                                        && string.IsNullOrEmpty(objSelectedGear.ParentID);
                                        }, token).ConfigureAwait(false);
                                    }
                                    else
                                    {
                                        await lblArmorRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                 .ConfigureAwait(false);
                                        await nudArmorRating.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                                    }

                                    string strCost = (await objSelectedGear.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                         CharacterObjectSettings.NuyenFormat,
                                                         GlobalSettings.CultureInfo)
                                                     + await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token)
                                                                            .ConfigureAwait(false);

                                    await lblArmorCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                                      .ConfigureAwait(false);
                                    await chkArmorEquipped.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Checked = objSelectedGear.Equipped;
                                        x.Enabled = objSelectedGear.CanChangeEquip;
                                    }, token).ConfigureAwait(false);
                                    await chkIncludedInArmor.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Checked = objSelectedGear.IncludedInParent;
                                    }, token).ConfigureAwait(false);
                                    if (CharacterObject.BlackMarketDiscount)
                                    {
                                        bool blnEnabled = !objSelectedGear.IncludedInParent
                                                          && CharacterObject
                                                             .GenerateBlackMarketMappings(
                                                                 await (await CharacterObject
                                                                              .LoadDataXPathAsync(
                                                                                  "gear.xml", token: token)
                                                                              .ConfigureAwait(false))
                                                                       .SelectSingleNodeAndCacheExpressionAsync(
                                                                           "/chummer", token: token)
                                                                       .ConfigureAwait(false), token)
                                                             .Contains(objSelectedGear.Category);
                                        await chkArmorBlackMarketDiscount.DoThreadSafeAsync(x =>
                                        {
                                            x.Enabled = blnEnabled;
                                            x.Checked = objSelectedGear.IncludedInParent
                                                ? (objSelectedGear.Parent as ICanBlackMarketDiscount)?.DiscountCost
                                                  == true
                                                : objSelectedGear.DiscountCost;
                                        }, token).ConfigureAwait(false);
                                    }
                                    else
                                    {
                                        await chkArmorBlackMarketDiscount.DoThreadSafeAsync(x =>
                                        {
                                            x.Enabled = false;
                                            x.Checked = false;
                                        }, token).ConfigureAwait(false);
                                    }

                                    token.ThrowIfCancellationRequested();
                                    // gpbArmorMatrix
                                    int intDeviceRating = objSelectedGear.GetTotalMatrixAttribute("Device Rating");
                                    await lblArmorDeviceRating
                                          .DoThreadSafeAsync(
                                              x => x.Text = intDeviceRating.ToString(GlobalSettings.CultureInfo), token)
                                          .ConfigureAwait(false);
                                    await lblArmorAttack.DoThreadSafeAsync(
                                                            x => x.Text = objSelectedGear
                                                                          .GetTotalMatrixAttribute("Attack")
                                                                          .ToString(GlobalSettings.CultureInfo), token)
                                                        .ConfigureAwait(false);
                                    await lblArmorSleaze.DoThreadSafeAsync(
                                                            x => x.Text = objSelectedGear
                                                                          .GetTotalMatrixAttribute("Sleaze")
                                                                          .ToString(GlobalSettings.CultureInfo), token)
                                                        .ConfigureAwait(false);
                                    await lblArmorDataProcessing.DoThreadSafeAsync(
                                                                    x => x.Text = objSelectedGear
                                                                        .GetTotalMatrixAttribute("Data Processing")
                                                                        .ToString(GlobalSettings.CultureInfo), token)
                                                                .ConfigureAwait(false);
                                    await lblArmorFirewall.DoThreadSafeAsync(
                                                              x => x.Text = objSelectedGear
                                                                            .GetTotalMatrixAttribute("Firewall")
                                                                            .ToString(GlobalSettings.CultureInfo),
                                                              token)
                                                          .ConfigureAwait(false);
                                    await chkArmorActiveCommlink.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = objSelectedGear.IsCommlink;
                                        x.Checked = objSelectedGear.IsActiveCommlink(CharacterObject);
                                    }, token).ConfigureAwait(false);
                                    if (CharacterObject.IsAI)
                                    {
                                        await chkArmorHomeNode.DoThreadSafeAsync(x =>
                                        {
                                            x.Visible = true;
                                            x.Checked = objSelectedGear.IsHomeNode(CharacterObject);
                                            x.Enabled = objSelectedGear.IsCommlink &&
                                                        objSelectedGear.GetTotalMatrixAttribute("Program Limit")
                                                        >=
                                                        (CharacterObject.DEP.TotalValue > intDeviceRating
                                                            ? 2
                                                            : 1);
                                        }, token).ConfigureAwait(false);
                                    }
                                    else
                                        await chkArmorHomeNode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                              .ConfigureAwait(false);

                                    token.ThrowIfCancellationRequested();
                                    break;
                                }
                                case Location objLocation:
                                {
                                    await gpbArmorCommon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                                    await gpbArmorMatrix.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                                    await gpbArmorLocation.DoThreadSafeAsync(x => x.Visible = true, token)
                                                          .ConfigureAwait(false);
                                    token.ThrowIfCancellationRequested();
                                    // Buttons
                                    await cmdDeleteArmor.DoThreadSafeAsync(x => x.Enabled = true, token)
                                                        .ConfigureAwait(false);
                                    token.ThrowIfCancellationRequested();
                                    // gpbArmorLocation
                                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                               out StringBuilder sbdArmorEquipped))
                                    {
                                        await CharacterObject.Armor.ForEachAsync(async objLoopArmor =>
                                        {
                                            if (objLoopArmor.Equipped && objLoopArmor.Location == objLocation)
                                            {
                                                sbdArmorEquipped
                                                    .Append(await objLoopArmor.GetCurrentDisplayNameAsync(token)
                                                                              .ConfigureAwait(false))
                                                    .Append(strSpace)
                                                    .Append('(')
                                                    .Append(objLoopArmor.DisplayArmorValue)
                                                    .AppendLine(')');
                                            }
                                        }, token).ConfigureAwait(false);

                                        token.ThrowIfCancellationRequested();
                                        if (sbdArmorEquipped.Length > 0)
                                        {
                                            --sbdArmorEquipped.Length;
                                            await lblArmorEquipped
                                                  .DoThreadSafeAsync(x => x.Text = sbdArmorEquipped.ToString(), token)
                                                  .ConfigureAwait(false);
                                        }
                                        else
                                        {
                                            string strNone = await LanguageManager
                                                                   .GetStringAsync("String_None", token: token)
                                                                   .ConfigureAwait(false);
                                            await lblArmorEquipped.DoThreadSafeAsync(x => x.Text = strNone, token)
                                                                  .ConfigureAwait(false);
                                        }
                                    }

                                    token.ThrowIfCancellationRequested();
                                    break;
                                }
                                default:
                                {
                                    if (objSelectedNodeTag.ToString() == "Node_SelectedArmor")
                                    {
                                        await gpbArmorCommon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                                        await gpbArmorMatrix.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                                        await gpbArmorLocation.DoThreadSafeAsync(x => x.Visible = true, token)
                                                              .ConfigureAwait(false);
                                        // Buttons
                                        await cmdDeleteArmor.DoThreadSafeAsync(x => x.Enabled = false, token)
                                                            .ConfigureAwait(false);
                                        using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                   out StringBuilder sbdArmorEquipped))
                                        {
                                            await CharacterObject.Armor.ForEachAsync(async objLoopArmor =>
                                            {
                                                if (objLoopArmor.Equipped && objLoopArmor.Location == null)
                                                {
                                                    sbdArmorEquipped
                                                        .Append(await objLoopArmor.GetCurrentDisplayNameAsync(token)
                                                                    .ConfigureAwait(false))
                                                        .Append(strSpace)
                                                        .Append('(')
                                                        .Append(objLoopArmor.DisplayArmorValue)
                                                        .AppendLine(')');
                                                }
                                            }, token).ConfigureAwait(false);

                                            if (sbdArmorEquipped.Length > 0)
                                            {
                                                --sbdArmorEquipped.Length;
                                                await lblArmorEquipped
                                                      .DoThreadSafeAsync(
                                                          x => x.Text = sbdArmorEquipped.ToString(), token)
                                                      .ConfigureAwait(false);
                                            }
                                            else
                                            {
                                                string strNone = await LanguageManager
                                                                       .GetStringAsync("String_None", token: token)
                                                                       .ConfigureAwait(false);
                                                await lblArmorEquipped.DoThreadSafeAsync(x => x.Text = strNone, token)
                                                                      .ConfigureAwait(false);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        await gpbArmorCommon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                                        await gpbArmorMatrix.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                                        await gpbArmorLocation.DoThreadSafeAsync(x => x.Visible = false, token)
                                                              .ConfigureAwait(false);
                                        // Buttons
                                        await cmdDeleteArmor.DoThreadSafeAsync(x => x.Enabled = false, token)
                                                            .ConfigureAwait(false);
                                    }

                                    break;
                                }
                            }
                        }
                    }
                }
                finally
                {
                    await flpArmor.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken).ConfigureAwait(false);
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        /// <summary>
        /// Refresh the information for the currently displayed Gear.
        /// </summary>
        private async Task RefreshSelectedGear(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                await flpGear.DoThreadSafeAsync(x => x.SuspendLayout(), token).ConfigureAwait(false);
                try
                {
                    TreeNode objSelectedNode = await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode, token)
                                                            .ConfigureAwait(false);
                    object objSelectedNodeTag = objSelectedNode?.Tag;
                    if (objSelectedNodeTag == null || objSelectedNode.Level == 0)
                    {
                        await gpbGearCommon.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await gpbGearMatrix.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        token.ThrowIfCancellationRequested();
                        // Buttons
                        await cmdDeleteGear.DoThreadSafeAsync(x => x.Enabled = objSelectedNodeTag is ICanRemove, token)
                                           .ConfigureAwait(false);
                        return;
                    }

                    token.ThrowIfCancellationRequested();
                    if (objSelectedNodeTag is IHasStolenProperty loot && (await ImprovementManager
                            .GetCachedImprovementListForValueOfAsync(
                                CharacterObject,
                                Improvement.ImprovementType.Nuyen, "Stolen", token: token).ConfigureAwait(false))
                        .Count > 0)
                    {
                        await chkGearStolen.DoThreadSafeAsync(x =>
                        {
                            x.Visible = true;
                            x.Checked = loot.Stolen;
                        }, token).ConfigureAwait(false);
                    }
                    else
                    {
                        await chkGearStolen.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    }

                    token.ThrowIfCancellationRequested();
                    if (objSelectedNodeTag is IHasSource objSelected)
                    {
                        await lblGearSourceLabel.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await lblGearSource.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await objSelected.SetSourceDetailAsync(lblGearSource, token).ConfigureAwait(false);
                    }
                    else
                    {
                        await lblGearSourceLabel.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await lblGearSource.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    }

                    token.ThrowIfCancellationRequested();
                    if (objSelectedNodeTag is IHasRating objHasRating)
                    {
                        string strText = string.Format(
                            GlobalSettings.CultureInfo,
                            await LanguageManager.GetStringAsync(
                                "Label_RatingFormat", token: token).ConfigureAwait(false),
                            await LanguageManager.GetStringAsync(
                                objHasRating.RatingLabel, token: token).ConfigureAwait(false));
                        await lblGearRatingLabel.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                    }

                    token.ThrowIfCancellationRequested();
                    if (objSelectedNodeTag is Gear objGear)
                    {
                        await gpbGearCommon.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await gpbGearMatrix.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);

                        // Buttons
                        await cmdDeleteGear.DoThreadSafeAsync(x => x.Enabled = !objGear.IncludedInParent, token)
                                           .ConfigureAwait(false);

                        // gpbGearCommon
                        string strName = await objGear.GetCurrentDisplayNameShortAsync(token).ConfigureAwait(false);
                        await lblGearName.DoThreadSafeAsync(x => x.Text = strName, token)
                                         .ConfigureAwait(false);
                        await lblGearCategory
                              .DoThreadSafeAsync(x => x.Text = objGear.DisplayCategory(GlobalSettings.Language), token)
                              .ConfigureAwait(false);
                        int intGearMaxRatingValue = objGear.MaxRatingValue;
                        if (intGearMaxRatingValue > 0 && intGearMaxRatingValue != int.MaxValue)
                        {
                            int intGearMinRatingValue = objGear.MinRatingValue;
                            await nudGearRating.DoThreadSafeAsync(x =>
                            {
                                if (intGearMinRatingValue > 0)
                                    x.Minimum = intGearMinRatingValue;
                                else if (intGearMinRatingValue == 0 && objGear.Name.Contains("Credstick,"))
                                    x.Minimum = 0;
                                else
                                    x.Minimum = 1;
                                x.Maximum = objGear.MaxRatingValue;
                                x.Value = objGear.Rating;
                                x.Enabled = x.Minimum != x.Maximum && string.IsNullOrEmpty(objGear.ParentID);
                            }, token).ConfigureAwait(false);
                        }
                        else
                        {
                            await nudGearRating.DoThreadSafeAsync(x =>
                            {
                                x.Minimum = 0;
                                x.Maximum = 0;
                                x.Enabled = false;
                            }, token).ConfigureAwait(false);
                        }

                        await nudGearQty.DoThreadSafeAsync(x => x.Increment = objGear.CostFor, token)
                                        .ConfigureAwait(false);
                        if (objGear.Name.StartsWith("Nuyen", StringComparison.Ordinal))
                        {
                            int intDecimalPlaces = CharacterObjectSettings.MaxNuyenDecimals;
                            if (intDecimalPlaces <= 0)
                            {
                                await nudGearQty.DoThreadSafeAsync(x =>
                                {
                                    x.DecimalPlaces = 0;
                                    x.Minimum = 1.0m;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await nudGearQty.DoThreadSafeAsync(x => x.DecimalPlaces = intDecimalPlaces, token)
                                                .ConfigureAwait(false);
                                decimal decMinimum = 1.0m;
                                // Need a for loop instead of a power system to maintain exact precision
                                for (int i = 0; i < intDecimalPlaces; ++i)
                                    decMinimum /= 10.0m;
                                await nudGearQty.DoThreadSafeAsync(x => x.Minimum = decMinimum, token)
                                                .ConfigureAwait(false);
                            }
                        }
                        else if (objGear.Category == "Currency")
                        {
                            await nudGearQty.DoThreadSafeAsync(x =>
                            {
                                x.DecimalPlaces = 2;
                                x.Minimum = 0.01m;
                            }, token).ConfigureAwait(false);
                        }
                        else
                        {
                            await nudGearQty.DoThreadSafeAsync(x =>
                            {
                                x.DecimalPlaces = 0;
                                x.Minimum = 1.0m;
                            }, token).ConfigureAwait(false);
                        }

                        await nudGearQty.DoThreadSafeAsync(x =>
                        {
                            x.Value = objGear.Quantity;
                            x.Enabled = !objGear.IncludedInParent;
                        }, token).ConfigureAwait(false);

                        string strCost;
                        try
                        {
                            strCost = (await objGear.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                          CharacterObjectSettings.NuyenFormat,
                                          GlobalSettings.CultureInfo)
                                      + await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token)
                                                             .ConfigureAwait(false);
                        }
                        catch (FormatException)
                        {
                            strCost = objGear.Cost + await LanguageManager
                                                           .GetStringAsync("String_NuyenSymbol", token: token)
                                                           .ConfigureAwait(false);
                        }
                        await lblGearCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                         .ConfigureAwait(false);
                        string strAvail = await objGear.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                        await lblGearAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                          .ConfigureAwait(false);
                        await lblGearCapacity.DoThreadSafeAsync(x => x.Text = objGear.DisplayCapacity, token)
                                             .ConfigureAwait(false);
                        await chkGearEquipped.DoThreadSafeAsync(x =>
                        {
                            x.Visible = true;
                            x.Checked = objGear.Equipped;
                            x.Enabled = objGear.CanChangeEquip;
                        }, token).ConfigureAwait(false);
                        // If this is a Program, determine if its parent Gear (if any) is a Commlink. If so, show the Equipped checkbox.
                        if (objGear.IsProgram && objGear.Parent is IHasMatrixAttributes objCommlink
                                              && objCommlink.IsCommlink)
                        {
                            string strText = await LanguageManager
                                                   .GetStringAsync("Checkbox_SoftwareRunning", token: token)
                                                   .ConfigureAwait(false);
                            await chkGearEquipped.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                        }
                        else
                        {
                            string strText = await LanguageManager.GetStringAsync("Checkbox_Equipped", token: token)
                                                                  .ConfigureAwait(false);
                            await chkGearEquipped.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                        }

                        token.ThrowIfCancellationRequested();
                        if (CharacterObject.BlackMarketDiscount)
                        {
                            bool blnEnabled = !objGear.IncludedInParent && CharacterObject
                                                                           .GenerateBlackMarketMappings(
                                                                               await (await CharacterObject
                                                                                       .LoadDataXPathAsync(
                                                                                           "gear.xml", token: token)
                                                                                       .ConfigureAwait(false))
                                                                                   .SelectSingleNodeAndCacheExpressionAsync(
                                                                                       "/chummer", token: token)
                                                                                   .ConfigureAwait(false), token)
                                                                           .Contains(objGear.Category);
                            await chkGearBlackMarketDiscount.DoThreadSafeAsync(x =>
                            {
                                x.Enabled = blnEnabled;
                                x.Checked = objGear.IncludedInParent
                                    ? (objGear.Parent as ICanBlackMarketDiscount)?.DiscountCost == true
                                    : objGear.DiscountCost;
                            }, token).ConfigureAwait(false);
                        }
                        else
                        {
                            await chkGearBlackMarketDiscount.DoThreadSafeAsync(x =>
                            {
                                x.Enabled = false;
                                x.Checked = false;
                            }, token).ConfigureAwait(false);
                        }

                        token.ThrowIfCancellationRequested();
                        // gpbGearMatrix
                        int intDeviceRating = objGear.GetTotalMatrixAttribute("Device Rating");
                        await lblGearDeviceRating
                              .DoThreadSafeAsync(x => x.Text = intDeviceRating.ToString(GlobalSettings.CultureInfo),
                                                 token).ConfigureAwait(false);
                        await objGear.RefreshMatrixAttributeComboBoxesAsync(cboGearAttack, cboGearSleaze,
                                                                            cboGearDataProcessing, cboGearFirewall,
                                                                            token).ConfigureAwait(false);
                        await chkGearActiveCommlink.DoThreadSafeAsync(x =>
                        {
                            x.Checked = objGear.IsActiveCommlink(CharacterObject);
                            x.Visible = objGear.IsCommlink;
                        }, token).ConfigureAwait(false);
                        if (CharacterObject.IsAI)
                        {
                            bool blnEnabled
                                = objGear.IsCommlink
                                  && objGear.GetTotalMatrixAttribute("Program Limit")
                                  >= (await CharacterObject.DEP.GetTotalValueAsync(token).ConfigureAwait(false)
                                      > intDeviceRating
                                      ? 2
                                      : 1);
                            await chkGearHomeNode.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Checked = objGear.IsHomeNode(CharacterObject);
                                x.Enabled = blnEnabled;
                            }, token).ConfigureAwait(false);
                        }
                        else
                            await chkGearHomeNode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                 .ConfigureAwait(false);

                        token.ThrowIfCancellationRequested();
                        string strNodeText = await objGear.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                        await treGear.DoThreadSafeAsync(() => objSelectedNode.Text = strNodeText, token)
                                     .ConfigureAwait(false);
                    }
                    else
                    {
                        await gpbGearCommon.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await gpbGearMatrix.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        // Buttons
                        await cmdDeleteGear.DoThreadSafeAsync(x => x.Enabled = objSelectedNodeTag is ICanRemove, token)
                                           .ConfigureAwait(false);
                    }

                    token.ThrowIfCancellationRequested();
                }
                finally
                {
                    await flpGear.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken).ConfigureAwait(false);
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        protected override string FormMode
        {
            get
            {
                try
                {
                    return LanguageManager.GetString("Title_CreateNewCharacter", token: GenericToken);
                }
                catch (OperationCanceledException)
                {
                    //swallow this
                    return string.Empty;
                }
            }
        }

        /// <summary>
        /// Save the Character.
        /// </summary>
        public override async ValueTask<bool> SaveCharacter(bool blnNeedConfirm = true, bool blnDoCreated = false,
                                                            CancellationToken token = default)
        {
            blnDoCreated = blnDoCreated || await chkCharacterCreated.DoThreadSafeFuncAsync(x => x.Checked, token)
                                                                    .ConfigureAwait(false);
            return await base.SaveCharacter(blnNeedConfirm, blnDoCreated, token).ConfigureAwait(false);
        }

        /// <summary>
        /// Save the Character using the Save As dialogue box.
        /// </summary>
        /// <param name="blnDoCreated">If True, forces the character to be saved in Career Mode (if possible to do so).</param>
        /// <param name="token">Cancellation token to use.</param>
        public override async ValueTask<bool> SaveCharacterAs(bool blnDoCreated = false,
                                                              CancellationToken token = default)
        {
            blnDoCreated = blnDoCreated || await chkCharacterCreated.DoThreadSafeFuncAsync(x => x.Checked, token)
                                                                    .ConfigureAwait(false);
            return await base.SaveCharacterAs(blnDoCreated, token).ConfigureAwait(false);
        }

        /// <summary>
        /// Save the character as Created and re-open it in Career Mode.
        /// </summary>
        public override async Task<bool> SaveCharacterAsCreated(CancellationToken token = default)
        {
            CursorWait objCursorWait = await CursorWait.NewAsync(this, token: token).ConfigureAwait(false);
            try
            {
                SkipUpdate = true;
                try
                {
                    // If the character was built with Karma, record their staring Karma amount (if any).
                    int intKarma = await CharacterObject.GetKarmaAsync(GenericToken).ConfigureAwait(false);
                    if (intKarma != 0)
                    {
                        ExpenseLogEntry objKarma = new ExpenseLogEntry(CharacterObject);
                        objKarma.Create(intKarma,
                                        await LanguageManager.GetStringAsync(
                                            "Label_SelectBP_StartingKarma", token: token).ConfigureAwait(false),
                                        ExpenseType.Karma, DateTime.Now);
                        await CharacterObject.ExpenseEntries.AddWithSortAsync(objKarma, token: token)
                                             .ConfigureAwait(false);

                        // Create an Undo entry so that the starting Karma amount can be modified if needed.
                        ExpenseUndo objKarmaUndo = new ExpenseUndo();
                        objKarmaUndo.CreateKarma(KarmaExpenseType.ManualAdd, string.Empty);
                        objKarma.Undo = objKarmaUndo;
                    }

                    List<CharacterAttrib> lstAttributesToAdd = null;
                    if (CharacterObject.MetatypeCategory == "Shapeshifter")
                    {
                        lstAttributesToAdd = new List<CharacterAttrib>(AttributeSection.AttributeStrings.Count);
                        XPathNavigator xmlDoc = await CharacterObject.LoadDataXPathAsync("metatypes.xml", token: token)
                                                                     .ConfigureAwait(false);
                        string strMetatypeGuidString = CharacterObject.MetatypeGuid
                                                                      .ToString(
                                                                          "D", GlobalSettings.InvariantCultureInfo);
                        string strMetavariantGuidString = CharacterObject.MetavariantGuid
                                                                         .ToString(
                                                                             "D", GlobalSettings.InvariantCultureInfo);
                        string strMetavariantXPath = "/chummer/metatypes/metatype[id = "
                                                     + strMetatypeGuidString.CleanXPath()
                                                     + " or translate(id, 'abcdef', 'ABCDEF') = "
                                                     + strMetatypeGuidString.ToUpperInvariant().CleanXPath()
                                                     + "]/metavariants/metavariant[id = "
                                                     + strMetavariantGuidString.CleanXPath()
                                                     + " or translate(id, 'abcdef', 'ABCDEF') = "
                                                     + strMetavariantGuidString.ToUpperInvariant().CleanXPath()
                                                     + ']';
                        await CharacterObject.AttributeSection.AttributeList.ForEachAsync(async objOldAttribute =>
                        {
                            CharacterAttrib objNewAttribute = new CharacterAttrib(
                                CharacterObject, objOldAttribute.Abbrev,
                                CharacterAttrib.AttributeCategory
                                               .Shapeshifter);
                            await AttributeSection.CopyAttributeAsync(objOldAttribute, objNewAttribute,
                                                                      strMetavariantXPath,
                                                                      xmlDoc, token).ConfigureAwait(false);
                            lstAttributesToAdd.Add(objNewAttribute);
                        }, token).ConfigureAwait(false);

                        foreach (CharacterAttrib objAttributeToAdd in lstAttributesToAdd)
                        {
                            await CharacterObject.AttributeSection.AttributeList.AddAsync(objAttributeToAdd, token)
                                                 .ConfigureAwait(false);
                        }
                    }

                    // Create an Expense Entry for Starting Nuyen.
                    ExpenseLogEntry objNuyen = new ExpenseLogEntry(CharacterObject);
                    objNuyen.Create(CharacterObject.Nuyen,
                                    await LanguageManager.GetStringAsync("Title_LifestyleNuyen", token: token)
                                                         .ConfigureAwait(false),
                                    ExpenseType.Nuyen, DateTime.Now);
                    await CharacterObject.ExpenseEntries.AddWithSortAsync(objNuyen, token: token).ConfigureAwait(false);

                    // Create an Undo entry so that the Starting Nuyen amount can be modified if needed.
                    ExpenseUndo objNuyenUndo = new ExpenseUndo();
                    objNuyenUndo.CreateNuyen(NuyenExpenseType.ManualAdd, string.Empty);
                    objNuyen.Undo = objNuyenUndo;

                    await CharacterObject.SetCreatedAsync(true, false, token: token).ConfigureAwait(false);

                    // Save all essence modifiers for all Cyberware.
                    await (await CharacterObject.Cyberware.GetAllDescendantsAsync(x => x.Children, token)
                                                .ConfigureAwait(false))
                          .ForEachAsync(x => x.SaveNonRetroactiveEssenceModifiersAsync(token), token)
                          .ConfigureAwait(false);
                    await CharacterObject.Vehicles.ForEachAsync(async objVehicle =>
                    {
                        await objVehicle.Mods.SelectMany(objMod => objMod.Cyberware).GetAllDescendants(x => x.Children)
                                        .ForEachAsync(x => x.SaveNonRetroactiveEssenceModifiersAsync(token), token)
                                        .ConfigureAwait(false);
                        await objVehicle.WeaponMounts
                                        .SelectMany(objMount => objMount.Mods.SelectMany(objMod => objMod.Cyberware))
                                        .GetAllDescendants(x => x.Children)
                                        .ForEachAsync(x => x.SaveNonRetroactiveEssenceModifiersAsync(token), token)
                                        .ConfigureAwait(false);
                    }, token).ConfigureAwait(false);

                    using (ThreadSafeForm<LoadingBar> frmLoadingBar
                           = await Program.CreateAndShowProgressBarAsync(token: token).ConfigureAwait(false))
                    {
                        await frmLoadingBar.MyForm.PerformStepAsync(CharacterObject.CharacterName,
                                                                    LoadingBar.ProgressBarTextPatterns.Saving, token)
                                           .ConfigureAwait(false);
                        Interlocked.Increment(ref _intFileUpdateQueued);
                        try
                        {
                            if (!await CharacterObject.SaveAsync(token: token).ConfigureAwait(false))
                            {
                                await CharacterObject.ExpenseEntries.ClearAsync(token).ConfigureAwait(false);
                                if (lstAttributesToAdd != null)
                                {
                                    foreach (CharacterAttrib objAttributeToAdd in lstAttributesToAdd)
                                    {
                                        await CharacterObject.AttributeSection.AttributeList.RemoveAsync(
                                            objAttributeToAdd, token).ConfigureAwait(false);
                                    }
                                }

                                await CharacterObject.SetCreatedAsync(false, false, token: token).ConfigureAwait(false);
                                SkipUpdate = false;
                                return false;
                            }
                        }
                        finally
                        {
                            Interlocked.Decrement(ref _intFileUpdateQueued);
                        }

                        IsDirty = false;
                    }

                    IsReopenQueued = true;
                }
                catch
                {
                    SkipUpdate = false;
                    throw;
                }
            }
            finally
            {
                await objCursorWait.DisposeAsync().ConfigureAwait(false);
            }

            return true;
        }

        /// <summary>
        /// Open the Select Cyberware window and handle adding to the Tree and Character.
        /// </summary>
        private async ValueTask<bool> PickCyberware(Cyberware objSelectedCyberware,
                                                    Improvement.ImprovementSource objSource,
                                                    CancellationToken token = default)
        {
            using (ThreadSafeForm<SelectCyberware> frmPickCyberware
                   = await ThreadSafeForm<SelectCyberware>.GetAsync(
                                                              () => new SelectCyberware(CharacterObject, objSource,
                                                                  objSelectedCyberware), token)
                                                          .ConfigureAwait(false))
            {
                List<Improvement> lstImprovements;
                decimal decMultiplier = 1.0m;
                switch (objSource)
                {
                    // Apply the character's Cyberware Essence cost multiplier if applicable.
                    case Improvement.ImprovementSource.Cyberware:
                    {
                        lstImprovements
                            = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                                          CharacterObject, Improvement.ImprovementType.CyberwareEssCost,
                                                          token: token)
                                                      .ConfigureAwait(false);
                        if (lstImprovements.Count != 0)
                        {
                            foreach (Improvement objImprovement in lstImprovements)
                            {
                                decMultiplier -= 1.0m - objImprovement.Value / 100.0m;
                            }

                            frmPickCyberware.MyForm.CharacterESSMultiplier *= decMultiplier;
                        }

                        lstImprovements
                            = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                                          CharacterObject,
                                                          Improvement.ImprovementType.CyberwareTotalEssMultiplier,
                                                          token: token)
                                                      .ConfigureAwait(false);
                        if (lstImprovements.Count != 0)
                        {
                            decMultiplier = 1.0m;
                            foreach (Improvement objImprovement in lstImprovements)
                            {
                                decMultiplier *= objImprovement.Value / 100.0m;
                            }

                            frmPickCyberware.MyForm.CharacterTotalESSMultiplier *= decMultiplier;
                        }

                        lstImprovements
                            = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                CharacterObject, Improvement.ImprovementType.CyberwareEssCostNonRetroactive,
                                token: token).ConfigureAwait(false);
                        if (lstImprovements.Count != 0)
                        {
                            decMultiplier = 1.0m;
                            foreach (Improvement objImprovement in lstImprovements)
                            {
                                decMultiplier -= 1.0m - objImprovement.Value / 100.0m;
                            }

                            frmPickCyberware.MyForm.CharacterESSMultiplier *= decMultiplier;
                        }

                        lstImprovements
                            = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                CharacterObject, Improvement.ImprovementType.CyberwareTotalEssMultiplierNonRetroactive,
                                token: token).ConfigureAwait(false);
                        if (lstImprovements.Count != 0)
                        {
                            decMultiplier = 1.0m;
                            foreach (Improvement objImprovement in lstImprovements)
                            {
                                decMultiplier *= objImprovement.Value / 100.0m;
                            }

                            frmPickCyberware.MyForm.CharacterTotalESSMultiplier *= decMultiplier;
                        }

                        break;
                    }
                    // Apply the character's Bioware Essence cost multiplier if applicable.
                    case Improvement.ImprovementSource.Bioware:
                    {
                        lstImprovements
                            = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                                          CharacterObject, Improvement.ImprovementType.BiowareEssCost,
                                                          token: token)
                                                      .ConfigureAwait(false);
                        if (lstImprovements.Count != 0)
                        {
                            foreach (Improvement objImprovement in lstImprovements)
                            {
                                decMultiplier -= 1.0m - objImprovement.Value / 100.0m;
                            }

                            frmPickCyberware.MyForm.CharacterESSMultiplier = decMultiplier;
                        }

                        lstImprovements
                            = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                                          CharacterObject,
                                                          Improvement.ImprovementType.BiowareTotalEssMultiplier,
                                                          token: token)
                                                      .ConfigureAwait(false);
                        if (lstImprovements.Count != 0)
                        {
                            decMultiplier = 1.0m;
                            foreach (Improvement objImprovement in lstImprovements)
                            {
                                decMultiplier *= objImprovement.Value / 100.0m;
                            }

                            frmPickCyberware.MyForm.CharacterTotalESSMultiplier *= decMultiplier;
                        }

                        lstImprovements
                            = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                                          CharacterObject,
                                                          Improvement.ImprovementType.BiowareEssCostNonRetroactive,
                                                          token: token)
                                                      .ConfigureAwait(false);
                        if (lstImprovements.Count != 0)
                        {
                            decMultiplier = 1.0m;
                            foreach (Improvement objImprovement in lstImprovements)
                            {
                                decMultiplier -= 1.0m - objImprovement.Value / 100.0m;
                            }

                            frmPickCyberware.MyForm.CharacterESSMultiplier = decMultiplier;
                        }

                        lstImprovements
                            = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                CharacterObject, Improvement.ImprovementType.BiowareTotalEssMultiplierNonRetroactive,
                                token: token).ConfigureAwait(false);
                        if (lstImprovements.Count != 0)
                        {
                            decMultiplier = 1.0m;
                            foreach (Improvement objImprovement in lstImprovements)
                            {
                                decMultiplier *= objImprovement.Value / 100.0m;
                            }

                            frmPickCyberware.MyForm.CharacterTotalESSMultiplier *= decMultiplier;
                        }

                        // Apply the character's Basic Bioware Essence cost multiplier if applicable.
                        lstImprovements
                            = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                                          CharacterObject,
                                                          Improvement.ImprovementType.BasicBiowareEssCost, token: token)
                                                      .ConfigureAwait(false);
                        if (lstImprovements.Count != 0)
                        {
                            decMultiplier = 1.0m;
                            foreach (Improvement objImprovement in lstImprovements)
                            {
                                decMultiplier -= 1.0m - objImprovement.Value / 100.0m;
                            }

                            frmPickCyberware.MyForm.BasicBiowareESSMultiplier = decMultiplier;
                        }

                        // Apply the character's Genetech Essence cost multiplier if applicable.
                        lstImprovements
                            = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                                          CharacterObject,
                                                          Improvement.ImprovementType.GenetechEssMultiplier,
                                                          token: token)
                                                      .ConfigureAwait(false);
                        if (lstImprovements.Count != 0)
                        {
                            decMultiplier = 1.0m;
                            foreach (Improvement objImprovement in lstImprovements)
                            {
                                decMultiplier -= 1.0m - objImprovement.Value / 100.0m;
                            }

                            frmPickCyberware.MyForm.GenetechEssMultiplier = decMultiplier;
                        }

                        // Genetech Cost multiplier.
                        lstImprovements
                            = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                                          CharacterObject,
                                                          Improvement.ImprovementType.GenetechCostMultiplier,
                                                          token: token)
                                                      .ConfigureAwait(false);
                        if (lstImprovements.Count != 0)
                        {
                            decMultiplier = 1.0m;
                            foreach (Improvement objImprovement in lstImprovements)
                            {
                                decMultiplier -= 1.0m - objImprovement.Value / 100.0m;
                            }

                            frmPickCyberware.MyForm.GenetechCostMultiplier = decMultiplier;
                        }

                        break;
                    }
                }

                Dictionary<string, int> dicDisallowedMounts = new Dictionary<string, int>(6);
                Dictionary<string, int> dicHasMounts = new Dictionary<string, int>(6);
                if (objSelectedCyberware != null)
                {
                    frmPickCyberware.MyForm.ForcedGrade = objSelectedCyberware.Grade;
                    frmPickCyberware.MyForm.LockGrade();
                    frmPickCyberware.MyForm.Subsystems = objSelectedCyberware.AllowedSubsystems;
                    // If the Cyberware has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that consume Capacity).
                    if (!objSelectedCyberware.Capacity.Contains('[') || objSelectedCyberware.Capacity.Contains("/["))
                    {
                        frmPickCyberware.MyForm.MaximumCapacity = objSelectedCyberware.CapacityRemaining;
                    }

                    string strLoopHasModularMount = objSelectedCyberware.HasModularMount;
                    if (!string.IsNullOrEmpty(strLoopHasModularMount)
                        && !dicHasMounts.ContainsKey(strLoopHasModularMount))
                        dicHasMounts.Add(strLoopHasModularMount, int.MaxValue);
                    foreach (Cyberware objLoopCyberware in await objSelectedCyberware.Children.DeepWhereAsync(
                                 x => x.Children, x => string.IsNullOrEmpty(x.PlugsIntoModularMount), token).ConfigureAwait(false))
                    {
                        foreach (string strLoop in objLoopCyberware.BlocksMounts.SplitNoAlloc(
                                     ',', StringSplitOptions.RemoveEmptyEntries))
                        {
                            string strKey = strLoop;
                            if (objSelectedCyberware.Location != objLoopCyberware.Location)
                                strKey += objLoopCyberware.Location;
                            if (!dicDisallowedMounts.ContainsKey(strKey))
                                dicDisallowedMounts.Add(strKey, int.MaxValue);
                        }

                        strLoopHasModularMount = objSelectedCyberware.Location != objLoopCyberware.Location
                            ? objLoopCyberware.HasModularMount + objLoopCyberware.Location
                            : objLoopCyberware.HasModularMount;
                        if (!string.IsNullOrEmpty(strLoopHasModularMount)
                            && !dicHasMounts.ContainsKey(strLoopHasModularMount))
                            dicHasMounts.Add(strLoopHasModularMount, int.MaxValue);
                    }
                }
                else
                {
                    using (new FetchSafelyFromPool<HashSet<string>>(Utils.StringHashSetPool,
                                                                    out HashSet<string> setLoopDisallowedMounts))
                    using (new FetchSafelyFromPool<HashSet<string>>(Utils.StringHashSetPool,
                                                                    out HashSet<string> setLoopHasModularMount))
                    {
                        await CharacterObject.Cyberware.ForEachAsync(async objLoopCyberware =>
                        {
                            setLoopDisallowedMounts.Clear();
                            setLoopDisallowedMounts.AddRange(
                                objLoopCyberware.BlocksMounts.SplitNoAlloc(',', StringSplitOptions.RemoveEmptyEntries));
                            setLoopHasModularMount.Clear();
                            if (!string.IsNullOrEmpty(objLoopCyberware.HasModularMount))
                                setLoopHasModularMount.Add(objLoopCyberware.HasModularMount);
                            foreach (Cyberware objInnerLoopCyberware in await objLoopCyberware.Children.DeepWhereAsync(
                                         x => x.Children, x => string.IsNullOrEmpty(x.PlugsIntoModularMount), token).ConfigureAwait(false))
                            {
                                foreach (string strLoop in objInnerLoopCyberware.BlocksMounts.SplitNoAlloc(
                                             ',', StringSplitOptions.RemoveEmptyEntries))
                                    setLoopDisallowedMounts.Add(strLoop);
                                if (!string.IsNullOrEmpty(objInnerLoopCyberware.HasModularMount))
                                    setLoopHasModularMount.Add(objInnerLoopCyberware.HasModularMount);
                            }

                            foreach (string strLoop in setLoopDisallowedMounts)
                            {
                                string strKey = strLoop + objLoopCyberware.Location;
                                if (!dicDisallowedMounts.ContainsKey(strKey))
                                    dicDisallowedMounts.Add(strKey, await objLoopCyberware.GetLimbSlotCountAsync(token).ConfigureAwait(false));
                                else
                                    dicDisallowedMounts[strKey] += await objLoopCyberware.GetLimbSlotCountAsync(token).ConfigureAwait(false);
                            }

                            foreach (string strLoop in setLoopHasModularMount)
                            {
                                string strKey = strLoop + objLoopCyberware.Location;
                                if (!dicHasMounts.ContainsKey(strKey))
                                    dicHasMounts.Add(strKey, await objLoopCyberware.GetLimbSlotCountAsync(token).ConfigureAwait(false));
                                else
                                    dicHasMounts[strKey] += await objLoopCyberware.GetLimbSlotCountAsync(token).ConfigureAwait(false);
                            }
                        }, token).ConfigureAwait(false);
                    }
                }

                using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                              out StringBuilder sbdDisallowedMounts))
                {
                    foreach (KeyValuePair<string, int> kvpLoop in dicDisallowedMounts)
                    {
                        string strKey = kvpLoop.Key;
                        if (strKey.EndsWith("Right", StringComparison.Ordinal))
                            continue;
                        int intValue = kvpLoop.Value;
                        if (strKey.EndsWith("Left", StringComparison.Ordinal))
                        {
                            strKey = strKey.TrimEndOnce("Left", true);
                            intValue = dicDisallowedMounts.TryGetValue(strKey + "Right", out int intExistingValue)
                                ? 2 * Math.Min(intValue, intExistingValue)
                                : 0;
                            if (dicDisallowedMounts.TryGetValue(strKey, out intExistingValue))
                                intValue += intExistingValue;
                        }

                        if (intValue >= await CharacterObject.LimbCountAsync(Cyberware.MountToLimbType(strKey), token)
                                                             .ConfigureAwait(false))
                            sbdDisallowedMounts.Append(strKey).Append(',');
                    }

                    // Remove trailing ","
                    if (sbdDisallowedMounts.Length > 0)
                        --sbdDisallowedMounts.Length;
                    frmPickCyberware.MyForm.DisallowedMounts = sbdDisallowedMounts.ToString();
                }

                using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool, out StringBuilder sbdHasMounts))
                {
                    foreach (KeyValuePair<string, int> kvpLoop in dicHasMounts)
                    {
                        string strKey = kvpLoop.Key;
                        if (strKey.EndsWith("Right", StringComparison.Ordinal))
                            continue;
                        int intValue = kvpLoop.Value;
                        if (strKey.EndsWith("Left", StringComparison.Ordinal))
                        {
                            strKey = strKey.TrimEndOnce("Left", true);
                            intValue = dicHasMounts.TryGetValue(strKey + "Right", out int intExistingValue)
                                ? 2 * Math.Min(intValue, intExistingValue)
                                : 0;
                            if (dicHasMounts.TryGetValue(strKey, out intExistingValue))
                                intValue += intExistingValue;
                        }

                        if (intValue >= await CharacterObject.LimbCountAsync(Cyberware.MountToLimbType(strKey), token)
                                                             .ConfigureAwait(false))
                            sbdHasMounts.Append(strKey).Append(',');
                    }

                    // Remove trailing ","
                    if (sbdHasMounts.Length > 0)
                        --sbdHasMounts.Length;
                    frmPickCyberware.MyForm.HasModularMounts = sbdHasMounts.ToString();
                }

                // Make sure the dialogue window was not canceled.
                if (await frmPickCyberware.ShowDialogSafeAsync(this, token).ConfigureAwait(false)
                    == DialogResult.Cancel)
                    return false;

                // Open the Cyberware XML file and locate the selected piece.
                XmlNode objXmlCyberware = objSource == Improvement.ImprovementSource.Bioware
                    ? (await CharacterObject.LoadDataAsync("bioware.xml", token: token).ConfigureAwait(false))
                    .TryGetNodeByNameOrId("/chummer/biowares/bioware", frmPickCyberware.MyForm.SelectedCyberware)
                    : (await CharacterObject.LoadDataAsync("cyberware.xml", token: token).ConfigureAwait(false))
                    .TryGetNodeByNameOrId("/chummer/cyberwares/cyberware", frmPickCyberware.MyForm.SelectedCyberware);

                // Create the Cyberware object.
                Cyberware objCyberware = new Cyberware(CharacterObject);

                List<Weapon> lstWeapons = new List<Weapon>(1);
                List<Vehicle> lstVehicles = new List<Vehicle>(1);
                objCyberware.Create(objXmlCyberware, frmPickCyberware.MyForm.SelectedGrade, objSource,
                                    frmPickCyberware.MyForm.SelectedRating, lstWeapons, lstVehicles, true, true,
                                    string.Empty, objSelectedCyberware);
                if (objCyberware.InternalId.IsEmptyGuid())
                {
                    await objCyberware.DisposeAsync().ConfigureAwait(false);
                    return false;
                }

                if (objCyberware.SourceID == Cyberware.EssenceAntiHoleGUID)
                {
                    CharacterObject.DecreaseEssenceHole(objCyberware.Rating);
                }
                else if (objCyberware.SourceID == Cyberware.EssenceHoleGUID)
                {
                    CharacterObject.IncreaseEssenceHole(objCyberware.Rating);
                }
                else
                {
                    objCyberware.DiscountCost = frmPickCyberware.MyForm.BlackMarketDiscount;
                    objCyberware.PrototypeTranshuman = frmPickCyberware.MyForm.PrototypeTranshuman;

                    // Apply the ESS discount if applicable.
                    if (CharacterObjectSettings.AllowCyberwareESSDiscounts)
                        objCyberware.ESSDiscount = frmPickCyberware.MyForm.SelectedESSDiscount;

                    if (frmPickCyberware.MyForm.FreeCost)
                        objCyberware.Cost = "0";

                    if (objSelectedCyberware != null)
                        await objSelectedCyberware.Children.AddAsync(objCyberware, token).ConfigureAwait(false);
                    else
                        await CharacterObject.Cyberware.AddAsync(objCyberware, token).ConfigureAwait(false);

                    CharacterObject.Weapons.AddRange(lstWeapons);
                    CharacterObject.Vehicles.AddRange(lstVehicles);
                }

                return frmPickCyberware.MyForm.AddAgain;
            }
        }

        /// <summary>
        /// Select a piece of Gear to be added to the character.
        /// </summary>
        private async ValueTask<bool> PickGear(string strSelectedId, CancellationToken token = default)
        {
            bool blnNullParent = false;
            Gear objSelectedGear = CharacterObject.Gear.DeepFindById(strSelectedId);
            Location objLocation = null;
            if (objSelectedGear == null)
            {
                blnNullParent = true;
                objLocation =
                    await CharacterObject.GearLocations
                                         .FirstOrDefaultAsync(location => location.InternalId == strSelectedId, token)
                                         .ConfigureAwait(false);
            }

            // Open the Gear XML file and locate the selected Gear.
            XPathNavigator xmlParent
                = blnNullParent ? null : await objSelectedGear.GetNodeXPathAsync(token).ConfigureAwait(false);
            CursorWait objCursorWait = await CursorWait.NewAsync(this, token: token).ConfigureAwait(false);
            try
            {
                string strCategories = string.Empty;

                if (xmlParent != null)
                {
                    XPathNodeIterator xmlAddonCategoryList = await xmlParent
                                                                   .SelectAndCacheExpressionAsync(
                                                                       "addoncategory", token).ConfigureAwait(false);
                    if (xmlAddonCategoryList.Count > 0)
                    {
                        using (new FetchSafelyFromPool<StringBuilder>(
                                   Utils.StringBuilderPool, out StringBuilder sbdCategories))
                        {
                            foreach (XPathNavigator objXmlCategory in xmlAddonCategoryList)
                                sbdCategories.Append(objXmlCategory.Value).Append(',');
                            // Remove the trailing comma.
                            --sbdCategories.Length;
                            strCategories = sbdCategories.ToString();
                        }
                    }
                }

                using (ThreadSafeForm<SelectGear> frmPickGear = await ThreadSafeForm<SelectGear>.GetAsync(
                           () => new SelectGear(CharacterObject,
                                                objSelectedGear?.ChildAvailModifier ?? 0,
                                                objSelectedGear?.ChildCostMultiplier ?? 1,
                                                objSelectedGear, strCategories), token).ConfigureAwait(false))
                {
                    if (!blnNullParent
                        && (!string.IsNullOrEmpty(objSelectedGear.Capacity) && !objSelectedGear.Capacity.Contains('[')
                            || objSelectedGear.Capacity.Contains("/[")))
                    {
                        // If the Gear has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that conume Capacity).
                        frmPickGear.MyForm.MaximumCapacity = objSelectedGear.CapacityRemaining;
                        if (!string.IsNullOrEmpty(strCategories))
                            frmPickGear.MyForm.ShowNegativeCapacityOnly = true;
                    }

                    // Make sure the dialogue window was not canceled.
                    if (await frmPickGear.ShowDialogSafeAsync(this, token).ConfigureAwait(false) == DialogResult.Cancel)
                        return false;

                    // Open the Cyberware XML file and locate the selected piece.
                    XmlDocument objXmlDocument
                        = await CharacterObject.LoadDataAsync("gear.xml", token: token).ConfigureAwait(false);
                    XmlNode objXmlGear
                        = objXmlDocument.TryGetNodeByNameOrId("/chummer/gears/gear", frmPickGear.MyForm.SelectedGear);

                    // Create the new piece of Gear.
                    List<Weapon> lstWeapons = new List<Weapon>(1);

                    Gear objGear = new Gear(CharacterObject);
                    objGear.Create(objXmlGear, frmPickGear.MyForm.SelectedRating, lstWeapons, string.Empty,
                                   objSelectedGear?.Equipped != false);
                    if (objGear.InternalId.IsEmptyGuid())
                        return frmPickGear.MyForm.AddAgain;
                    objGear.Quantity = frmPickGear.MyForm.SelectedQty;

                    // If a Commlink has just been added, see if the character already has one. If not, make it the active Commlink.
                    if (CharacterObject.ActiveCommlink == null && objGear.IsCommlink)
                    {
                        objGear.SetActiveCommlink(CharacterObject, true);
                    }

                    // reduce the cost for Black Market Pipeline
                    objGear.DiscountCost = frmPickGear.MyForm.BlackMarketDiscount;
                    // Reduce the cost for Do It Yourself components.
                    if (frmPickGear.MyForm.DoItYourself)
                        objGear.Cost = '(' + objGear.Cost + ") * 0.5";
                    // If the item was marked as free, change its cost.
                    if (frmPickGear.MyForm.FreeCost)
                    {
                        objGear.Cost = "0";
                    }

                    // Create any Weapons that came with this Gear.
                    foreach (Weapon objWeapon in lstWeapons)
                    {
                        await CharacterObject.Weapons.AddAsync(objWeapon, token).ConfigureAwait(false);
                    }

                    ThreadSafeObservableCollection<Gear> destinationGear =
                        blnNullParent ? CharacterObject.Gear : objSelectedGear.Children;
                    bool blnMatchFound = false;
                    await destinationGear.ForEachWithBreakAsync(async objExistingGear =>
                    {
                        if (objExistingGear.Location == objLocation
                            && objGear.IsIdenticalToOtherGear(objExistingGear, true)
                            && Program.ShowScrollableMessageBox(this,
                                                                string.Format(GlobalSettings.CultureInfo,
                                                                              await LanguageManager.GetStringAsync(
                                                                                      "Message_MergeIdentical",
                                                                                      token: token)
                                                                                  .ConfigureAwait(false),
                                                                              await objGear
                                                                                  .GetCurrentDisplayNameShortAsync(
                                                                                      token)
                                                                                  .ConfigureAwait(false)),
                                                                await LanguageManager.GetStringAsync(
                                                                        "MessageTitle_MergeIdentical",
                                                                        token: token)
                                                                    .ConfigureAwait(false),
                                                                MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                            == DialogResult.Yes)
                        {
                            // A match was found, so increase the quantity instead.
                            objExistingGear.Quantity += objGear.Quantity;
                            blnMatchFound = true;
                            return false;
                        }

                        return true;
                    }, token).ConfigureAwait(false);

                    if (!blnMatchFound)
                    {
                        if (objLocation != null)
                            await objLocation.Children.AddAsync(objGear, token).ConfigureAwait(false);
                        await destinationGear.AddAsync(objGear, token).ConfigureAwait(false);
                    }
                    else
                    {
                        await RequestCharacterUpdate(token).ConfigureAwait(false);
                        await SetDirty(true, token).ConfigureAwait(false);
                    }

                    return frmPickGear.MyForm.AddAgain;
                }
            }
            finally
            {
                await objCursorWait.DisposeAsync().ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Select a piece of Gear and add it to a piece of Armor.
        /// </summary>
        /// <param name="blnShowArmorCapacityOnly">Whether or not only items that consume capacity should be shown.</param>
        /// <param name="strSelectedId">Id attached to the object to which the gear should be added.</param>
        /// <param name="token">CancellationToken to listen to.</param>
        private async ValueTask<bool> PickArmorGear(string strSelectedId, bool blnShowArmorCapacityOnly = false,
                                                    CancellationToken token = default)
        {
            Gear objSelectedGear = null;
            ArmorMod objSelectedMod = null;
            Armor objSelectedArmor = CharacterObject.Armor.FindById(strSelectedId);
            if (objSelectedArmor == null)
            {
                objSelectedGear
                    = CharacterObject.Armor.FindArmorGear(strSelectedId, out objSelectedArmor, out objSelectedMod);
                if (objSelectedGear == null)
                    objSelectedMod = CharacterObject.Armor.FindArmorMod(strSelectedId);
            }

            // Open the Gear XML file and locate the selected Gear.
            object objParent = objSelectedGear ?? objSelectedMod ?? (object) objSelectedArmor;
            CursorWait objCursorWait = await CursorWait.NewAsync(this, token: token).ConfigureAwait(false);
            try
            {
                string strCategories = string.Empty;
                if (!string.IsNullOrEmpty(strSelectedId) && objParent is IHasXmlDataNode objParentWithDataNode)
                {
                    XPathNavigator objParentDataNode
                        = await objParentWithDataNode.GetNodeXPathAsync(token).ConfigureAwait(false);
                    XPathNodeIterator xmlAddonCategoryList = objParentDataNode != null
                        ? await objParentDataNode.SelectAndCacheExpressionAsync("addoncategory", token)
                                                 .ConfigureAwait(false)
                        : null;
                    if (xmlAddonCategoryList?.Count > 0)
                    {
                        using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                      out StringBuilder sbdCategories))
                        {
                            foreach (XPathNavigator objXmlCategory in xmlAddonCategoryList)
                                sbdCategories.Append(objXmlCategory.Value).Append(',');
                            // Remove the trailing comma.
                            if (sbdCategories.Length > 0)
                                --sbdCategories.Length;
                            strCategories = sbdCategories.ToString();
                        }
                    }
                }

                using (ThreadSafeForm<SelectGear> frmPickGear = await ThreadSafeForm<SelectGear>.GetAsync(
                           () => new SelectGear(CharacterObject, 0, 1, objParent, strCategories)
                           {
                               ShowArmorCapacityOnly = blnShowArmorCapacityOnly,
                               CapacityDisplayStyle = objSelectedMod != null
                                   ? CapacityStyle.Standard
                                   : objSelectedArmor.CapacityDisplayStyle
                           }, token).ConfigureAwait(false))
                {
                    if (!string.IsNullOrEmpty(strSelectedId))
                    {
                        // If the Gear has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that conume Capacity).
                        if (objSelectedGear?.Capacity.Contains('[') == false)
                            frmPickGear.MyForm.MaximumCapacity = objSelectedGear.CapacityRemaining;
                        else if (objSelectedMod != null)
                            frmPickGear.MyForm.MaximumCapacity = objSelectedMod.GearCapacityRemaining;
                    }

                    // Make sure the dialogue window was not canceled.
                    if (await frmPickGear.ShowDialogSafeAsync(this, token).ConfigureAwait(false) == DialogResult.Cancel)
                        return false;

                    // Open the Cyberware XML file and locate the selected piece.
                    XmlDocument objXmlDocument
                        = await CharacterObject.LoadDataAsync("gear.xml", token: token).ConfigureAwait(false);
                    XmlNode objXmlGear
                        = objXmlDocument.TryGetNodeByNameOrId("/chummer/gears/gear", frmPickGear.MyForm.SelectedGear);

                    // Create the new piece of Gear.
                    List<Weapon> lstWeapons = new List<Weapon>(1);

                    Gear objGear = new Gear(CharacterObject);
                    objGear.Create(objXmlGear, frmPickGear.MyForm.SelectedRating, lstWeapons, string.Empty,
                                   objSelectedGear?.Equipped ?? objSelectedMod?.Equipped ?? objSelectedArmor.Equipped);

                    if (objGear.InternalId.IsEmptyGuid())
                        return frmPickGear.MyForm.AddAgain;

                    objGear.Quantity = frmPickGear.MyForm.SelectedQty;
                    objGear.DiscountCost = frmPickGear.MyForm.BlackMarketDiscount;

                    if (objSelectedGear != null)
                        objGear.Parent = objSelectedGear;

                    // Reduce the cost for Do It Yourself components.
                    if (frmPickGear.MyForm.DoItYourself)
                        objGear.Cost = '(' + objGear.Cost + ") * 0.5";
                    // If the item was marked as free, change its cost.
                    if (frmPickGear.MyForm.FreeCost)
                    {
                        objGear.Cost = "0";
                    }

                    // Create any Weapons that came with this Gear.
                    foreach (Weapon objWeapon in lstWeapons)
                    {
                        await CharacterObject.Weapons.AddAsync(objWeapon, token).ConfigureAwait(false);
                    }

                    Gear objMatchingGear
                        // If this is Ammunition, see if the character already has it on them.
                        = objGear.Category == "Ammunition" || !string.IsNullOrEmpty(objGear.AmmoForWeaponType)
                            ? await CharacterObject.Gear
                                                   .FirstOrDefaultAsync(x => objGear.IsIdenticalToOtherGear(x), token)
                                                   .ConfigureAwait(false)
                            : null;

                    if (objMatchingGear != null)
                    {
                        objMatchingGear.Quantity += objGear.Quantity;
                    }
                    else
                    {
                        // Add the Gear.
                        if (!string.IsNullOrEmpty(objSelectedGear?.Name))
                        {
                            await objSelectedGear.Children.AddAsync(objGear, token).ConfigureAwait(false);
                        }
                        else if (!string.IsNullOrEmpty(objSelectedMod?.Name))
                        {
                            await objSelectedMod.GearChildren.AddAsync(objGear, token).ConfigureAwait(false);
                        }
                        else
                        {
                            await objSelectedArmor.GearChildren.AddAsync(objGear, token).ConfigureAwait(false);
                        }
                    }

                    return frmPickGear.MyForm.AddAgain;
                }
            }
            finally
            {
                await objCursorWait.DisposeAsync().ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Refresh the currently-selected Lifestyle.
        /// </summary>
        private async Task RefreshSelectedLifestyle(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                await flpLifestyleDetails.DoThreadSafeAsync(x => x.SuspendLayout(), token).ConfigureAwait(false);
                try
                {
                    TreeNode objSelectedNode = await treLifestyles.DoThreadSafeFuncAsync(x => x.SelectedNode, token)
                                                                  .ConfigureAwait(false);
                    object objSelectedNodeTag = objSelectedNode?.Tag;
                    if (objSelectedNodeTag == null || objSelectedNode.Level <= 0
                                                   || !(objSelectedNodeTag is Lifestyle objLifestyle))
                    {
                        await flpLifestyleDetails.DoThreadSafeAsync(x => x.Visible = false, token)
                                                 .ConfigureAwait(false);
                        await cmdDeleteLifestyle
                              .DoThreadSafeAsync(x => x.Enabled = objSelectedNodeTag is ICanRemove, token)
                              .ConfigureAwait(false);
                        return;
                    }

                    await flpLifestyleDetails.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                    await cmdDeleteLifestyle.DoThreadSafeAsync(x => x.Enabled = true, token).ConfigureAwait(false);
                    string strSpace = await LanguageManager.GetStringAsync("String_Space", token: token)
                                                           .ConfigureAwait(false);
                    await lblLifestyleCost.DoThreadSafeAsync(x => x.Text
                                                                 = objLifestyle.TotalMonthlyCost.ToString(
                                                                       CharacterObjectSettings.NuyenFormat,
                                                                       GlobalSettings.CultureInfo)
                                                                   + LanguageManager.GetString(
                                                                       "String_NuyenSymbol", token: token), token)
                                          .ConfigureAwait(false);
                    await nudLifestyleMonths.DoThreadSafeAsync(x => x.Value = objLifestyle.Increments, token)
                                            .ConfigureAwait(false);
                    string strText = objLifestyle.Dice.ToString(GlobalSettings.CultureInfo)
                                     + await LanguageManager.GetStringAsync("String_D6", token: token)
                                                            .ConfigureAwait(false)
                                     + strSpace
                                     + '×' + strSpace
                                     + objLifestyle.Multiplier.ToString(
                                         CharacterObjectSettings.NuyenFormat,
                                         GlobalSettings.CultureInfo) + await LanguageManager
                                                                             .GetStringAsync(
                                                                                 "String_NuyenSymbol", token: token)
                                                                             .ConfigureAwait(false);
                    await lblLifestyleStartingNuyen.DoThreadSafeAsync(x => x.Text = strText, token)
                                                   .ConfigureAwait(false);
                    await objLifestyle.SetSourceDetailAsync(lblLifestyleSource, token).ConfigureAwait(false);
                    string strCost
                        = (await objLifestyle.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                            CharacterObjectSettings.NuyenFormat, GlobalSettings.CultureInfo) + await LanguageManager
                            .GetStringAsync("String_NuyenSymbol", token: token).ConfigureAwait(false);
                    await lblLifestyleTotalCost.DoThreadSafeAsync(x => x.Text = strCost, token).ConfigureAwait(false);
                    string strCostLabelString;
                    string strIncrementString;
                    // Change the Cost/Month label.
                    switch (objLifestyle.IncrementType)
                    {
                        case LifestyleIncrement.Day:
                            strCostLabelString = await LanguageManager
                                                       .GetStringAsync("Label_SelectLifestyle_CostPerDay", token: token)
                                                       .ConfigureAwait(false);
                            strIncrementString = await LanguageManager.GetStringAsync("String_Days", token: token)
                                                                      .ConfigureAwait(false);
                            break;

                        case LifestyleIncrement.Week:
                            strCostLabelString = await LanguageManager
                                                       .GetStringAsync("Label_SelectLifestyle_CostPerWeek",
                                                                       token: token).ConfigureAwait(false);
                            strIncrementString = await LanguageManager.GetStringAsync("String_Weeks", token: token)
                                                                      .ConfigureAwait(false);
                            break;

                        default:
                            strCostLabelString = await LanguageManager
                                                       .GetStringAsync("Label_SelectLifestyle_CostPerMonth",
                                                                       token: token).ConfigureAwait(false);
                            strIncrementString = await LanguageManager.GetStringAsync("String_Months", token: token)
                                                                      .ConfigureAwait(false);
                            break;
                    }

                    await lblLifestyleCostLabel.DoThreadSafeAsync(x => x.Text = strCostLabelString, token)
                                               .ConfigureAwait(false);
                    string strMonthsLabel = strIncrementString + string.Format(
                        GlobalSettings.CultureInfo,
                        await LanguageManager.GetStringAsync("Label_LifestylePermanent", token: token)
                                             .ConfigureAwait(false),
                        objLifestyle.IncrementsRequiredForPermanent.ToString(GlobalSettings.CultureInfo));
                    await lblLifestyleMonthsLabel.DoThreadSafeAsync(x => x.Text = strMonthsLabel, token)
                                                 .ConfigureAwait(false);
                    token.ThrowIfCancellationRequested();
                    if (!string.IsNullOrEmpty(objLifestyle.BaseLifestyle))
                    {
                        using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                      out StringBuilder sbdQualities))
                        {
                            await sbdQualities.AppendJoinAsync(',' + Environment.NewLine,
                                                               objLifestyle.LifestyleQualities.Select(
                                                                   r => r.GetCurrentFormattedDisplayNameAsync(token)
                                                                         .AsTask()),
                                                               token).ConfigureAwait(false);
                            foreach (Improvement objImprovement in await ImprovementManager
                                                                         .GetCachedImprovementListForValueOfAsync(
                                                                             CharacterObject,
                                                                             Improvement.ImprovementType.LifestyleCost,
                                                                             token: token).ConfigureAwait(false))
                            {
                                if (sbdQualities.Length > 0)
                                    sbdQualities.AppendLine(',');

                                sbdQualities.Append(await CharacterObject
                                                          .GetObjectNameAsync(objImprovement, token: token)
                                                          .ConfigureAwait(false))
                                            .Append(await LanguageManager.GetStringAsync("String_Space", token: token)
                                                                         .ConfigureAwait(false)).Append('[')
                                            .Append(
                                                objImprovement.Value.ToString(
                                                    "+#,0;-#,0;0", GlobalSettings.CultureInfo))
                                            .Append("%]");
                            }

                            await lblLifestyleQualities.DoThreadSafeAsync(x => x.Text = sbdQualities.ToString(), token)
                                                       .ConfigureAwait(false);
                        }

                        string strName = await objLifestyle.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                        await lblBaseLifestyle.DoThreadSafeAsync(x => x.Text = strName, token)
                                              .ConfigureAwait(false);
                        await lblLifestyleQualitiesLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                        await lblLifestyleQualities.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                    }
                    else
                    {
                        string strError = await LanguageManager.GetStringAsync("String_Error", token: token)
                                                               .ConfigureAwait(false);
                        await lblBaseLifestyle.DoThreadSafeAsync(x => x.Text = strError, token).ConfigureAwait(false);
                        await lblLifestyleQualitiesLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                        await lblLifestyleQualities.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                    }

                    //Controls Visibility and content of the City, District and Borough Labels
                    if (!string.IsNullOrEmpty(objLifestyle.City))
                    {
                        await lblLifestyleCity.DoThreadSafeAsync(x =>
                        {
                            x.Text = objLifestyle.City;
                            x.Visible = true;
                        }, token).ConfigureAwait(false);
                        await lblLifestyleCityLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                    }
                    else
                    {
                        await lblLifestyleCity.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await lblLifestyleCityLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                    }

                    if (!string.IsNullOrEmpty(objLifestyle.District))
                    {
                        await lblLifestyleDistrict.DoThreadSafeAsync(x =>
                        {
                            x.Text = objLifestyle.District;
                            x.Visible = true;
                        }, token).ConfigureAwait(false);
                        await lblLifestyleDistrictLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                       .ConfigureAwait(false);
                    }
                    else
                    {
                        await lblLifestyleDistrict.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                        await lblLifestyleDistrictLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                    }

                    if (!string.IsNullOrEmpty(objLifestyle.Borough))
                    {
                        await lblLifestyleBorough.DoThreadSafeAsync(x =>
                        {
                            x.Text = objLifestyle.Borough;
                            x.Visible = true;
                        }, token).ConfigureAwait(false);
                        await lblLifestyleBoroughLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                      .ConfigureAwait(false);
                    }
                    else
                    {
                        await lblLifestyleBorough.DoThreadSafeAsync(x => x.Visible = false, token)
                                                 .ConfigureAwait(false);
                        await lblLifestyleBoroughLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                      .ConfigureAwait(false);
                    }
                }
                finally
                {
                    await flpLifestyleDetails.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken).ConfigureAwait(false);
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        /// <summary>
        /// Refresh the currently-selected Vehicle.
        /// </summary>
        private async Task RefreshSelectedVehicle(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                await flpVehicles.DoThreadSafeAsync(x => x.SuspendLayout(), token).ConfigureAwait(false);
                try
                {
                    TreeNode objSelectedNode = await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode, token)
                                                                .ConfigureAwait(false);
                    object objSelectedNodeTag = objSelectedNode?.Tag;
                    if (objSelectedNodeTag == null || objSelectedNode.Level <= 0 || objSelectedNodeTag is Location)
                    {
                        await gpbVehiclesCommon.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await gpbVehiclesVehicle.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await gpbVehiclesWeapon.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await gpbVehiclesMatrix.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        // Buttons
                        await cmdDeleteVehicle
                              .DoThreadSafeAsync(x => x.Enabled = objSelectedNodeTag is ICanRemove, token)
                              .ConfigureAwait(false);
                        return;
                    }

                    string strSpace = await LanguageManager.GetStringAsync("String_Space", token: token)
                                                           .ConfigureAwait(false);
                    if (objSelectedNodeTag is IHasStolenProperty selectedLoot && (await ImprovementManager
                            .GetCachedImprovementListForValueOfAsync(
                                CharacterObject,
                                Improvement.ImprovementType.Nuyen,
                                "Stolen", token: token).ConfigureAwait(false)).Count > 0)
                    {
                        await chkVehicleStolen.DoThreadSafeAsync(x =>
                        {
                            x.Visible = true;
                            x.Checked = selectedLoot.Stolen;
                        }, token).ConfigureAwait(false);
                    }
                    else
                    {
                        await chkVehicleStolen.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    }

                    if (objSelectedNodeTag is IHasSource objSelected)
                    {
                        await lblVehicleSourceLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                        await lblVehicleSource.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await objSelected.SetSourceDetailAsync(lblVehicleSource, token).ConfigureAwait(false);
                    }
                    else
                    {
                        await lblVehicleSourceLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                        await lblVehicleSource.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                    }

                    if (objSelectedNodeTag is IHasRating objHasRating)
                    {
                        string strText = string.Format(
                            GlobalSettings.CultureInfo,
                            await LanguageManager.GetStringAsync(
                                "Label_RatingFormat", token: token).ConfigureAwait(false),
                            await LanguageManager.GetStringAsync(
                                objHasRating.RatingLabel, token: token).ConfigureAwait(false));
                        await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Text = strText, token)
                                                   .ConfigureAwait(false);
                    }

                    switch (objSelectedNodeTag)
                    {
                        // Locate the selected Vehicle.
                        case Vehicle objVehicle:
                        {
                            await gpbVehiclesCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesVehicle.DoThreadSafeAsync(x => x.Visible = true, token)
                                                    .ConfigureAwait(false);
                            await gpbVehiclesWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesMatrix.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // Buttons
                            await cmdDeleteVehicle
                                  .DoThreadSafeAsync(x => x.Enabled = string.IsNullOrEmpty(objVehicle.ParentID), token)
                                  .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // gpbVehiclesCommon
                            string strName = await objVehicle.GetCurrentDisplayNameShortAsync(token)
                                                             .ConfigureAwait(false);
                            await lblVehicleName
                                  .DoThreadSafeAsync(x => x.Text = strName, token)
                                  .ConfigureAwait(false);
                            string strCategory = await objVehicle.DisplayCategoryAsync(GlobalSettings.Language, token)
                                                                 .ConfigureAwait(false);
                            await lblVehicleCategory
                                  .DoThreadSafeAsync(x => x.Text = strCategory,
                                                     token).ConfigureAwait(false);
                            await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                            await nudVehicleRating.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                            await lblVehicleGearQtyLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            await nudVehicleGearQty.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            string strAvail = await objVehicle.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblVehicleAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                                 .ConfigureAwait(false);
                            string strCost = (await objVehicle.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token)
                                                                    .ConfigureAwait(false);
                            await lblVehicleCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                                .ConfigureAwait(false);
                            if (await CharacterObjectSettings.BookEnabledAsync("R5", token).ConfigureAwait(false))
                            {
                                await lblVehicleSlotsLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                                await lblVehicleSlots.DoThreadSafeAsync(x => x.Visible = false, token)
                                                     .ConfigureAwait(false);
                            }
                            else
                            {
                                int intSlots = await objVehicle.GetSlotsAsync(token).ConfigureAwait(false);
                                string strText = intSlots.ToString(GlobalSettings.CultureInfo) + strSpace
                                    + '('
                                    + (intSlots - await objVehicle.GetSlotsUsedAsync(token).ConfigureAwait(false)).ToString(
                                        GlobalSettings.CultureInfo)
                                    + strSpace + await LanguageManager.GetStringAsync("String_Remaining", token: token)
                                                                      .ConfigureAwait(false)
                                    + ')';
                                await lblVehicleSlotsLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                          .ConfigureAwait(false);
                                await lblVehicleSlots.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = strText;
                                }, token).ConfigureAwait(false);
                            }

                            await cmdVehicleCyberwareChangeMount.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                .ConfigureAwait(false);
                            await chkVehicleWeaponAccessoryInstalled.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                    .ConfigureAwait(false);
                            await chkVehicleIncludedInWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = CharacterObject
                                                  .GenerateBlackMarketMappings(
                                                      await (await CharacterObject.LoadDataXPathAsync(
                                                                "vehicles.xml", token: token).ConfigureAwait(false))
                                                            .SelectSingleNodeAndCacheExpressionAsync(
                                                                "/chummer", token: token).ConfigureAwait(false), token)
                                                  .Contains(objVehicle.Category);
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objVehicle.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            // gpbVehiclesVehicle
                            await lblVehicleHandling.DoThreadSafeAsync(x => x.Text = objVehicle.TotalHandling, token)
                                                    .ConfigureAwait(false);
                            await lblVehicleAccel.DoThreadSafeAsync(x => x.Text = objVehicle.TotalAccel, token)
                                                 .ConfigureAwait(false);
                            await lblVehicleSpeed.DoThreadSafeAsync(x => x.Text = objVehicle.TotalSpeed, token)
                                                 .ConfigureAwait(false);
                            await lblVehiclePilot
                                  .DoThreadSafeAsync(
                                      x => x.Text = objVehicle.Pilot.ToString(GlobalSettings.CultureInfo), token)
                                  .ConfigureAwait(false);
                            await lblVehicleBody
                                  .DoThreadSafeAsync(
                                      x => x.Text = objVehicle.TotalBody.ToString(GlobalSettings.CultureInfo), token)
                                  .ConfigureAwait(false);
                            await lblVehicleArmor
                                  .DoThreadSafeAsync(
                                      x => x.Text = objVehicle.TotalArmor.ToString(GlobalSettings.CultureInfo), token)
                                  .ConfigureAwait(false);
                            await lblVehicleSeats
                                  .DoThreadSafeAsync(
                                      x => x.Text = objVehicle.TotalSeats.ToString(GlobalSettings.CultureInfo), token)
                                  .ConfigureAwait(false);
                            await lblVehicleSensor
                                  .DoThreadSafeAsync(
                                      x => x.Text = objVehicle.CalculatedSensor.ToString(GlobalSettings.CultureInfo),
                                      token).ConfigureAwait(false);
                            if (await CharacterObjectSettings.BookEnabledAsync("R5", token).ConfigureAwait(false))
                            {
                                if (objVehicle.IsDrone && await CharacterObjectSettings.GetDroneModsAsync(token)
                                        .ConfigureAwait(false))
                                {
                                    await lblVehiclePowertrainLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                   .ConfigureAwait(false);
                                    await lblVehiclePowertrain.DoThreadSafeAsync(x => x.Visible = false, token)
                                                              .ConfigureAwait(false);
                                    await lblVehicleCosmeticLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                 .ConfigureAwait(false);
                                    await lblVehicleCosmetic.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                                    await lblVehicleElectromagneticLabel
                                          .DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                                    await lblVehicleElectromagnetic.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                   .ConfigureAwait(false);
                                    await lblVehicleBodymodLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                .ConfigureAwait(false);
                                    await lblVehicleBodymod.DoThreadSafeAsync(x => x.Visible = false, token)
                                                           .ConfigureAwait(false);
                                    await lblVehicleWeaponsmodLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                   .ConfigureAwait(false);
                                    await lblVehicleWeaponsmod.DoThreadSafeAsync(x => x.Visible = false, token)
                                                              .ConfigureAwait(false);
                                    await lblVehicleProtectionLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                   .ConfigureAwait(false);
                                    await lblVehicleProtection.DoThreadSafeAsync(x => x.Visible = false, token)
                                                              .ConfigureAwait(false);
                                    await lblVehicleDroneModSlotsLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                      .ConfigureAwait(false);
                                    string strText
                                        = (await objVehicle.GetDroneModSlotsUsedAsync(token).ConfigureAwait(false)).ToString(
                                            GlobalSettings.CultureInfo) + '/'
                                                                        + (await objVehicle
                                                                            .GetDroneModSlotsAsync(token).ConfigureAwait(false))
                                                                        .ToString(GlobalSettings.CultureInfo);
                                    await lblVehicleDroneModSlots.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Text = strText;
                                    }, token).ConfigureAwait(false);
                                }
                                else
                                {
                                    await lblVehiclePowertrainLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                   .ConfigureAwait(false);
                                    await lblVehiclePowertrain.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Text = objVehicle.PowertrainModSlotsUsed();
                                    }, token).ConfigureAwait(false);
                                    await lblVehicleCosmeticLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                 .ConfigureAwait(false);
                                    await lblVehicleCosmetic.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Text = objVehicle.CosmeticModSlotsUsed();
                                    }, token).ConfigureAwait(false);
                                    await lblVehicleElectromagneticLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                        .ConfigureAwait(false);
                                    await lblVehicleElectromagnetic.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Text = objVehicle.ElectromagneticModSlotsUsed();
                                    }, token).ConfigureAwait(false);
                                    await lblVehicleBodymodLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                .ConfigureAwait(false);
                                    await lblVehicleBodymod.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Text = objVehicle.BodyModSlotsUsed();
                                    }, token).ConfigureAwait(false);
                                    await lblVehicleWeaponsmodLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                   .ConfigureAwait(false);
                                    await lblVehicleWeaponsmod.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Text = objVehicle.WeaponModSlotsUsed();
                                    }, token).ConfigureAwait(false);
                                    await lblVehicleProtectionLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                   .ConfigureAwait(false);
                                    await lblVehicleProtection.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Text = objVehicle.ProtectionModSlotsUsed();
                                    }, token).ConfigureAwait(false);
                                    await lblVehicleDroneModSlotsLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                      .ConfigureAwait(false);
                                    await lblVehicleDroneModSlots.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                 .ConfigureAwait(false);
                                }
                            }
                            else
                            {
                                await lblVehiclePowertrainLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                               .ConfigureAwait(false);
                                await lblVehiclePowertrain.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                                await lblVehicleCosmeticLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                             .ConfigureAwait(false);
                                await lblVehicleCosmetic.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                                await lblVehicleElectromagneticLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                    .ConfigureAwait(false);
                                await lblVehicleElectromagnetic.DoThreadSafeAsync(x => x.Visible = false, token)
                                                               .ConfigureAwait(false);
                                await lblVehicleBodymodLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                                await lblVehicleBodymod.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                                await lblVehicleWeaponsmodLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                               .ConfigureAwait(false);
                                await lblVehicleWeaponsmod.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                                await lblVehicleProtectionLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                               .ConfigureAwait(false);
                                await lblVehicleProtection.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                                await lblVehicleDroneModSlotsLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                  .ConfigureAwait(false);
                                await lblVehicleDroneModSlots.DoThreadSafeAsync(x => x.Visible = false, token)
                                                             .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            // gpbVehiclesMatrix
                            int intDeviceRating = objVehicle.GetTotalMatrixAttribute("Device Rating");
                            await lblVehicleDevice
                                  .DoThreadSafeAsync(x => x.Text = intDeviceRating.ToString(GlobalSettings.CultureInfo),
                                                     token).ConfigureAwait(false);
                            await objVehicle.RefreshMatrixAttributeComboBoxesAsync(
                                                cboVehicleAttack, cboVehicleSleaze, cboVehicleDataProcessing,
                                                cboVehicleFirewall, token)
                                            .ConfigureAwait(false);
                            await chkVehicleActiveCommlink.DoThreadSafeAsync(x =>
                            {
                                x.Visible = objVehicle.IsCommlink;
                                x.Checked = objVehicle.IsActiveCommlink(CharacterObject);
                            }, token).ConfigureAwait(false);
                            if (CharacterObject.IsAI)
                            {
                                await chkVehicleHomeNode.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Checked = objVehicle.IsHomeNode(CharacterObject);
                                    x.Enabled = objVehicle.GetTotalMatrixAttribute("Program Limit")
                                                >= (CharacterObject.DEP.TotalValue > intDeviceRating ? 2 : 1);
                                }, token).ConfigureAwait(false);
                            }
                            else
                                await chkVehicleHomeNode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);

                            token.ThrowIfCancellationRequested();
                            await UpdateSensor(objVehicle, token).ConfigureAwait(false);
                            break;
                        }
                        // Locate the selected VehicleMod.
                        case WeaponMount objWeaponMount:
                        {
                            await gpbVehiclesCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesVehicle.DoThreadSafeAsync(x => x.Visible = false, token)
                                                    .ConfigureAwait(false);
                            await gpbVehiclesWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesMatrix.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            // Buttons
                            await cmdDeleteVehicle
                                  .DoThreadSafeAsync(x => x.Enabled = !objWeaponMount.IncludedInVehicle, token)
                                  .ConfigureAwait(false);
                            // gpbVehiclesCommon
                            await lblVehicleCategory
                                  .DoThreadSafeAsync(
                                      x => x.Text = objWeaponMount.DisplayCategory(GlobalSettings.Language), token)
                                  .ConfigureAwait(false);
                            string strName = await objWeaponMount.GetCurrentDisplayNameAsync(token)
                                                                 .ConfigureAwait(false);
                            await lblVehicleName
                                  .DoThreadSafeAsync(x => x.Text = strName, token)
                                  .ConfigureAwait(false);
                            await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                            await nudVehicleRating.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                            await lblVehicleGearQtyLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            await nudVehicleGearQty.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            string strAvail = await objWeaponMount.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblVehicleAvail
                                  .DoThreadSafeAsync(x => x.Text = strAvail, token)
                                  .ConfigureAwait(false);
                            string strCost = (await objWeaponMount.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync(
                                                 "String_NuyenSymbol", token: token).ConfigureAwait(false);
                            await lblVehicleCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                                .ConfigureAwait(false);
                            await lblVehicleSlotsLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                      .ConfigureAwait(false);
                            await lblVehicleSlots.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Text = objWeaponMount.CalculatedSlots.ToString(GlobalSettings.CultureInfo);
                            }, token).ConfigureAwait(false);
                            await cmdVehicleCyberwareChangeMount.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                .ConfigureAwait(false);
                            await chkVehicleWeaponAccessoryInstalled.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Checked = objWeaponMount.Equipped;
                                x.Enabled = !objWeaponMount.IncludedInVehicle;
                            }, token).ConfigureAwait(false);
                            await chkVehicleIncludedInWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = !objWeaponMount.IncludedInVehicle && CharacterObject
                                    .GenerateBlackMarketMappings(
                                        await (await CharacterObject.LoadDataXPathAsync("vehicles.xml", token: token)
                                                                    .ConfigureAwait(false))
                                              .SelectSingleNodeAndCacheExpressionAsync(
                                                  "/chummer/weaponmountcategories", token: token).ConfigureAwait(false),
                                        token)
                                    .Contains(objWeaponMount.Category);
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objWeaponMount.IncludedInVehicle
                                        ? objWeaponMount.Parent?.DiscountCost == true
                                        : objWeaponMount.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            break;
                        }
                        case VehicleMod objMod:
                        {
                            await gpbVehiclesCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesVehicle.DoThreadSafeAsync(x => x.Visible = false, token)
                                                    .ConfigureAwait(false);
                            await gpbVehiclesWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesMatrix.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            // Buttons
                            await cmdDeleteVehicle.DoThreadSafeAsync(x => x.Enabled = !objMod.IncludedInVehicle, token)
                                                  .ConfigureAwait(false);
                            // gpbVehiclesCommon
                            string strName = await objMod.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                            await lblVehicleName.DoThreadSafeAsync(x => x.Text = strName, token)
                                                .ConfigureAwait(false);
                            string strText = await LanguageManager
                                                   .GetStringAsync("String_VehicleModification", token: token)
                                                   .ConfigureAwait(false);
                            await lblVehicleCategory.DoThreadSafeAsync(x => x.Text = strText, token)
                                                    .ConfigureAwait(false);
                            if (!objMod.MaxRating.Equals("qty", StringComparison.OrdinalIgnoreCase))
                            {
                                if (objMod.MaxRating.Equals("seats", StringComparison.OrdinalIgnoreCase))
                                {
                                    objMod.MaxRating = objMod.Parent.TotalSeats.ToString(GlobalSettings.CultureInfo);
                                }
                                else if (objMod.MaxRating.Equals("body", StringComparison.OrdinalIgnoreCase))
                                {
                                    objMod.MaxRating = objMod.Parent.TotalBody.ToString(GlobalSettings.CultureInfo);
                                }

                                token.ThrowIfCancellationRequested();
                                if (int.TryParse(objMod.MaxRating, NumberStyles.Any,
                                                 GlobalSettings.InvariantCultureInfo,
                                                 out int intMaxRating) && intMaxRating > 0)
                                {
                                    await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                               .ConfigureAwait(false);
                                    // If the Mod is Armor, use the lower of the Mod's maximum Rating and MaxArmor value for the Vehicle instead.
                                    await nudVehicleRating.DoThreadSafeAsync(x =>
                                    {
                                        x.Maximum = objMod.Name.StartsWith("Armor", StringComparison.Ordinal)
                                            ? Math.Min(intMaxRating, objMod.Parent.MaxArmor)
                                            : intMaxRating;
                                        x.Minimum = 1;
                                        x.Visible = true;
                                        x.Value = objMod.Rating;
                                        x.Increment = 1;
                                        x.Enabled = !objMod.IncludedInVehicle;
                                    }, token).ConfigureAwait(false);
                                }
                                else
                                {
                                    await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                               .ConfigureAwait(false);
                                    await nudVehicleRating.DoThreadSafeAsync(x =>
                                    {
                                        x.Minimum = 0;
                                        x.Increment = 1;
                                        x.Maximum = 0;
                                        x.Enabled = false;
                                        x.Visible = false;
                                    }, token).ConfigureAwait(false);
                                }
                            }
                            else
                            {
                                await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                           .ConfigureAwait(false);
                                await nudVehicleRating.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Minimum = 1;
                                    x.Maximum = Vehicle.MaxWheels;
                                    x.Value = objMod.Rating;
                                    x.Increment = 1;
                                    x.Enabled = !objMod.IncludedInVehicle;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await nudVehicleGearQty.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            await lblVehicleGearQtyLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            string strAvail = await objMod.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblVehicleAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                                 .ConfigureAwait(false);
                            string strCost = (await objMod.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token).ConfigureAwait(false);
                            await lblVehicleCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                                .ConfigureAwait(false);
                            await lblVehicleSlotsLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                      .ConfigureAwait(false);
                            await lblVehicleSlots.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Text = objMod.CalculatedSlots.ToString(GlobalSettings.CultureInfo);
                            }, token).ConfigureAwait(false);
                            await cmdVehicleCyberwareChangeMount.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                .ConfigureAwait(false);
                            await chkVehicleWeaponAccessoryInstalled.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Checked = objMod.Equipped;
                                x.Enabled = !objMod.IncludedInVehicle;
                            }, token).ConfigureAwait(false);
                            await chkVehicleIncludedInWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = !objMod.IncludedInVehicle && CharacterObject
                                                                               .GenerateBlackMarketMappings(
                                                                                   await (await CharacterObject
                                                                                           .LoadDataXPathAsync(
                                                                                               "weapons.xml",
                                                                                               token: token)
                                                                                           .ConfigureAwait(false))
                                                                                       .SelectSingleNodeAndCacheExpressionAsync(
                                                                                           "/chummer/modcategories",
                                                                                           token: token)
                                                                                       .ConfigureAwait(false), token)
                                                                               .Contains(objMod.Category);
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objMod.IncludedInVehicle
                                        ? (objMod.WeaponMountParent?.DiscountCost ?? objMod.Parent?.DiscountCost)
                                          == true
                                        : objMod.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            break;
                        }
                        case Weapon objWeapon:
                        {
                            await gpbVehiclesCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesVehicle.DoThreadSafeAsync(x => x.Visible = false, token)
                                                    .ConfigureAwait(false);
                            await gpbVehiclesWeapon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesMatrix.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // Buttons
                            await cmdDeleteVehicle.DoThreadSafeAsync(x => x.Enabled = !objWeapon.Cyberware
                                                                         && objWeapon.Category != "Gear"
                                                                         && !objWeapon.IncludedInWeapon
                                                                         && string.IsNullOrEmpty(objWeapon.ParentID)
                                                                         && !objWeapon.Category.StartsWith(
                                                                             "Quality", StringComparison.Ordinal),
                                                                     token).ConfigureAwait(false);
                            // gpbVehiclesCommon
                            string strName = await objWeapon.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                            await lblVehicleName.DoThreadSafeAsync(x => x.Text = strName, token)
                                                .ConfigureAwait(false);
                            string strText = await objWeapon.DisplayCategoryAsync(GlobalSettings.Language, token)
                                                            .ConfigureAwait(false);
                            await lblVehicleCategory.DoThreadSafeAsync(x => x.Text = strText, token)
                                                    .ConfigureAwait(false);
                            await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                       .ConfigureAwait(false);
                            await nudVehicleRating.DoThreadSafeAsync(x => x.Visible = false, token)
                                                  .ConfigureAwait(false);
                            await lblVehicleGearQtyLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            await nudVehicleGearQty.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            string strAvail = await objWeapon.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblVehicleAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                                 .ConfigureAwait(false);
                            string strCost = (await objWeapon.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync(
                                                 "String_NuyenSymbol", token: token).ConfigureAwait(false);
                            await lblVehicleCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                                .ConfigureAwait(false);
                            await lblVehicleSlotsLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                      .ConfigureAwait(false);
                            await lblVehicleSlots.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                            if (!string.IsNullOrWhiteSpace(objWeapon.AccessoryMounts))
                            {
                                if (!GlobalSettings.Language.Equals(GlobalSettings.DefaultLanguage,
                                                                    StringComparison.OrdinalIgnoreCase))
                                {
                                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                               out StringBuilder sbdSlotsText))
                                    {
                                        foreach (string strMount in objWeapon.AccessoryMounts.SplitNoAlloc(
                                                     '/', StringSplitOptions.RemoveEmptyEntries))
                                            sbdSlotsText
                                                .Append(await LanguageManager
                                                              .GetStringAsync("String_Mount" + strMount, token: token)
                                                              .ConfigureAwait(false))
                                                .Append('/');
                                        --sbdSlotsText.Length;
                                        token.ThrowIfCancellationRequested();
                                        await lblWeaponSlots
                                              .DoThreadSafeAsync(x => x.Text = sbdSlotsText.ToString(), token)
                                              .ConfigureAwait(false);
                                    }
                                }
                                else
                                    await lblWeaponSlots
                                          .DoThreadSafeAsync(x => x.Text = objWeapon.AccessoryMounts, token)
                                          .ConfigureAwait(false);
                            }
                            else
                            {
                                string strNone = await LanguageManager.GetStringAsync("String_None", token: token)
                                                                      .ConfigureAwait(false);
                                await lblWeaponSlots.DoThreadSafeAsync(x => x.Text = strNone, token)
                                                    .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await cmdVehicleCyberwareChangeMount.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                .ConfigureAwait(false);
                            await chkVehicleWeaponAccessoryInstalled.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Checked = objWeapon.Equipped;
                                x.Enabled = objWeapon.ParentID != objWeapon.Parent?.InternalId
                                            && objWeapon.ParentID
                                            != objWeapon.ParentVehicle.InternalId;
                            }, token).ConfigureAwait(false);
                            await chkVehicleIncludedInWeapon.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Checked = objWeapon.IncludedInWeapon;
                            }, token).ConfigureAwait(false);
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = !objWeapon.IncludedInWeapon && CharacterObject
                                    .GenerateBlackMarketMappings(
                                        await (await CharacterObject
                                                     .LoadDataXPathAsync(
                                                         "weapons.xml", token: token).ConfigureAwait(false))
                                              .SelectSingleNodeAndCacheExpressionAsync(
                                                  "/chummer", token: token).ConfigureAwait(false), token)
                                    .Contains(objWeapon.Category);
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objWeapon.IncludedInWeapon
                                        ? objWeapon.Parent?.DiscountCost == true
                                        : objWeapon.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            // gpbVehiclesWeapon
                            await lblVehicleWeaponDamageLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                             .ConfigureAwait(false);
                            await lblVehicleWeaponDamage.DoThreadSafeAsync(x =>
                            {
                                x.Text = objWeapon.DisplayDamage;
                                x.Visible = true;
                            }, token).ConfigureAwait(false);
                            await lblVehicleWeaponAPLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                         .ConfigureAwait(false);
                            await lblVehicleWeaponAP.DoThreadSafeAsync(x =>
                            {
                                x.Text = objWeapon.DisplayTotalAP;
                                x.Visible = true;
                            }, token).ConfigureAwait(false);
                            await lblVehicleWeaponAccuracyLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                               .ConfigureAwait(false);
                            await lblVehicleWeaponAccuracy.DoThreadSafeAsync(x =>
                            {
                                x.Text = objWeapon.DisplayAccuracy;
                                x.Visible = true;
                            }, token).ConfigureAwait(false);
                            await lblVehicleWeaponDicePoolLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                               .ConfigureAwait(false);
                            string strPool
                                = (await objWeapon.GetDicePoolAsync(token: token).ConfigureAwait(false)).ToString(
                                    GlobalSettings.CultureInfo);
                            await lblVehicleWeaponDicePool.DoThreadSafeAsync(x =>
                            {
                                x.Text = strPool;
                                x.Visible = true;
                            }, token).ConfigureAwait(false);
                            await lblVehicleWeaponDicePool.SetToolTipAsync(objWeapon.DicePoolTooltip, token)
                                                          .ConfigureAwait(false);
                            await lblVehicleWeaponRCLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                         .ConfigureAwait(false);
                            await lblVehicleWeaponRC.DoThreadSafeAsync(x =>
                            {
                                x.Text = objWeapon.DisplayTotalRC;
                                x.Visible = true;
                            }, token).ConfigureAwait(false);
                            await lblVehicleWeaponReachLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                            .ConfigureAwait(false);
                            string strReach
                                = (await objWeapon.GetTotalReachAsync(token).ConfigureAwait(false)).ToString(
                                    GlobalSettings.CultureInfo);
                            await lblVehicleWeaponReach.DoThreadSafeAsync(x =>
                            {
                                x.Text = strReach;
                                x.Visible = true;
                            }, token).ConfigureAwait(false);
                            if (objWeapon.RangeType == "Ranged")
                            {
                                await lblVehicleWeaponAmmoLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                               .ConfigureAwait(false);
                                await lblVehicleWeaponAmmo.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = objWeapon.DisplayAmmo;
                                }, token).ConfigureAwait(false);
                                await lblVehicleWeaponModeLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                               .ConfigureAwait(false);
                                await lblVehicleWeaponMode.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = objWeapon.DisplayMode;
                                }, token).ConfigureAwait(false);
                                await cboVehicleWeaponFiringMode
                                      .DoThreadSafeAsync(x => x.SelectedValue = objWeapon.FireMode, token)
                                      .ConfigureAwait(false);
                                await tlpVehiclesWeaponRanges.DoThreadSafeAsync(x => x.Visible = true, token)
                                                             .ConfigureAwait(false);
                                await lblVehicleWeaponRangeMain
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.CurrentDisplayRange, token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponRangeAlternate
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.CurrentDisplayAlternateRange, token)
                                      .ConfigureAwait(false);
                                Dictionary<string, string> dicRanges
                                    = await objWeapon.GetRangeStringsAsync(GlobalSettings.CultureInfo, token: token)
                                                     .ConfigureAwait(false);
                                await lblVehicleWeaponRangeShortLabel
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.RangeModifier("Short"), token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponRangeMediumLabel
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.RangeModifier("Medium"), token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponRangeLongLabel
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.RangeModifier("Long"), token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponRangeExtremeLabel
                                      .DoThreadSafeAsync(x => x.Text = objWeapon.RangeModifier("Extreme"), token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponRangeShort
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["short"], token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponRangeMedium
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["medium"], token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponRangeLong
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["long"], token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponRangeExtreme
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["extreme"], token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponAlternateRangeShort
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["alternateshort"], token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponAlternateRangeMedium
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["alternatemedium"], token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponAlternateRangeLong
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["alternatelong"], token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponAlternateRangeExtreme
                                      .DoThreadSafeAsync(x => x.Text = dicRanges["alternateextreme"], token)
                                      .ConfigureAwait(false);
                                await lblVehicleWeaponReach.DoThreadSafeAsync(x => x.Visible = false, token)
                                                           .ConfigureAwait(false);
                                await lblVehicleWeaponReachLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                .ConfigureAwait(false);
                            }
                            else
                            {
                                if (objWeapon.Ammo != "0")
                                {
                                    await lblVehicleWeaponAmmoLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                   .ConfigureAwait(false);
                                    await lblVehicleWeaponAmmo.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.Text = objWeapon.DisplayAmmo;
                                    }, token).ConfigureAwait(false);
                                    await cboVehicleWeaponFiringMode.DoThreadSafeAsync(x =>
                                    {
                                        x.Visible = true;
                                        x.SelectedValue = objWeapon.FireMode;
                                    }, token).ConfigureAwait(false);
                                }
                                else
                                {
                                    await lblVehicleWeaponAmmoLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                   .ConfigureAwait(false);
                                    await lblVehicleWeaponAmmo.DoThreadSafeAsync(x => x.Visible = false, token)
                                                              .ConfigureAwait(false);
                                    await cboVehicleWeaponFiringMode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                    .ConfigureAwait(false);
                                }

                                token.ThrowIfCancellationRequested();
                                await lblVehicleWeaponModeLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                               .ConfigureAwait(false);
                                await lblVehicleWeaponMode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                                await tlpVehiclesWeaponRanges.DoThreadSafeAsync(x => x.Visible = false, token)
                                                             .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            // gpbVehiclesMatrix
                            int intDeviceRating = objWeapon.GetTotalMatrixAttribute("Device Rating");
                            await lblVehicleDevice
                                  .DoThreadSafeAsync(x => x.Text = intDeviceRating.ToString(GlobalSettings.CultureInfo),
                                                     token).ConfigureAwait(false);
                            await objWeapon.RefreshMatrixAttributeComboBoxesAsync(
                                               cboVehicleAttack, cboVehicleSleaze, cboVehicleDataProcessing,
                                               cboVehicleFirewall, token)
                                           .ConfigureAwait(false);
                            await chkVehicleActiveCommlink.DoThreadSafeAsync(x =>
                            {
                                x.Visible = objWeapon.IsCommlink;
                                x.Checked = objWeapon.IsActiveCommlink(CharacterObject);
                            }, token).ConfigureAwait(false);
                            if (CharacterObject.IsAI)
                            {
                                await chkVehicleHomeNode.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Checked = objWeapon.IsHomeNode(CharacterObject);
                                    x.Enabled = objWeapon.GetTotalMatrixAttribute("Program Limit")
                                                >= (CharacterObject.DEP.TotalValue > intDeviceRating ? 2 : 1);
                                }, token).ConfigureAwait(false);
                            }
                            else
                                await chkVehicleHomeNode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);

                            break;
                        }
                        case WeaponAccessory objAccessory:
                        {
                            await gpbVehiclesCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesVehicle.DoThreadSafeAsync(x => x.Visible = false, token)
                                                    .ConfigureAwait(false);
                            await gpbVehiclesWeapon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesMatrix.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // Buttons
                            await cmdDeleteVehicle
                                  .DoThreadSafeAsync(x => x.Enabled = !objAccessory.IncludedInWeapon, token)
                                  .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            // gpbVehiclesCommon
                            string strName = await objAccessory.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                            await lblVehicleName.DoThreadSafeAsync(x => x.Text = strName, token)
                                                .ConfigureAwait(false);
                            string strText = await LanguageManager
                                                   .GetStringAsync("String_VehicleWeaponAccessory", token: token)
                                                   .ConfigureAwait(false);
                            await lblVehicleCategory.DoThreadSafeAsync(x => x.Text = strText, token)
                                                    .ConfigureAwait(false);
                            if (objAccessory.MaxRating > 0)
                            {
                                await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                           .ConfigureAwait(false);
                                await nudVehicleRating.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Minimum = 1;
                                    x.Maximum = objAccessory.MaxRating;
                                    x.Value = objAccessory.Rating;
                                    x.Increment = 1;
                                    x.Enabled = !objAccessory.IncludedInWeapon;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                           .ConfigureAwait(false);
                                await nudVehicleRating.DoThreadSafeAsync(x => x.Visible = false, token)
                                                      .ConfigureAwait(false);
                            }

                            if (!string.IsNullOrEmpty(objAccessory.RC))
                            {
                                await lblVehicleWeaponRCLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                             .ConfigureAwait(false);
                                await lblVehicleWeaponRC.DoThreadSafeAsync(x =>
                                {
                                    x.Text = Convert
                                             .ToInt32(objAccessory.RC, GlobalSettings.InvariantCultureInfo)
                                             .ToString("+#,0;-#,0;0", GlobalSettings.CultureInfo);
                                    x.Visible = true;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await lblVehicleWeaponRCLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                             .ConfigureAwait(false);
                                await lblVehicleWeaponRC.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            }

                            if (objAccessory.Parent.RangeType == "Melee")
                            {
                                await lblVehicleWeaponReachLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                .ConfigureAwait(false);
                                await lblVehicleWeaponReach.DoThreadSafeAsync(x =>
                                {
                                    x.Text = objAccessory.Reach.ToString("+#,0;-#,0;0", GlobalSettings.CultureInfo);
                                    x.Visible = true;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await lblVehicleWeaponReachLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                .ConfigureAwait(false);
                                await lblVehicleWeaponReach.DoThreadSafeAsync(x => x.Visible = false, token)
                                                           .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await lblVehicleGearQtyLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            await nudVehicleGearQty.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            string strAvail = await objAccessory.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblVehicleAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                                 .ConfigureAwait(false);
                            string strCost = (await objAccessory.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync(
                                                 "String_NuyenSymbol", token: token).ConfigureAwait(false);
                            await lblVehicleCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                                .ConfigureAwait(false);
                            using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                          out StringBuilder sbdMount))
                            {
                                foreach (string strCurrentMount in objAccessory.Mount.SplitNoAlloc(
                                             '/', StringSplitOptions.RemoveEmptyEntries))
                                    sbdMount.Append(await LanguageManager
                                                          .GetStringAsync(
                                                              "String_Mount" + strCurrentMount, token: token)
                                                          .ConfigureAwait(false))
                                            .Append('/');
                                // Remove the trailing /
                                if (sbdMount.Length > 0)
                                    --sbdMount.Length;
                                if (!string.IsNullOrEmpty(objAccessory.ExtraMount) && objAccessory.ExtraMount != "None")
                                {
                                    bool boolHaveAddedItem = false;
                                    foreach (string strCurrentExtraMount in objAccessory.ExtraMount.SplitNoAlloc(
                                                 '/', StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        if (!boolHaveAddedItem)
                                        {
                                            sbdMount.Append(strSpace).Append('+').Append(strSpace);
                                            boolHaveAddedItem = true;
                                        }

                                        sbdMount.Append(await LanguageManager.GetStringAsync(
                                                                                 "String_Mount" + strCurrentExtraMount,
                                                                                 token: token)
                                                                             .ConfigureAwait(false))
                                                .Append('/');
                                    }

                                    token.ThrowIfCancellationRequested();
                                    // Remove the trailing /
                                    if (boolHaveAddedItem)
                                        --sbdMount.Length;
                                }

                                await lblVehicleSlotsLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                          .ConfigureAwait(false);
                                await lblVehicleSlots.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Text = sbdMount.ToString();
                                }, token).ConfigureAwait(false);
                            }

                            await cmdVehicleCyberwareChangeMount.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                .ConfigureAwait(false);
                            await chkVehicleWeaponAccessoryInstalled.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Enabled = true;
                                x.Checked = objAccessory.Equipped;
                            }, token).ConfigureAwait(false);
                            await chkVehicleIncludedInWeapon.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Checked = objAccessory.IncludedInWeapon;
                            }, token).ConfigureAwait(false);
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = !objAccessory.IncludedInWeapon && CharacterObject
                                    .GenerateBlackMarketMappings(
                                        await (await CharacterObject
                                                     .LoadDataXPathAsync(
                                                         "weapons.xml", token: token).ConfigureAwait(false))
                                              .SelectSingleNodeAndCacheExpressionAsync(
                                                  "/chummer", token: token).ConfigureAwait(false), token)
                                    .Contains(objAccessory.Parent.Category);
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objAccessory.IncludedInWeapon
                                        ? objAccessory.Parent?.DiscountCost == true
                                        : objAccessory.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            // gpbVehiclesWeapon
                            await lblVehicleWeaponModeLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                           .ConfigureAwait(false);
                            await lblVehicleWeaponMode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                      .ConfigureAwait(false);
                            await cboVehicleWeaponFiringMode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                            if (string.IsNullOrEmpty(objAccessory.Damage))
                            {
                                await lblVehicleWeaponDamageLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                 .ConfigureAwait(false);
                                await lblVehicleWeaponDamage.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                            }
                            else
                            {
                                await lblVehicleWeaponDamageLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                 .ConfigureAwait(false);
                                await lblVehicleWeaponDamage.DoThreadSafeAsync(x =>
                                {
                                    x.Text = Convert
                                             .ToInt32(objAccessory.Damage,
                                                      GlobalSettings.InvariantCultureInfo)
                                             .ToString("+#,0;-#,0;0", GlobalSettings.CultureInfo);
                                    x.Visible = true;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            if (string.IsNullOrEmpty(objAccessory.AP))
                            {
                                await lblVehicleWeaponAPLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                             .ConfigureAwait(false);
                                await lblVehicleWeaponAP.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            }
                            else
                            {
                                await lblVehicleWeaponAPLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                             .ConfigureAwait(false);
                                await lblVehicleWeaponAP.DoThreadSafeAsync(x =>
                                {
                                    x.Text = Convert
                                             .ToInt32(objAccessory.AP, GlobalSettings.InvariantCultureInfo)
                                             .ToString("+#,0;-#,0;0", GlobalSettings.CultureInfo);
                                    x.Visible = true;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            if (objAccessory.Accuracy == 0)
                            {
                                await lblVehicleWeaponAccuracyLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                   .ConfigureAwait(false);
                                await lblVehicleWeaponAccuracy.DoThreadSafeAsync(x => x.Visible = false, token)
                                                              .ConfigureAwait(false);
                            }
                            else
                            {
                                await lblVehicleWeaponAccuracyLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                   .ConfigureAwait(false);
                                await lblVehicleWeaponAccuracy.DoThreadSafeAsync(x =>
                                {
                                    x.Text
                                        = objAccessory.Accuracy.ToString("+#,0;-#,0;0", GlobalSettings.CultureInfo);
                                    x.Visible = true;
                                }, token).ConfigureAwait(false);
                            }

                            if (objAccessory.DicePool == 0)
                            {
                                await lblVehicleWeaponDicePoolLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                   .ConfigureAwait(false);
                                await lblVehicleWeaponDicePool.DoThreadSafeAsync(x => x.Visible = false, token)
                                                              .ConfigureAwait(false);
                            }
                            else
                            {
                                await lblVehicleWeaponDicePoolLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                                   .ConfigureAwait(false);
                                await lblVehicleWeaponDicePool.DoThreadSafeAsync(x =>
                                {
                                    x.Text
                                        = objAccessory.DicePool.ToString("+#,0;-#,0;0", GlobalSettings.CultureInfo);
                                    x.Visible = true;
                                }, token).ConfigureAwait(false);
                                await lblVehicleWeaponDicePool.SetToolTipAsync(string.Empty, token)
                                                              .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            if (objAccessory.TotalAmmoBonus != 0
                                || (!string.IsNullOrEmpty(objAccessory.ModifyAmmoCapacity)
                                    && objAccessory.ModifyAmmoCapacity != "0"))
                            {
                                await lblVehicleWeaponAmmoLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                               .ConfigureAwait(false);
                                await lblVehicleWeaponAmmo.DoThreadSafeAsync(x => x.Visible = true, token)
                                                          .ConfigureAwait(false);
                                using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                              out StringBuilder sbdAmmoBonus))
                                {
                                    int intAmmoBonus = objAccessory.TotalAmmoBonus;
                                    if (intAmmoBonus != 0)
                                        sbdAmmoBonus.Append(
                                            (intAmmoBonus / 100.0m).ToString(
                                                "+#,0%;-#,0%;0%", GlobalSettings.CultureInfo));
                                    if (!string.IsNullOrEmpty(objAccessory.ModifyAmmoCapacity)
                                        && objAccessory.ModifyAmmoCapacity != "0")
                                        sbdAmmoBonus.Append(objAccessory.ModifyAmmoCapacity);
                                    await lblVehicleWeaponAmmo
                                          .DoThreadSafeAsync(x => x.Text = sbdAmmoBonus.ToString(), token)
                                          .ConfigureAwait(false);
                                }
                            }
                            else
                            {
                                await lblVehicleWeaponAmmoLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                               .ConfigureAwait(false);
                                await lblVehicleWeaponAmmo.DoThreadSafeAsync(x => x.Visible = false, token)
                                                          .ConfigureAwait(false);
                            }

                            break;
                        }
                        case Cyberware objCyberware:
                        {
                            await gpbVehiclesCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesVehicle.DoThreadSafeAsync(x => x.Visible = false, token)
                                                    .ConfigureAwait(false);
                            await gpbVehiclesWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesMatrix.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            // Buttons
                            await cmdDeleteVehicle
                                  .DoThreadSafeAsync(x => x.Enabled = string.IsNullOrEmpty(objCyberware.ParentID),
                                                     token).ConfigureAwait(false);
                            // gpbVehiclesCommon
                            string strName = await objCyberware.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                            await lblVehicleName.DoThreadSafeAsync(x => x.Text = strName, token)
                                                .ConfigureAwait(false);
                            string strText = await objCyberware.DisplayCategoryAsync(GlobalSettings.Language, token)
                                                               .ConfigureAwait(false);
                            await lblVehicleCategory.DoThreadSafeAsync(x => x.Text = strText, token)
                                                    .ConfigureAwait(false);
                            if (objCyberware.MaxRating == 0)
                            {
                                await nudVehicleRating.DoThreadSafeAsync(x =>
                                {
                                    x.Maximum = 0;
                                    x.Minimum = 0;
                                    x.Value = 0;
                                    x.Visible = false;
                                }, token).ConfigureAwait(false);
                                await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                           .ConfigureAwait(false);
                            }
                            else
                            {
                                await nudVehicleRating.DoThreadSafeAsync(x =>
                                {
                                    x.Maximum = objCyberware.MaxRating;
                                    x.Minimum = objCyberware.MinRating;
                                    x.Value = objCyberware.Rating;
                                    x.Enabled = nudVehicleRating.Maximum == nudVehicleRating.Minimum
                                                && string.IsNullOrEmpty(objCyberware.ParentID);
                                    x.Visible = true;
                                }, token).ConfigureAwait(false);
                                await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                           .ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await lblVehicleGearQtyLabel.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                            await nudVehicleGearQty.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            string strAvail = await objCyberware.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblVehicleAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                                 .ConfigureAwait(false);
                            string strCost = (await objCyberware.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token).ConfigureAwait(false);
                            await lblVehicleCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                                .ConfigureAwait(false);
                            await cmdVehicleCyberwareChangeMount.DoThreadSafeAsync(x => x.Visible
                                                                    = !string.IsNullOrEmpty(objCyberware
                                                                        .PlugsIntoModularMount), token)
                                                                .ConfigureAwait(false);
                            await chkVehicleWeaponAccessoryInstalled.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                    .ConfigureAwait(false);
                            await chkVehicleIncludedInWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            if (CharacterObject.BlackMarketDiscount && string.IsNullOrEmpty(objCyberware.ParentID))
                            {
                                bool blnEnabled = CharacterObject.GenerateBlackMarketMappings(
                                                                     await (await CharacterObject
                                                                               .LoadDataXPathAsync(
                                                                                   objCyberware.SourceType
                                                                                   == Improvement.ImprovementSource
                                                                                       .Cyberware
                                                                                       ? "cyberware.xml"
                                                                                       : "bioware.xml", token: token)
                                                                               .ConfigureAwait(false))
                                                                           .SelectSingleNodeAndCacheExpressionAsync(
                                                                               "/chummer", token: token)
                                                                           .ConfigureAwait(false), token)
                                                                 .Contains(objCyberware.Category);
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objCyberware.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            // gpbVehiclesMatrix
                            int intDeviceRating = objCyberware.GetTotalMatrixAttribute("Device Rating");
                            await lblVehicleDevice
                                  .DoThreadSafeAsync(x => x.Text = intDeviceRating.ToString(GlobalSettings.CultureInfo),
                                                     token).ConfigureAwait(false);
                            await objCyberware.RefreshMatrixAttributeComboBoxesAsync(
                                                  cboVehicleAttack, cboVehicleSleaze, cboVehicleDataProcessing,
                                                  cboVehicleFirewall, token)
                                              .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            await chkVehicleActiveCommlink.DoThreadSafeAsync(x =>
                            {
                                x.Visible = objCyberware.IsCommlink;
                                x.Checked = objCyberware.IsActiveCommlink(CharacterObject);
                            }, token).ConfigureAwait(false);
                            if (CharacterObject.IsAI)
                            {
                                await chkVehicleHomeNode.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Checked = objCyberware.IsHomeNode(CharacterObject);
                                    x.Enabled = chkVehicleActiveCommlink.Visible
                                                && objCyberware.GetTotalMatrixAttribute("Program Limit")
                                                >= (CharacterObject.DEP.TotalValue > intDeviceRating ? 2 : 1);
                                }, token).ConfigureAwait(false);
                            }
                            else
                                await chkVehicleHomeNode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);

                            break;
                        }
                        case Gear objGear:
                        {
                            await gpbVehiclesCommon.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesVehicle.DoThreadSafeAsync(x => x.Visible = false, token)
                                                    .ConfigureAwait(false);
                            await gpbVehiclesWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesMatrix.DoThreadSafeAsync(x => x.Visible = true, token)
                                                   .ConfigureAwait(false);
                            // Buttons
                            await cmdDeleteVehicle.DoThreadSafeAsync(x => x.Enabled = !objGear.IncludedInParent, token)
                                                  .ConfigureAwait(false);
                            // gpbVehiclesCommon
                            string strName = await objGear.GetCurrentDisplayNameShortAsync(token).ConfigureAwait(false);
                            await lblVehicleName.DoThreadSafeAsync(x => x.Text = strName, token)
                                                .ConfigureAwait(false);
                            await lblVehicleCategory
                                  .DoThreadSafeAsync(x => x.Text = objGear.DisplayCategory(GlobalSettings.Language),
                                                     token).ConfigureAwait(false);
                            int intGearMaxRatingValue = objGear.MaxRatingValue;
                            if (intGearMaxRatingValue > 0 && intGearMaxRatingValue != int.MaxValue)
                            {
                                await lblVehicleRatingLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                           .ConfigureAwait(false);
                                await nudVehicleRating.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Enabled = string.IsNullOrEmpty(objGear.ParentID);
                                    x.Maximum = intGearMaxRatingValue;
                                    x.Value = objGear.Rating;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await nudVehicleRating.DoThreadSafeAsync(x =>
                                {
                                    x.Minimum = 0;
                                    x.Maximum = 0;
                                    x.Visible = false;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await nudVehicleGearQty.DoThreadSafeAsync(x => x.Enabled = !objGear.IncludedInParent, token)
                                                   .ConfigureAwait(false);
                            if (objGear.Name.StartsWith("Nuyen", StringComparison.Ordinal))
                            {
                                int intDecimalPlaces = CharacterObjectSettings.MaxNuyenDecimals;
                                if (intDecimalPlaces <= 0)
                                {
                                    await nudVehicleGearQty.DoThreadSafeAsync(x =>
                                    {
                                        x.DecimalPlaces = 0;
                                        x.Minimum = 1.0m;
                                    }, token).ConfigureAwait(false);
                                }
                                else
                                {
                                    await nudVehicleGearQty
                                          .DoThreadSafeAsync(x => x.DecimalPlaces = intDecimalPlaces, token)
                                          .ConfigureAwait(false);
                                    decimal decMinimum = 1.0m;
                                    // Need a for loop instead of a power system to maintain exact precision
                                    for (int i = 0; i < intDecimalPlaces; ++i)
                                        decMinimum /= 10.0m;
                                    await nudVehicleGearQty.DoThreadSafeAsync(x => x.Minimum = decMinimum, token)
                                                           .ConfigureAwait(false);
                                }
                            }
                            else if (objGear.Category == "Currency")
                            {
                                await nudVehicleGearQty.DoThreadSafeAsync(x =>
                                {
                                    x.DecimalPlaces = 2;
                                    x.Minimum = 0.01m;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await nudVehicleGearQty.DoThreadSafeAsync(x =>
                                {
                                    x.DecimalPlaces = 0;
                                    x.Minimum = 1.0m;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            await nudVehicleGearQty.DoThreadSafeAsync(x =>
                            {
                                x.Value = objGear.Quantity;
                                x.Increment = objGear.CostFor;
                                x.Visible = true;
                            }, token).ConfigureAwait(false);
                            await lblVehicleGearQtyLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                            string strAvail = await objGear.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                            await lblVehicleAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                                 .ConfigureAwait(false);
                            string strCost = (await objGear.GetTotalCostAsync(token).ConfigureAwait(false)).ToString(
                                                 CharacterObjectSettings.NuyenFormat,
                                                 GlobalSettings.CultureInfo)
                                             + await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token)
                                                                    .ConfigureAwait(false);
                            await lblVehicleCost.DoThreadSafeAsync(x => x.Text = strCost, token)
                                                .ConfigureAwait(false);
                            await lblVehicleSlotsLabel.DoThreadSafeAsync(x => x.Visible = true, token)
                                                      .ConfigureAwait(false);
                            string strText2 = objGear.CalculatedCapacity + strSpace + '('
                                              + objGear.CapacityRemaining.ToString(
                                                  "#,0.##", GlobalSettings.CultureInfo) +
                                              strSpace + await LanguageManager
                                                               .GetStringAsync("String_Remaining", token: token)
                                                               .ConfigureAwait(false)
                                              + ')';
                            await lblVehicleSlots.DoThreadSafeAsync(x =>
                            {
                                x.Visible = true;
                                x.Text = strText2;
                            }, token).ConfigureAwait(false);
                            await cmdVehicleCyberwareChangeMount.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                .ConfigureAwait(false);
                            await chkVehicleWeaponAccessoryInstalled.DoThreadSafeAsync(x => x.Visible = false, token)
                                                                    .ConfigureAwait(false);
                            await chkVehicleIncludedInWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                            .ConfigureAwait(false);
                            token.ThrowIfCancellationRequested();
                            if (CharacterObject.BlackMarketDiscount)
                            {
                                bool blnEnabled = !objGear.IncludedInParent && CharacterObject
                                                                               .GenerateBlackMarketMappings(
                                                                                   await (await CharacterObject
                                                                                           .LoadDataXPathAsync(
                                                                                               "gear.xml", token: token)
                                                                                           .ConfigureAwait(false))
                                                                                       .SelectSingleNodeAndCacheExpressionAsync(
                                                                                           "/chummer", token: token)
                                                                                       .ConfigureAwait(false), token)
                                                                               .Contains(objGear.Category);
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = blnEnabled;
                                    x.Checked = objGear.IncludedInParent
                                        ? (objGear.Parent as ICanBlackMarketDiscount)?.DiscountCost == true
                                        : objGear.DiscountCost;
                                }, token).ConfigureAwait(false);
                            }
                            else
                            {
                                await chkVehicleBlackMarketDiscount.DoThreadSafeAsync(x =>
                                {
                                    x.Enabled = false;
                                    x.Checked = false;
                                }, token).ConfigureAwait(false);
                            }

                            token.ThrowIfCancellationRequested();
                            // gpbVehiclesMatrix
                            int intDeviceRating = objGear.GetTotalMatrixAttribute("Device Rating");
                            await lblVehicleDevice
                                  .DoThreadSafeAsync(x => x.Text = intDeviceRating.ToString(GlobalSettings.CultureInfo),
                                                     token).ConfigureAwait(false);
                            await objGear.RefreshMatrixAttributeComboBoxesAsync(
                                             cboVehicleAttack, cboVehicleSleaze, cboVehicleDataProcessing,
                                             cboVehicleFirewall, token)
                                         .ConfigureAwait(false);

                            await chkVehicleActiveCommlink.DoThreadSafeAsync(x =>
                            {
                                x.Visible = objGear.IsCommlink;
                                x.Checked = objGear.IsActiveCommlink(CharacterObject);
                            }, token).ConfigureAwait(false);
                            if (CharacterObject.IsAI)
                            {
                                await chkVehicleHomeNode.DoThreadSafeAsync(x =>
                                {
                                    x.Visible = true;
                                    x.Checked = objGear.IsHomeNode(CharacterObject);
                                    x.Enabled = objGear.IsCommlink
                                                && objGear.GetTotalMatrixAttribute("Program Limit")
                                                >= (CharacterObject.DEP.TotalValue > intDeviceRating ? 2 : 1);
                                }, token).ConfigureAwait(false);
                            }
                            else
                                await chkVehicleHomeNode.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);

                            break;
                        }
                        default:
                            await gpbVehiclesCommon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesVehicle.DoThreadSafeAsync(x => x.Visible = false, token)
                                                    .ConfigureAwait(false);
                            await gpbVehiclesWeapon.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            await gpbVehiclesMatrix.DoThreadSafeAsync(x => x.Visible = false, token)
                                                   .ConfigureAwait(false);
                            // Buttons
                            await cmdDeleteVehicle.DoThreadSafeAsync(x => x.Enabled = false, token)
                                                  .ConfigureAwait(false);
                            break;
                    }
                }
                finally
                {
                    await flpVehicles.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken).ConfigureAwait(false);
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        /// <summary>
        /// Refresh the currently-selected Drug.
        /// </summary>
        private async Task RefreshSelectedDrug(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                await flpDrugs.DoThreadSafeAsync(x => x.SuspendLayout(), token).ConfigureAwait(false);
                try
                {
                    TreeNode objSelectedNode = await treCustomDrugs.DoThreadSafeFuncAsync(x => x.SelectedNode, token)
                                                                   .ConfigureAwait(false);
                    object objSelectedNodeTag = objSelectedNode?.Tag;
                    if (objSelectedNodeTag is Drug objDrug && objSelectedNode.Level != 0)
                    {
                        await flpDrugs.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await btnDeleteCustomDrug.DoThreadSafeAsync(x => x.Enabled = true, token).ConfigureAwait(false);
                        string strName = await objDrug.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                        await lblDrugName.DoThreadSafeAsync(x => x.Text = strName, token).ConfigureAwait(false);
                        string strAvail = await objDrug.GetDisplayTotalAvailAsync(token).ConfigureAwait(false);
                        await lblDrugAvail.DoThreadSafeAsync(x => x.Text = strAvail, token)
                                          .ConfigureAwait(false);
                        string strGradeName
                            = await objDrug.Grade.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                        await lblDrugGrade.DoThreadSafeAsync(x => x.Text = strGradeName, token)
                                          .ConfigureAwait(false);
                        string strNuyen = await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token).ConfigureAwait(false);
                        await lblDrugCost.DoThreadSafeAsync(x => x.Text
                                                                = objDrug.Cost.ToString(
                                                                      CharacterObjectSettings.NuyenFormat,
                                                                      GlobalSettings.CultureInfo)
                                                                  + strNuyen,
                                                            token).ConfigureAwait(false);
                        await nudDrugQty.DoThreadSafeAsync(x =>
                        {
                            x.Value = objDrug.Quantity;
                            x.Visible = true;
                            x.Enabled = true;
                        }, token).ConfigureAwait(false);
                        await lblDrugCategory.DoThreadSafeAsync(x => x.Text = objDrug.Category, token)
                                             .ConfigureAwait(false);
                        await lblDrugAddictionRating
                              .DoThreadSafeAsync(
                                  x => x.Text = objDrug.AddictionRating.ToString(GlobalSettings.CultureInfo), token)
                              .ConfigureAwait(false);
                        await lblDrugAddictionThreshold
                              .DoThreadSafeAsync(
                                  x => x.Text = objDrug.AddictionThreshold.ToString(GlobalSettings.CultureInfo), token)
                              .ConfigureAwait(false);
                        string strText = await objDrug.GetEffectDescriptionAsync(token).ConfigureAwait(false);
                        await lblDrugEffect.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                        using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                      out StringBuilder sbdComponents))
                        {
                            foreach (DrugComponent objComponent in objDrug.Components)
                            {
                                sbdComponents.AppendLine(
                                    await objComponent.GetCurrentDisplayNameAsync(token).ConfigureAwait(false));
                            }

                            await lblDrugComponents.DoThreadSafeAsync(x => x.Text = sbdComponents.ToString(), token)
                                                   .ConfigureAwait(false);
                        }
                    }
                    else
                    {
                        await flpDrugs.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await btnDeleteCustomDrug
                              .DoThreadSafeAsync(x => x.Enabled = objSelectedNodeTag is ICanRemove, token)
                              .ConfigureAwait(false);
                    }
                }
                finally
                {
                    await flpDrugs.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken).ConfigureAwait(false);
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        /// <summary>
        /// Refresh the information for the currently selected Spell
        /// </summary>
        private async Task RefreshSelectedSpell(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                await gpbMagicianSpell.DoThreadSafeAsync(x => x.SuspendLayout(), token).ConfigureAwait(false);
                try
                {
                    TreeNode objSelectedNode = await treSpells.DoThreadSafeFuncAsync(x => x.SelectedNode, token)
                                                              .ConfigureAwait(false);
                    object objSelectedNodeTag = objSelectedNode?.Tag;
                    if (objSelectedNodeTag is Spell objSpell && objSelectedNode.Level > 0)
                    {
                        await gpbMagicianSpell.DoThreadSafeAsync(x => x.Visible = true, token).ConfigureAwait(false);
                        await cmdDeleteSpell.DoThreadSafeAsync(x => x.Enabled = objSpell.Grade == 0, token)
                                            .ConfigureAwait(false);
                        string strText = await objSpell.DisplayDescriptorsAsync(GlobalSettings.Language, token)
                                                       .ConfigureAwait(false);
                        if (string.IsNullOrEmpty(strText))
                            strText = await LanguageManager.GetStringAsync("String_None", token: token)
                                                           .ConfigureAwait(false);
                        await lblSpellDescriptors.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                        string strText2 = await objSpell.DisplayCategoryAsync(GlobalSettings.Language, token)
                                                        .ConfigureAwait(false);
                        await lblSpellCategory.DoThreadSafeAsync(x => x.Text = strText2, token).ConfigureAwait(false);
                        string strText3 = await objSpell.DisplayTypeAsync(GlobalSettings.Language, token)
                                                        .ConfigureAwait(false);
                        await lblSpellType.DoThreadSafeAsync(x => x.Text = strText3, token).ConfigureAwait(false);
                        string strText4 = await objSpell.DisplayRangeAsync(GlobalSettings.Language, token)
                                                        .ConfigureAwait(false);
                        await lblSpellRange.DoThreadSafeAsync(x => x.Text = strText4, token).ConfigureAwait(false);
                        string strText5 = await objSpell.DisplayDamageAsync(GlobalSettings.Language, token)
                                                        .ConfigureAwait(false);
                        await lblSpellDamage.DoThreadSafeAsync(x => x.Text = strText5, token).ConfigureAwait(false);
                        string strText6 = await objSpell.DisplayDurationAsync(GlobalSettings.Language, token)
                                                        .ConfigureAwait(false);
                        await lblSpellDuration.DoThreadSafeAsync(x => x.Text = strText6, token).ConfigureAwait(false);
                        string strText7 = await objSpell.DisplayDvAsync(GlobalSettings.Language, token)
                                                        .ConfigureAwait(false);
                        await lblSpellDV.DoThreadSafeAsync(x => x.Text = strText7, token).ConfigureAwait(false);
                        await lblSpellDV.SetToolTipAsync(objSpell.DvTooltip, token).ConfigureAwait(false);
                        await objSpell.SetSourceDetailAsync(lblSpellSource, token).ConfigureAwait(false);
                        // Determine the size of the Spellcasting Dice Pool.
                        await lblSpellDicePool
                              .DoThreadSafeAsync(x => x.Text = objSpell.DicePool.ToString(GlobalSettings.CultureInfo),
                                                 token).ConfigureAwait(false);
                        await lblSpellDicePool.SetToolTipAsync(objSpell.DicePoolTooltip, token).ConfigureAwait(false);
                    }
                    else
                    {
                        await gpbMagicianSpell.DoThreadSafeAsync(x => x.Visible = false, token).ConfigureAwait(false);
                        await cmdDeleteSpell.DoThreadSafeAsync(x => x.Enabled = objSelectedNodeTag is ICanRemove, token)
                                            .ConfigureAwait(false);
                    }
                }
                finally
                {
                    await gpbMagicianSpell.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken).ConfigureAwait(false);
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        /// <summary>
        /// Refresh the information for the currently selected Complex Form.
        /// </summary>
        private async Task RefreshSelectedComplexForm(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            IsRefreshing = true;
            try
            {
                await gpbTechnomancerComplexForm.DoThreadSafeAsync(x => x.SuspendLayout(), token).ConfigureAwait(false);
                try
                {
                    TreeNode objSelectedNode = await treComplexForms.DoThreadSafeFuncAsync(x => x.SelectedNode, token)
                                                                    .ConfigureAwait(false);
                    object objSelectedNodeTag = objSelectedNode?.Tag;
                    if (objSelectedNodeTag is ComplexForm objComplexForm && objSelectedNode.Level > 0)
                    {
                        await gpbTechnomancerComplexForm.DoThreadSafeAsync(x => x.Visible = true, token)
                                                        .ConfigureAwait(false);
                        await cmdDeleteComplexForm.DoThreadSafeAsync(x => x.Enabled = objComplexForm.Grade == 0, token)
                                                  .ConfigureAwait(false);
                        string strText = await objComplexForm.DisplayTargetAsync(GlobalSettings.Language, token)
                                                             .ConfigureAwait(false);
                        await lblTarget.DoThreadSafeAsync(x => x.Text = strText, token).ConfigureAwait(false);
                        string strText2 = await objComplexForm.DisplayDurationAsync(GlobalSettings.Language, token)
                                                              .ConfigureAwait(false);
                        await lblDuration.DoThreadSafeAsync(x => x.Text = strText2, token).ConfigureAwait(false);
                        string strText3 = await objComplexForm.DisplayFvAsync(GlobalSettings.Language, token)
                                                              .ConfigureAwait(false);
                        await lblFV.DoThreadSafeAsync(x => x.Text = strText3, token).ConfigureAwait(false);
                        await lblFV.SetToolTipAsync(objComplexForm.FvTooltip, token).ConfigureAwait(false);
                        await objComplexForm.SetSourceDetailAsync(lblComplexFormSource, token).ConfigureAwait(false);
                        // Determine the size of the Threading Dice Pool.
                        await lblComplexFormDicePool
                              .DoThreadSafeAsync(
                                  x => x.Text = objComplexForm.DicePool.ToString(GlobalSettings.CultureInfo), token)
                              .ConfigureAwait(false);
                        await lblComplexFormDicePool.SetToolTipAsync(objComplexForm.DicePoolTooltip, token)
                                                    .ConfigureAwait(false);
                    }
                    else
                    {
                        await gpbTechnomancerComplexForm.DoThreadSafeAsync(x => x.Visible = false, token)
                                                        .ConfigureAwait(false);
                        await cmdDeleteComplexForm
                              .DoThreadSafeAsync(x => x.Enabled = objSelectedNodeTag is ICanRemove, token)
                              .ConfigureAwait(false);
                    }
                }
                finally
                {
                    await gpbTechnomancerComplexForm.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken)
                                                    .ConfigureAwait(false);
                }
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        /// <summary>
        /// Add or remove the Adapsin Cyberware Grade categories.
        /// </summary>
        public async Task PopulateCyberwareGradeList(bool blnBioware = false,
                                                     ICollection<string> setDisallowedGrades = null,
                                                     string strForceGrade = "", CancellationToken token = default)
        {
            if (setDisallowedGrades == null)
                setDisallowedGrades = Array.Empty<string>();
            List<Grade> objGradeList = await CharacterObject
                                             .GetGradesListAsync(
                                                 blnBioware
                                                     ? Improvement.ImprovementSource.Bioware
                                                     : Improvement.ImprovementSource.Cyberware, token: token)
                                             .ConfigureAwait(false);
            using (new FetchSafelyFromPool<List<ListItem>>(Utils.ListItemListPool,
                                                           out List<ListItem> lstCyberwareGrades))
            {
                foreach (Grade objWareGrade in objGradeList)
                {
                    if (objWareGrade.Name == "None" && (string.IsNullOrEmpty(strForceGrade) || strForceGrade != "None"))
                        continue;
                    if (setDisallowedGrades.Contains(objWareGrade.Name))
                        continue;
                    if (blnBioware)
                    {
                        if (objWareGrade.Adapsin)
                            continue;

                        if (objWareGrade.Name.ContainsAny((await ImprovementManager
                                                                 .GetCachedImprovementListForValueOfAsync(
                                                                     CharacterObject,
                                                                     Improvement.ImprovementType
                                                                         .DisableBiowareGrade, token: token)
                                                                 .ConfigureAwait(false)).Select(x => x.ImprovedName)))
                            continue;
                    }
                    else
                    {
                        if (CharacterObject.AdapsinEnabled)
                        {
                            if (!objWareGrade.Adapsin
                                && objWareGrade.Name.ContainsAny(
                                    objGradeList.Where(x => x.Adapsin).Select(x => x.Name)))
                            {
                                continue;
                            }
                        }
                        else if (objWareGrade.Adapsin)
                            continue;

                        if (objWareGrade.Name.ContainsAny((await ImprovementManager
                                                                 .GetCachedImprovementListForValueOfAsync(
                                                                     CharacterObject,
                                                                     Improvement.ImprovementType
                                                                         .DisableCyberwareGrade, token: token)
                                                                 .ConfigureAwait(false)).Select(x => x.ImprovedName)))
                            continue;
                    }

                    if (CharacterObject.BurnoutEnabled)
                    {
                        if (!objWareGrade.Burnout
                            && objWareGrade.Name.ContainsAny(objGradeList.Where(x => x.Burnout).Select(x => x.Name)))
                        {
                            continue;
                        }
                    }
                    else if (objWareGrade.Burnout)
                        continue;

                    if (objWareGrade.Name.ContainsAny(CharacterObjectSettings.BannedWareGrades)
                        && !CharacterObject.IgnoreRules)
                        continue;

                    if (!await (await objWareGrade.GetNodeXPathAsync(token).ConfigureAwait(false)).RequirementsMetAsync(
                            CharacterObject, token: token).ConfigureAwait(false))
                    {
                        continue;
                    }

                    lstCyberwareGrades.Add(new ListItem(objWareGrade.Name,
                                                        await objWareGrade.GetCurrentDisplayNameAsync(token)
                                                                          .ConfigureAwait(false)));
                }

                await cboCyberwareGrade.PopulateWithListItemsAsync(lstCyberwareGrades, token).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Check the character and determine if it has broken any of the rules.
        /// </summary>
        public async ValueTask<bool> CheckCharacterValidity(bool blnUseArgBuildPoints = false, int intBuildPoints = 0,
                                                            CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            if (CharacterObject.IgnoreRules)
                return true;

            bool blnValid = true;
            using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                          out StringBuilder sbdMessage))
            {
                sbdMessage.Append(await LanguageManager.GetStringAsync("Message_InvalidBeginning", token: token)
                                                       .ConfigureAwait(false));
                CursorWait objCursorWait = await CursorWait.NewAsync(this, token: token).ConfigureAwait(false);
                try
                {
                    // Check if the character has more than 1 Martial Art, not counting qualities.
                    int intMartialArts = await (await CharacterObject.GetMartialArtsAsync(token).ConfigureAwait(false))
                                               .CountAsync(objArt => !objArt.IsQuality, token).ConfigureAwait(false);
                    if (intMartialArts > CharacterObjectSettings.MaximumMartialArts)
                    {
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t')
                                  .AppendFormat(GlobalSettings.CultureInfo,
                                                await LanguageManager
                                                      .GetStringAsync("Message_InvalidPointExcess", token: token)
                                                      .ConfigureAwait(false),
                                                intMartialArts - CharacterObjectSettings.MaximumMartialArts)
                                  .Append(await LanguageManager.GetStringAsync("String_Space", token: token)
                                                               .ConfigureAwait(false))
                                  .Append(await LanguageManager.GetStringAsync("String_MartialArtsCount", token: token)
                                                               .ConfigureAwait(false));
                    }

                    // Check if the character has more than 5 Techniques in a Martial Art
                    if (await (await CharacterObject.GetMartialArtsAsync(token).ConfigureAwait(false))
                              .AnyAsync(token).ConfigureAwait(false))
                    {
                        int intTechniques
                            = await (await CharacterObject.GetMartialArtsAsync(token).ConfigureAwait(false)).SumAsync(
                                x => x.Techniques.GetCountAsync(token).AsTask(), token).ConfigureAwait(false);
                        if (intTechniques > CharacterObjectSettings.MaximumMartialTechniques)
                        {
                            blnValid = false;
                            sbdMessage.AppendLine().Append('\t')
                                      .AppendFormat(GlobalSettings.CultureInfo,
                                                    await LanguageManager
                                                          .GetStringAsync("Message_InvalidPointExcess", token: token)
                                                          .ConfigureAwait(false),
                                                    intTechniques - CharacterObjectSettings.MaximumMartialTechniques)
                                      .Append(await LanguageManager.GetStringAsync("String_Space", token: token)
                                                                   .ConfigureAwait(false))
                                      .Append(await LanguageManager
                                                    .GetStringAsync("String_TechniquesCount", token: token)
                                                    .ConfigureAwait(false));
                        }
                    }

                    // if positive points > 25
                    if (CharacterObject.PositiveQualityLimitKarma > CharacterObjectSettings.QualityKarmaLimit
                        && !CharacterObjectSettings.ExceedPositiveQualities)
                    {
                        sbdMessage.AppendLine().Append('\t').AppendFormat(
                            GlobalSettings.CultureInfo,
                            await LanguageManager.GetStringAsync("Message_PositiveQualityLimit", token: token)
                                                 .ConfigureAwait(false),
                            CharacterObjectSettings.QualityKarmaLimit);
                        blnValid = false;
                    }

                    // if negative points > 25
                    if (CharacterObject.NegativeQualityLimitKarma > CharacterObjectSettings.QualityKarmaLimit
                        && !CharacterObjectSettings.ExceedNegativeQualities)
                    {
                        sbdMessage.AppendLine().Append('\t').AppendFormat(
                            GlobalSettings.CultureInfo,
                            await LanguageManager.GetStringAsync("Message_NegativeQualityLimit", token: token)
                                                 .ConfigureAwait(false),
                            CharacterObjectSettings.QualityKarmaLimit);
                        blnValid = false;
                    }

                    if (await CharacterObject.GetFriendsInHighPlacesAsync(token).ConfigureAwait(false))
                    {
                        ThreadSafeObservableCollection<Contact> lstContacts
                            = await CharacterObject.GetContactsAsync(token).ConfigureAwait(false);
                        // If we have Friends in High Places, then we need to account for any mixture of Friends in High Places plus contact karma discounts (e.g. from Massive Network)
                        if (await lstContacts.AnyAsync(x => x.Connection < 8 && x.ContactPoints > 7, token)
                                             .ConfigureAwait(false)
                            // With Friends in High Places, we can only have "too high contacts" if we overspend our Friends in High Places karma on eligible contacts
                            || await lstContacts
                                     .SumAsync(x => x.Connection >= 8 && x.ContactPoints > 7,
                                               x => x.ContactPoints, token).ConfigureAwait(false)
                            > 4 * await (await CharacterObject.GetAttributeAsync("CHA", token: token)
                                                              .ConfigureAwait(false)).GetValueAsync(token)
                                .ConfigureAwait(false))
                        {
                            blnValid = false;
                            sbdMessage.AppendLine().Append('\t')
                                      .Append(await LanguageManager.GetStringAsync("Message_HighContact", token: token)
                                                                   .ConfigureAwait(false));
                        }
                    }
                    else if (await (await CharacterObject.GetContactsAsync(token).ConfigureAwait(false))
                                   .AnyAsync(x => x.ContactPoints > 7, token).ConfigureAwait(false))
                    {
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t')
                                  .Append(await LanguageManager.GetStringAsync("Message_HighContact", token: token)
                                                               .ConfigureAwait(false));
                    }

                    // Check if the character has gone over the Build Point total.
                    if (!blnUseArgBuildPoints)
                        intBuildPoints = await CalculateBP(false, token).ConfigureAwait(false);
                    int intStagedPurchaseQualityPoints
                        = await (await CharacterObject.GetQualitiesAsync(token).ConfigureAwait(false))
                                .SumAsync(objQuality =>
                                              objQuality.StagedPurchase
                                              && objQuality.Type
                                              == QualityType.Positive
                                              && objQuality.ContributeToBP,
                                          x => x.BP, token).ConfigureAwait(false);
                    if (intBuildPoints + intStagedPurchaseQualityPoints < 0 && !_blnFreestyle)
                    {
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t')
                                  .AppendFormat(GlobalSettings.CultureInfo,
                                                await LanguageManager
                                                      .GetStringAsync("Message_InvalidPointExcess", token: token)
                                                      .ConfigureAwait(false),
                                                -(intBuildPoints + intStagedPurchaseQualityPoints))
                                  .Append(await LanguageManager.GetStringAsync("String_Space", token: token)
                                                               .ConfigureAwait(false))
                                  .Append(await LanguageManager.GetStringAsync("String_Karma", token: token)
                                                               .ConfigureAwait(false));
                    }

                    // if character has more than permitted Metagenic qualities
                    if (CharacterObject.MetagenicLimit > 0)
                    {
                        if (-CharacterObject.MetagenicNegativeQualityKarma > CharacterObject.MetagenicLimit)
                        {
                            sbdMessage.AppendLine().Append('\t').AppendFormat(
                                GlobalSettings.CultureInfo,
                                await LanguageManager
                                      .GetStringAsync("Message_OverNegativeMetagenicQualities", token: token)
                                      .ConfigureAwait(false),
                                -CharacterObject.MetagenicNegativeQualityKarma, CharacterObject.MetagenicLimit);
                            blnValid = false;
                        }

                        if (CharacterObject.MetagenicPositiveQualityKarma > CharacterObject.MetagenicLimit)
                        {
                            sbdMessage.AppendLine().Append('\t').AppendFormat(
                                GlobalSettings.CultureInfo,
                                await LanguageManager
                                      .GetStringAsync("Message_OverPositiveMetagenicQualities", token: token)
                                      .ConfigureAwait(false),
                                CharacterObject.MetagenicPositiveQualityKarma, CharacterObject.MetagenicLimit);
                            blnValid = false;
                        }

                        if (-CharacterObject.MetagenicNegativeQualityKarma
                            != CharacterObject.MetagenicPositiveQualityKarma &&
                            -CharacterObject.MetagenicNegativeQualityKarma
                            != CharacterObject.MetagenicPositiveQualityKarma - 1)
                        {
                            sbdMessage.AppendLine().Append('\t').AppendFormat(
                                GlobalSettings.CultureInfo,
                                await LanguageManager
                                      .GetStringAsync("Message_MetagenicQualitiesUnbalanced", token: token)
                                      .ConfigureAwait(false),
                                -CharacterObject.MetagenicNegativeQualityKarma,
                                CharacterObject.MetagenicPositiveQualityKarma - 1,
                                CharacterObject.MetagenicPositiveQualityKarma);
                            blnValid = false;
                        }
                    }

                    AttributeSection objAttributeSection
                        = await CharacterObject.GetAttributeSectionAsync(token).ConfigureAwait(false);
                    ThreadSafeObservableCollection<CharacterAttrib> lstAttributes
                        = await objAttributeSection.GetAttributeListAsync(token).ConfigureAwait(false);
                    // Check if the character has more attributes at their metatype max than allowed
                    if (CharacterObjectSettings.MaxNumberMaxAttributesCreate
                        < await lstAttributes.GetCountAsync(token)
                                             .ConfigureAwait(false))
                    {
                        int intCountAttributesAtMax
                            = await lstAttributes.CountAsync(
                                                     async x => x.MetatypeCategory
                                                                == CharacterAttrib.AttributeCategory.Standard
                                                                && await x.GetAtMetatypeMaximumAsync(token)
                                                                          .ConfigureAwait(false), token)
                                                 .ConfigureAwait(false);
                        if (intCountAttributesAtMax > CharacterObjectSettings.MaxNumberMaxAttributesCreate)
                        {
                            blnValid = false;
                            sbdMessage.AppendLine().Append('\t').AppendFormat(GlobalSettings.CultureInfo,
                                                                              await LanguageManager.GetStringAsync(
                                                                                  "Message_TooManyAttributesAtMax",
                                                                                  token: token).ConfigureAwait(false),
                                                                              intCountAttributesAtMax,
                                                                              CharacterObjectSettings
                                                                                  .MaxNumberMaxAttributesCreate);
                        }
                    }

                    int i = CharacterObject.TotalAttributes
                            - await CalculateAttributePriorityPoints(lstAttributes, token: token).ConfigureAwait(false);
                    // Check if the character has gone over on Primary Attributes
                    if (i < 0)
                    {
                        //TODO: ATTACH TO ATTRIBUTE SECTION
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t').AppendFormat(GlobalSettings.CultureInfo,
                                                                          await LanguageManager.GetStringAsync(
                                                                              "Message_InvalidAttributeExcess",
                                                                              token: token).ConfigureAwait(false), -i);
                    }

                    ThreadSafeObservableCollection<CharacterAttrib> lstSpecialAttributes
                        = await objAttributeSection.GetSpecialAttributeListAsync(token).ConfigureAwait(false);
                    i = CharacterObject.TotalSpecial
                        - await CalculateAttributePriorityPoints(lstSpecialAttributes, token: token)
                            .ConfigureAwait(false);
                    // Check if the character has gone over on Special Attributes
                    if (i < 0)
                    {
                        //TODO: ATTACH TO ATTRIBUTE SECTION
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t').AppendFormat(GlobalSettings.CultureInfo,
                                                                          await LanguageManager.GetStringAsync(
                                                                              "Message_InvalidSpecialExcess",
                                                                              token: token).ConfigureAwait(false), -i);
                    }

                    // Check if the character has gone over on Skill Groups
                    SkillsSection objSkillsSection
                        = await CharacterObject.GetSkillsSectionAsync(token).ConfigureAwait(false);
                    int intSkillGroupPoints = await objSkillsSection.GetSkillGroupPointsAsync(token)
                                                                    .ConfigureAwait(false);
                    if (intSkillGroupPoints < 0)
                    {
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t').AppendFormat(GlobalSettings.CultureInfo,
                                                                          await LanguageManager.GetStringAsync(
                                                                              "Message_InvalidSkillGroupExcess",
                                                                              token: token).ConfigureAwait(false),
                                                                          -intSkillGroupPoints);
                    }

                    // Check if the character has gone over on Active Skills
                    int intSkillPoints = await objSkillsSection.GetSkillPointsAsync(token)
                                                               .ConfigureAwait(false);
                    if (intSkillPoints < 0)
                    {
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t').AppendFormat(GlobalSettings.CultureInfo,
                                                                          await LanguageManager.GetStringAsync(
                                                                              "Message_InvalidActiveSkillExcess",
                                                                              token: token).ConfigureAwait(false),
                                                                          -intSkillPoints);
                    }

                    // Check if the character has gone over on Knowledge Skills
                    int intKnoSkillPoints = await objSkillsSection
                                                  .GetKnowledgeSkillPointsRemainAsync(token)
                                                  .ConfigureAwait(false);
                    if (intKnoSkillPoints < 0)
                    {
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t').AppendFormat(GlobalSettings.CultureInfo,
                                                                          await LanguageManager.GetStringAsync(
                                                                              "Message_InvalidKnowledgeSkillExcess",
                                                                              token: token).ConfigureAwait(false),
                                                                          -intKnoSkillPoints);
                    }

                    ThreadSafeBindingList<Skill> lstSkills
                        = await objSkillsSection.GetSkillsAsync(token).ConfigureAwait(false);
                    if (await lstSkills
                              .AnyAsync(
                                  async s => await s.Specializations.GetCountAsync(token)
                                                    .ConfigureAwait(false) > 1, token)
                              .ConfigureAwait(false))
                    {
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t').Append(await LanguageManager.GetStringAsync(
                                                                        "Message_InvalidActiveSkillExcessSpecializations",
                                                                        token: token).ConfigureAwait(false));
                        await lstSkills.ForEachAsync(async objSkill =>
                        {
                            ThreadSafeObservableCollection<SkillSpecialization> lstSpecs
                                = await objSkill.GetSpecializationsAsync(token).ConfigureAwait(false);
                            if (await lstSpecs.GetCountAsync(token).ConfigureAwait(false) < 1)
                                return;
                            (await sbdMessage.AppendLine()
                                             .Append(await objSkill.GetCurrentDisplayNameAsync(token)
                                                                   .ConfigureAwait(false))
                                             .Append(await LanguageManager.GetStringAsync("String_Space", token: token)
                                                                          .ConfigureAwait(false))
                                             .Append('(')
                                             .AppendJoinAsync(
                                                 ',' + await LanguageManager.GetStringAsync(
                                                     "String_Space", token: token).ConfigureAwait(false),
                                                 lstSpecs.Select(
                                                     x => x.GetCurrentDisplayNameAsync(token).AsTask()), token)
                                             .ConfigureAwait(false))
                                .Append(')');
                        }, token).ConfigureAwait(false);
                    }

                    // Check if the character has gone over the Nuyen limit.
                    decimal decNuyen = await CalculateNuyen(token).ConfigureAwait(false);
                    if (decNuyen < 0)
                    {
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t')
                                  .AppendFormat(GlobalSettings.CultureInfo,
                                                await LanguageManager
                                                      .GetStringAsync("Message_InvalidNuyenExcess", token: token)
                                                      .ConfigureAwait(false),
                                                (-decNuyen).ToString(CharacterObjectSettings.NuyenFormat,
                                                                     GlobalSettings.CultureInfo))
                                  .Append(await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token)
                                                               .ConfigureAwait(false));
                    }

                    decimal decStolenNuyen = await CharacterObject.GetStolenNuyenAsync(token).ConfigureAwait(false);
                    if (decStolenNuyen < 0)
                    {
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t').AppendFormat(GlobalSettings.CultureInfo,
                                                                          await LanguageManager.GetStringAsync(
                                                                              "Message_InvalidStolenNuyenExcess",
                                                                              token: token).ConfigureAwait(false),
                                                                          (-decStolenNuyen).ToString(
                                                                              CharacterObjectSettings.NuyenFormat,
                                                                              GlobalSettings.CultureInfo))
                                  .Append(await LanguageManager.GetStringAsync("String_NuyenSymbol", token: token)
                                                               .ConfigureAwait(false));
                    }

                    // Check if the character's Essence is above 0.
                    if (await (await CharacterObject.GetAttributeAsync("ESS", token: token).ConfigureAwait(false))
                              .GetMetatypeMaximumAsync(token).ConfigureAwait(false) > 0)
                    {
                        decimal decEss = await CharacterObject.EssenceAsync(token: token).ConfigureAwait(false);
                        decimal decExcessEss = 0.0m;
                        // Need to split things up this way because without internal rounding, Essence can be as small as the player wants as long as it is positive
                        // And getting the smallest positive number supported by the decimal type is way trickier than just checking if it's zero or negative
                        if (CharacterObjectSettings.DontRoundEssenceInternally)
                        {
                            if (decEss < 0)
                                decExcessEss = -decEss;
                            else if (decEss == 0)
                                decExcessEss
                                    = 10.0m.RaiseToPower(-CharacterObjectSettings
                                                             .EssenceDecimals); // Hacky, but necessary so that the player knows they need to increase their ESS
                        }
                        else
                        {
                            decimal decMinEss = 10.0m.RaiseToPower(-CharacterObjectSettings.EssenceDecimals);
                            if (decEss < decMinEss)
                                decExcessEss = decMinEss - decEss;
                        }

                        if (decExcessEss > 0)
                        {
                            blnValid = false;
                            sbdMessage.AppendLine().Append('\t').AppendFormat(
                                GlobalSettings.CultureInfo,
                                await LanguageManager.GetStringAsync("Message_InvalidEssenceExcess", token: token)
                                                     .ConfigureAwait(false),
                                decExcessEss);
                        }
                    }

                    // If the character has the Spells & Spirits Tab enabled, make sure a Tradition has been selected.
                    if ((await CharacterObject.GetMagicianEnabledAsync(token).ConfigureAwait(false)
                         || await CharacterObject.GetAdeptEnabledAsync(token).ConfigureAwait(false))
                        && (await CharacterObject.GetMagicTraditionAsync(token).ConfigureAwait(false)).Type
                        != TraditionType.MAG)
                    {
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t')
                                  .Append(await LanguageManager
                                                .GetStringAsync("Message_InvalidNoTradition", token: token)
                                                .ConfigureAwait(false));
                    }

                    // If the character has the Spells & Spirits Tab enabled, make sure a Tradition has been selected.
                    if (await CharacterObject.GetAdeptEnabledAsync(token).ConfigureAwait(false))
                    {
                        decimal decPPUsed = await CharacterObject.GetPowerPointsUsedAsync(token).ConfigureAwait(false);
                        decimal decPPTotal
                            = await CharacterObject.GetPowerPointsTotalAsync(token).ConfigureAwait(false);
                        if (decPPUsed > decPPTotal)
                        {
                            blnValid = false;
                            sbdMessage.AppendLine().Append('\t').AppendFormat(GlobalSettings.CultureInfo,
                                                                              await LanguageManager.GetStringAsync(
                                                                                  "Message_InvalidPowerPoints",
                                                                                  token: token).ConfigureAwait(false),
                                                                              decPPUsed - decPPTotal, decPPTotal);
                        }
                    }

                    // If the character has the Technomancer Tab enabled, make sure a Stream has been selected.
                    if (await CharacterObject.GetTechnomancerEnabledAsync(token).ConfigureAwait(false)
                        && (await CharacterObject.GetMagicTraditionAsync(token).ConfigureAwait(false)).Type
                        != TraditionType.RES)
                    {
                        blnValid = false;
                        sbdMessage.AppendLine().Append('\t')
                                  .Append(await LanguageManager.GetStringAsync("Message_InvalidNoStream", token: token)
                                                               .ConfigureAwait(false));
                    }

                    // Check if the character has more than the permitted amount of native languages.
                    int intLanguages
                        = await (await objSkillsSection.GetKnowledgeSkillsAsync(token).ConfigureAwait(false))
                                .CountAsync(
                                    objSkill => objSkill.GetIsNativeLanguageAsync(token).AsTask(), token)
                                .ConfigureAwait(false);

                    int intLanguageLimit = 1 + (await ImprovementManager
                                                      .ValueOfAsync(CharacterObject,
                                                                    Improvement.ImprovementType.NativeLanguageLimit,
                                                                    token: token).ConfigureAwait(false))
                        .StandardRound();

                    if (intLanguages != intLanguageLimit)
                    {
                        if (intLanguages > intLanguageLimit)
                        {
                            blnValid = false;
                            sbdMessage.AppendLine().Append('\t').AppendFormat(GlobalSettings.CultureInfo,
                                                                              await LanguageManager.GetStringAsync(
                                                                                  "Message_OverLanguageLimit",
                                                                                  token: token).ConfigureAwait(false),
                                                                              intLanguages, intLanguageLimit);
                        }
                        else if (Program.ShowScrollableMessageBox(this,
                                                                  string.Format(
                                                                      GlobalSettings.CultureInfo,
                                                                      await LanguageManager.GetStringAsync(
                                                                              "Message_ExtraNativeLanguages",
                                                                              token: token)
                                                                          .ConfigureAwait(false),
                                                                      (intLanguageLimit - intLanguages).ToString(
                                                                          GlobalSettings.CultureInfo)),
                                                                  await LanguageManager.GetStringAsync(
                                                                          "MessageTitle_ExtraNativeLanguages",
                                                                          token: token)
                                                                      .ConfigureAwait(false),
                                                                  MessageBoxButtons.YesNo,
                                                                  MessageBoxIcon.Warning) == DialogResult.No)
                        {
                            blnValid = false;
                        }
                    }

                    // Check the character's equipment and make sure nothing goes over their set Maximum Availability.
                    // Number of items over the specified Availability the character is allowed to have (typically from the Restricted Gear Quality).
                    Dictionary<int, int> dicRestrictedGearLimits = new Dictionary<int, int>(1);
                    List<Improvement> lstUsedImprovements
                        = await ImprovementManager.GetCachedImprovementListForValueOfAsync(
                                                      CharacterObject, Improvement.ImprovementType.RestrictedGear,
                                                      token: token)
                                                  .ConfigureAwait(false);
                    bool blnHasRestrictedGearAvailable = lstUsedImprovements.Count != 0;
                    if (blnHasRestrictedGearAvailable)
                    {
                        foreach (Improvement objImprovement in lstUsedImprovements)
                        {
                            int intLoopAvailability = objImprovement.Value.StandardRound();
                            if (dicRestrictedGearLimits.TryGetValue(intLoopAvailability, out int intExistingValue))
                                dicRestrictedGearLimits[intLoopAvailability] = intExistingValue + objImprovement.Rating;
                            else
                                dicRestrictedGearLimits.Add(intLoopAvailability, objImprovement.Rating);
                        }
                    }

                    List<int> lstToRemove = new List<int>(dicRestrictedGearLimits.Count);
                    // Remove all Restricted Gear availabilities with non-positive counts
                    foreach (KeyValuePair<int, int> kvpLoop in dicRestrictedGearLimits)
                    {
                        if (kvpLoop.Value <= 0)
                            lstToRemove.Add(kvpLoop.Key);
                    }

                    foreach (int intLoop in lstToRemove)
                        dicRestrictedGearLimits.Remove(intLoop);

                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                  out StringBuilder sbdAvailItems))
                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                  out StringBuilder sbdRestrictedItems))
                    {
                        // Gear Availability.
                        int intRestrictedCount = await (await CharacterObject.GetGearAsync(token).ConfigureAwait(false))
                                                       .SumAsync(
                                                           async objGear => await objGear.CheckRestrictedGear(
                                                               dicRestrictedGearLimits, sbdAvailItems,
                                                               sbdRestrictedItems,
                                                               token).ConfigureAwait(false), token)
                                                       .ConfigureAwait(false)
                                                 // Cyberware Availability.
                                                 + await (await CharacterObject.GetCyberwareAsync(token)
                                                                               .ConfigureAwait(false)).SumAsync(
                                                     async objGear => await objGear.CheckRestrictedGear(
                                                         dicRestrictedGearLimits, sbdAvailItems, sbdRestrictedItems,
                                                         token).ConfigureAwait(false), token).ConfigureAwait(false)
                                                 // Armor Availability.
                                                 + await (await CharacterObject.GetArmorAsync(token)
                                                                               .ConfigureAwait(false)).SumAsync(
                                                     async objGear => await objGear.CheckRestrictedGear(
                                                         dicRestrictedGearLimits, sbdAvailItems, sbdRestrictedItems,
                                                         token).ConfigureAwait(false), token).ConfigureAwait(false)
                                                 // Weapon Availability.
                                                 + await (await CharacterObject.GetWeaponsAsync(token)
                                                                               .ConfigureAwait(false)).SumAsync(
                                                     async objGear => await objGear.CheckRestrictedGear(
                                                         dicRestrictedGearLimits, sbdAvailItems, sbdRestrictedItems,
                                                         token).ConfigureAwait(false), token).ConfigureAwait(false)
                                                 // Vehicle Availability.
                                                 + await (await CharacterObject.GetVehiclesAsync(token)
                                                                               .ConfigureAwait(false)).SumAsync(
                                                     async objGear => await objGear.CheckRestrictedGear(
                                                         dicRestrictedGearLimits, sbdAvailItems, sbdRestrictedItems,
                                                         token).ConfigureAwait(false), token).ConfigureAwait(false);

                        // Make sure the character is not carrying more items over the allowed Avail than they are allowed.
                        if (intRestrictedCount > 0)
                        {
                            blnValid = false;
                            sbdMessage.AppendLine().Append('\t').AppendFormat(GlobalSettings.CultureInfo,
                                                                              await LanguageManager.GetStringAsync(
                                                                                      "Message_InvalidAvail",
                                                                                      token: token)
                                                                                  .ConfigureAwait(false),
                                                                              intRestrictedCount,
                                                                              CharacterObjectSettings
                                                                                  .MaximumAvailability);
                            sbdMessage.Append(sbdAvailItems);
                            if (blnHasRestrictedGearAvailable)
                            {
                                sbdMessage.AppendLine().AppendFormat(GlobalSettings.CultureInfo,
                                                                     await LanguageManager.GetStringAsync(
                                                                             "Message_RestrictedGearUsed", token: token)
                                                                         .ConfigureAwait(false),
                                                                     sbdRestrictedItems.ToString());
                            }
                        }
                    }

                    // Check for any illegal cyberware grades
                    using (new FetchSafelyFromPool<StringBuilder>(Utils.StringBuilderPool,
                                                                  out StringBuilder sbdIllegalCyberwareFromGrade))
                    {
                        await (await CharacterObject.GetCyberwareAsync(token).ConfigureAwait(false)).ForEachAsync(
                                objCyberware =>
                                    objCyberware.CheckBannedGradesAsync(sbdIllegalCyberwareFromGrade, token), token)
                            .ConfigureAwait(false);

                        await (await CharacterObject.GetVehiclesAsync(token).ConfigureAwait(false)).ForEachAsync(
                            async objVehicle =>
                            {
                                foreach (Cyberware objCyberware in objVehicle.Mods.SelectMany(
                                             objMod => objMod.Cyberware))
                                {
                                    await objCyberware.CheckBannedGradesAsync(sbdIllegalCyberwareFromGrade, token)
                                                      .ConfigureAwait(false);
                                }

                                foreach (Cyberware objCyberware in objVehicle.WeaponMounts.SelectMany(
                                             objMount => objMount.Mods.SelectMany(objMod => objMod.Cyberware)))
                                {
                                    await objCyberware.CheckBannedGradesAsync(sbdIllegalCyberwareFromGrade, token)
                                                      .ConfigureAwait(false);
                                }
                            }, token).ConfigureAwait(false);

                        if (sbdIllegalCyberwareFromGrade.Length > 0)
                        {
                            blnValid = false;
                            sbdMessage.AppendLine().Append('\t')
                                      .Append(await LanguageManager
                                                    .GetStringAsync("Message_InvalidCyberwareGrades", token: token)
                                                    .ConfigureAwait(false))
                                      .Append(sbdIllegalCyberwareFromGrade);
                        }
                    }

                    // Cyberware: Prototype Transhuman
                    decimal decPrototypeTranshumanEssenceMax
                        = await CharacterObject.GetPrototypeTranshumanAsync(token).ConfigureAwait(false);
                    if (decPrototypeTranshumanEssenceMax > 0)
                    {
                        decimal decPrototypeTranshumanEssenceUsed = CharacterObject.PrototypeTranshumanEssenceUsed;
                        if (decPrototypeTranshumanEssenceMax < decPrototypeTranshumanEssenceUsed)
                        {
                            blnValid = false;
                            sbdMessage.AppendLine().Append('\t').AppendFormat(
                                GlobalSettings.CultureInfo,
                                await LanguageManager.GetStringAsync("Message_OverPrototypeLimit", token: token)
                                                     .ConfigureAwait(false),
                                decPrototypeTranshumanEssenceUsed.ToString(CharacterObjectSettings.EssenceFormat,
                                                                           GlobalSettings.CultureInfo),
                                decPrototypeTranshumanEssenceMax.ToString(CharacterObjectSettings.EssenceFormat,
                                                                          GlobalSettings.CultureInfo));
                        }
                    }

                    // Check item Capacities if the option is enabled.
                    if (CharacterObjectSettings.EnforceCapacity)
                    {
                        List<string> lstOverCapacity = new List<string>(1);
                        // Armor Capacity.
                        int intCapacityOver = await (await CharacterObject.GetArmorAsync(token).ConfigureAwait(false)).SumAsync(
                            async objArmor =>
                            {
                                int intReturn = 0;
                                if (objArmor.CapacityRemaining < 0)
                                {
                                    lstOverCapacity.Add(await objArmor.GetCurrentDisplayNameShortAsync(token)
                                                                      .ConfigureAwait(false));
                                    intReturn++;
                                }

                                foreach (Gear objGear in objArmor.GearChildren.DeepWhere(
                                             x => x.Children, x => x.CapacityRemaining < 0))
                                {
                                    lstOverCapacity.Add(await objGear.GetCurrentDisplayNameShortAsync(token)
                                                                     .ConfigureAwait(false));
                                    intReturn++;
                                }

                                intReturn += await objArmor.ArmorMods.SumAsync(async objArmorMod =>
                                {
                                    int intReturn2 = 0;
                                    foreach (Gear objGear in objArmorMod.GearChildren.DeepWhere(
                                                 x => x.Children, x => x.CapacityRemaining < 0))
                                    {
                                        lstOverCapacity.Add(await objGear.GetCurrentDisplayNameShortAsync(token)
                                                                         .ConfigureAwait(false));
                                        intReturn2++;
                                    }

                                    return intReturn2;
                                }, token).ConfigureAwait(false);
                                return intReturn;
                            }, token).ConfigureAwait(false);

                        foreach (Weapon objWeapon in
                                 await (await CharacterObject.GetWeaponsAsync(token).ConfigureAwait(false)).DeepWhereAsync(
                                     x => x.Children, async x => await x.WeaponAccessories.GetCountAsync(token).ConfigureAwait(false) > 0, token).ConfigureAwait(false))
                        {
                            intCapacityOver += await objWeapon.WeaponAccessories.SumAsync(async objAccessory =>
                            {
                                int intReturn = 0;
                                foreach (Gear objGear in objAccessory.GearChildren.DeepWhere(
                                             x => x.Children, x => x.CapacityRemaining < 0))
                                {
                                    lstOverCapacity.Add(await objGear.GetCurrentDisplayNameShortAsync(token)
                                                                     .ConfigureAwait(false));
                                    intReturn++;
                                }

                                return intReturn;
                            }, token).ConfigureAwait(false);
                        }

                        // Gear Capacity.
                        foreach (Gear objGear in await (await CharacterObject.GetGearAsync(token).ConfigureAwait(false))
                                 .DeepWhereAsync(
                                     x => x.Children, x => x.CapacityRemaining < 0, token).ConfigureAwait(false))
                        {
                            lstOverCapacity.Add(await objGear.GetCurrentDisplayNameShortAsync(token)
                                                             .ConfigureAwait(false));
                            intCapacityOver++;
                        }

                        // Cyberware Capacity.
                        foreach (Cyberware objCyberware in await (await CharacterObject.GetCyberwareAsync(token)
                                     .ConfigureAwait(false)).GetAllDescendantsAsync(x => x.Children, token).ConfigureAwait(false))
                        {
                            if (objCyberware.CapacityRemaining < 0)
                            {
                                lstOverCapacity.Add(await objCyberware.GetCurrentDisplayNameShortAsync(token)
                                                                      .ConfigureAwait(false));
                                intCapacityOver++;
                            }

                            intCapacityOver += await objCyberware.GearChildren.SumAsync(async objGear =>
                            {
                                int intReturn = 0;
                                if (objGear.CapacityRemaining < 0)
                                {
                                    lstOverCapacity.Add(await objGear.GetCurrentDisplayNameShortAsync(token)
                                                                     .ConfigureAwait(false));
                                    intReturn++;
                                }

                                // Child Gear.
                                foreach (Gear objChild in objGear.Children.DeepWhere(
                                             x => x.Children, x => x.CapacityRemaining < 0))
                                {
                                    lstOverCapacity.Add(await objChild.GetCurrentDisplayNameShortAsync(token)
                                                                      .ConfigureAwait(false));
                                    intReturn++;
                                }

                                return intReturn;
                            }, token).ConfigureAwait(false);
                        }

                        // Vehicle Capacity.
                        intCapacityOver += await(await CharacterObject.GetVehiclesAsync(token).ConfigureAwait(false)).SumAsync(
                            async objVehicle =>
                            {
                                int intReturn = 0;
                                if (await CharacterObjectSettings.BookEnabledAsync("R5", token).ConfigureAwait(false))
                                {
                                    if (objVehicle.IsDrone && await CharacterObjectSettings.GetDroneModsAsync(token)
                                            .ConfigureAwait(false))
                                    {
                                        if (await objVehicle.GetDroneModSlotsUsedAsync(token).ConfigureAwait(false)
                                            > await objVehicle.GetDroneModSlotsAsync(token).ConfigureAwait(false))
                                        {
                                            lstOverCapacity.Add(await objVehicle.GetCurrentDisplayNameShortAsync(token)
                                                                    .ConfigureAwait(false));
                                            intReturn++;
                                        }
                                    }
                                    else
                                    {
                                        if (await objVehicle.OverR5CapacityAsync(token: token).ConfigureAwait(false))
                                        {
                                            lstOverCapacity.Add(await objVehicle.GetCurrentDisplayNameShortAsync(token)
                                                                    .ConfigureAwait(false));
                                            intReturn++;
                                        }
                                    }
                                }
                                else if (await objVehicle.GetSlotsAsync(token).ConfigureAwait(false) < await objVehicle.GetSlotsUsedAsync(token).ConfigureAwait(false))
                                {
                                    lstOverCapacity.Add(await objVehicle.GetCurrentDisplayNameShortAsync(token)
                                                                        .ConfigureAwait(false));
                                    intReturn++;
                                }

                                intReturn += await objVehicle.Mods.SumAsync(async objVehicleMod =>
                                {
                                    int intReturn2 = 0;
                                    foreach (Cyberware objCyberware in objVehicleMod.Cyberware.GetAllDescendants(
                                                 x => x.Children))
                                    {
                                        if (objCyberware.CapacityRemaining < 0)
                                        {
                                            lstOverCapacity.Add(await objCyberware
                                                                      .GetCurrentDisplayNameShortAsync(token)
                                                                      .ConfigureAwait(false));
                                            intReturn2++;
                                        }

                                        foreach (Gear objGear in objCyberware.GearChildren.DeepWhere(
                                                     x => x.Children, x => x.CapacityRemaining < 0))
                                        {
                                            lstOverCapacity.Add(await objGear.GetCurrentDisplayNameShortAsync(token)
                                                                             .ConfigureAwait(false));
                                            intReturn2++;
                                        }
                                    }

                                    return intReturn2;
                                }, token).ConfigureAwait(false);

                                intReturn += await objVehicle.WeaponMounts.SumAsync(async objMount =>
                                {
                                    int intReturn2 = 0;
                                    if (objMount.Weapons.Count > objMount.WeaponCapacity)
                                    {
                                        lstOverCapacity.Add(await objMount.GetCurrentDisplayNameShortAsync(token)
                                                                          .ConfigureAwait(false));
                                        intReturn2++;
                                    }

                                    foreach (Weapon objWeapon in objMount.Weapons.DeepWhere(
                                                 x => x.Children, x => x.WeaponAccessories.Count > 0))
                                    {
                                        intReturn2 += await objWeapon.WeaponAccessories.SumAsync(async objAccessory =>
                                        {
                                            int intReturn3 = 0;
                                            foreach (Gear objGear in objAccessory.GearChildren.DeepWhere(
                                                         x => x.Children, x => x.CapacityRemaining < 0))
                                            {
                                                lstOverCapacity.Add(
                                                    await objGear.GetCurrentDisplayNameShortAsync(token)
                                                                 .ConfigureAwait(false));
                                                intReturn3++;
                                            }

                                            return intReturn3;
                                        }, token).ConfigureAwait(false);
                                    }

                                    intReturn2 += await objMount.Mods.SumAsync(async objVehicleMod =>
                                    {
                                        int intReturn3 = 0;
                                        foreach (Cyberware objCyberware in objVehicleMod.Cyberware.GetAllDescendants(
                                                     x => x.Children))
                                        {
                                            if (objCyberware.CapacityRemaining < 0)
                                            {
                                                lstOverCapacity.Add(
                                                    await objCyberware.GetCurrentDisplayNameShortAsync(token)
                                                                      .ConfigureAwait(false));
                                                intReturn3++;
                                            }

                                            foreach (Gear objGear in objCyberware.GearChildren.DeepWhere(
                                                         x => x.Children, x => x.CapacityRemaining < 0))
                                            {
                                                lstOverCapacity.Add(
                                                    await objGear.GetCurrentDisplayNameShortAsync(token)
                                                                 .ConfigureAwait(false));
                                                intReturn3++;
                                            }
                                        }

                                        return intReturn3;
                                    }, token).ConfigureAwait(false);
                                    return intReturn2;
                                }, token).ConfigureAwait(false);

                                // Check Vehicle Gear.
                                foreach (Gear objGear in objVehicle.GearChildren.DeepWhere(
                                             x => x.Children, x => x.CapacityRemaining < 0))
                                {
                                    lstOverCapacity.Add(await objGear.GetCurrentDisplayNameShortAsync(token)
                                                                     .ConfigureAwait(false));
                                    intReturn++;
                                }

                                return intReturn;
                            }, token).ConfigureAwait(false);

                        if (intCapacityOver > 0)
                        {
                            blnValid = false;
                            sbdMessage.AppendLine().Append('\t').AppendFormat(
                                GlobalSettings.CultureInfo,
                                await LanguageManager.GetStringAsync("Message_CapacityReachedValidate", token: token)
                                                     .ConfigureAwait(false),
                                intCapacityOver);
                            foreach (string strItem in lstOverCapacity)
                            {
                                sbdMessage.AppendLine().Append("\t- ").Append(strItem);
                            }
                        }
                    }

                    //Check Drone mods for illegalities
                    if (await CharacterObjectSettings.BookEnabledAsync("R5", token).ConfigureAwait(false))
                    {
                        List<string> lstDronesIllegalDowngrades = new List<string>(1);
                        bool blnIllegalDowngrades = false;
                        int intIllegalDowngrades = 0;
                        await CharacterObject.Vehicles.ForEachAsync(async objVehicle =>
                        {
                            if (!objVehicle.IsDrone || !await CharacterObjectSettings.GetDroneModsAsync(token)
                                    .ConfigureAwait(false))
                                return;
                            foreach (string strModCategory in objVehicle.Mods
                                                                        .Where(objMod => !objMod.IncludedInVehicle
                                                                                   && objMod.Equipped
                                                                                   && objMod.Downgrade)
                                                                        .Select(x => x.Category))
                            {
                                //Downgrades can't reduce a attribute to less than 1 (except Speed which can go to 0)
                                if (strModCategory == "Handling"
                                    && Convert.ToInt32(objVehicle.TotalHandling, GlobalSettings.InvariantCultureInfo)
                                    < 1 ||
                                    strModCategory == "Speed"
                                    && Convert.ToInt32(objVehicle.TotalSpeed, GlobalSettings.InvariantCultureInfo) < 0
                                    ||
                                    strModCategory == "Acceleration"
                                    && Convert.ToInt32(objVehicle.TotalAccel, GlobalSettings.InvariantCultureInfo) < 1
                                    ||
                                    strModCategory == "Body" && objVehicle.TotalBody < 1 ||
                                    strModCategory == "Armor" && objVehicle.TotalArmor < 1 ||
                                    strModCategory == "Sensor" && objVehicle.CalculatedSensor < 1)
                                {
                                    blnIllegalDowngrades = true;
                                    intIllegalDowngrades++;
                                    lstDronesIllegalDowngrades.Add(objVehicle.Name);
                                    break;
                                }
                            }
                        }, token).ConfigureAwait(false);

                        if (blnIllegalDowngrades)
                        {
                            blnValid = false;
                            sbdMessage.AppendLine().Append('\t').AppendFormat(
                                GlobalSettings.CultureInfo,
                                await LanguageManager.GetStringAsync("Message_DroneIllegalDowngrade", token: token)
                                                     .ConfigureAwait(false),
                                intIllegalDowngrades);
                            foreach (string strItem in lstDronesIllegalDowngrades)
                            {
                                sbdMessage.AppendLine().Append("\t- ").Append(strItem);
                            }
                        }
                    }

                    i = CharacterObject.Attributes
                        - await CalculateAttributePriorityPoints(lstAttributes,
                                                                 token: token).ConfigureAwait(false);
                    // Check if the character has extra Attribute points
                    if (blnValid && i > 0 && Program.ShowScrollableMessageBox(this,
                                                                              string.Format(
                                                                                  GlobalSettings.CultureInfo,
                                                                                  await LanguageManager.GetStringAsync(
                                                                                          "Message_ExtraPoints",
                                                                                          token: token)
                                                                                      .ConfigureAwait(false),
                                                                                  i.ToString(
                                                                                      GlobalSettings.CultureInfo),
                                                                                  await LanguageManager
                                                                                      .GetStringAsync(
                                                                                          "Label_SummaryPrimaryAttributes",
                                                                                          token: token)
                                                                                      .ConfigureAwait(false)),
                                                                              await LanguageManager.GetStringAsync(
                                                                                      "MessageTitle_ExtraPoints",
                                                                                      token: token)
                                                                                  .ConfigureAwait(false),
                                                                              MessageBoxButtons.YesNo,
                                                                              MessageBoxIcon.Warning)
                        == DialogResult.No)
                    {
                        blnValid = false;
                    }

                    i = CharacterObject.Special
                        - await CalculateAttributePriorityPoints(lstSpecialAttributes, token: token)
                            .ConfigureAwait(false);
                    // Check if the character has extra Special Attribute points
                    if (blnValid && i > 0 && Program.ShowScrollableMessageBox(this,
                                                                              string.Format(
                                                                                  GlobalSettings.CultureInfo,
                                                                                  await LanguageManager.GetStringAsync(
                                                                                          "Message_ExtraPoints",
                                                                                          token: token)
                                                                                      .ConfigureAwait(false),
                                                                                  i.ToString(
                                                                                      GlobalSettings.CultureInfo),
                                                                                  await LanguageManager
                                                                                      .GetStringAsync(
                                                                                          "Label_SummarySpecialAttributes",
                                                                                          token: token)
                                                                                      .ConfigureAwait(false)),
                                                                              await LanguageManager.GetStringAsync(
                                                                                      "MessageTitle_ExtraPoints",
                                                                                      token: token)
                                                                                  .ConfigureAwait(false),
                                                                              MessageBoxButtons.YesNo,
                                                                              MessageBoxIcon.Warning)
                        == DialogResult.No)
                    {
                        blnValid = false;
                    }

                    // Check if the character has extra Skill Group points
                    if (blnValid && intSkillGroupPoints > 0
                                 && Program.ShowScrollableMessageBox(this,
                                                                     string.Format(
                                                                         GlobalSettings.CultureInfo,
                                                                         await LanguageManager.GetStringAsync(
                                                                                 "Message_ExtraPoints", token: token)
                                                                             .ConfigureAwait(false),
                                                                         intSkillGroupPoints.ToString(
                                                                             GlobalSettings.CultureInfo),
                                                                         await LanguageManager
                                                                               .GetStringAsync(
                                                                                   "Label_SummarySkillGroups",
                                                                                   token: token).ConfigureAwait(false)),
                                                                     await LanguageManager.GetStringAsync(
                                                                             "MessageTitle_ExtraPoints", token: token)
                                                                         .ConfigureAwait(false),
                                                                     MessageBoxButtons.YesNo,
                                                                     MessageBoxIcon.Warning) == DialogResult.No)
                    {
                        blnValid = false;
                    }

                    // Check if the character has extra Active Skill points
                    if (blnValid && intSkillPoints > 0 && Program.ShowScrollableMessageBox(
                            this,
                            string.Format(GlobalSettings.CultureInfo,
                                          await LanguageManager.GetStringAsync("Message_ExtraPoints", token: token)
                                                               .ConfigureAwait(false),
                                          intSkillPoints.ToString(
                                              GlobalSettings.CultureInfo),
                                          await LanguageManager
                                                .GetStringAsync("Label_SummaryActiveSkills", token: token)
                                                .ConfigureAwait(false)),
                            await LanguageManager.GetStringAsync("MessageTitle_ExtraPoints", token: token)
                                                 .ConfigureAwait(false), MessageBoxButtons.YesNo,
                            MessageBoxIcon.Warning) == DialogResult.No)
                    {
                        blnValid = false;
                    }

                    // Check if the character has extra Knowledge Skill points
                    if (blnValid && intKnoSkillPoints > 0
                                 && Program.ShowScrollableMessageBox(this,
                                                                     string.Format(
                                                                         GlobalSettings.CultureInfo,
                                                                         await LanguageManager.GetStringAsync(
                                                                                 "Message_ExtraPoints", token: token)
                                                                             .ConfigureAwait(false),
                                                                         intKnoSkillPoints.ToString(
                                                                             GlobalSettings.CultureInfo),
                                                                         await LanguageManager
                                                                               .GetStringAsync(
                                                                                   "Label_SummaryKnowledgeSkills",
                                                                                   token: token).ConfigureAwait(false)),
                                                                     await LanguageManager.GetStringAsync(
                                                                             "MessageTitle_ExtraPoints", token: token)
                                                                         .ConfigureAwait(false),
                                                                     MessageBoxButtons.YesNo,
                                                                     MessageBoxIcon.Warning) == DialogResult.No)
                    {
                        blnValid = false;
                    }

                    // Check if the character has extra Contact points
                    if (blnValid)
                    {
                        int intContactPointsRemain
                            = await CharacterObject.GetContactPointsAsync(token).ConfigureAwait(false);
                        if (intContactPointsRemain > 0)
                        {
                            intContactPointsRemain
                                -= await CharacterObject.GetContactPointsUsedAsync(token).ConfigureAwait(false);
                            if (intContactPointsRemain > 0
                                && Program.ShowScrollableMessageBox(this,
                                                                    string.Format(
                                                                        GlobalSettings.CultureInfo,
                                                                        await LanguageManager.GetStringAsync(
                                                                                "Message_ExtraPoints", token: token)
                                                                            .ConfigureAwait(false),
                                                                        intContactPointsRemain.ToString(
                                                                            GlobalSettings.CultureInfo),
                                                                        await LanguageManager
                                                                              .GetStringAsync(
                                                                                  "String_ContactPoints", token: token)
                                                                              .ConfigureAwait(false)),
                                                                    await LanguageManager.GetStringAsync(
                                                                            "MessageTitle_ExtraPoints", token: token)
                                                                        .ConfigureAwait(false),
                                                                    MessageBoxButtons.YesNo,
                                                                    MessageBoxIcon.Warning) == DialogResult.No)
                            {
                                blnValid = false;
                            }
                        }
                    }

                    // Check if the character has extra spell points
                    if (blnValid)
                    {
                        if (await CharacterObject.GetFreeSpellsAsync(token).ConfigureAwait(false) > 0
                            || (await ImprovementManager
                                      .GetCachedImprovementListForValueOfAsync(CharacterObject,
                                                                               Improvement.ImprovementType.FreeSpells,
                                                                               token: token)
                                      .ConfigureAwait(false)).Count > 0
                            || (await ImprovementManager
                                      .GetCachedImprovementListForValueOfAsync(CharacterObject,
                                                                               Improvement.ImprovementType
                                                                                   .FreeSpellsATT,
                                                                               token: token).ConfigureAwait(false))
                            .Count > 0
                            || (await ImprovementManager
                                      .GetCachedImprovementListForValueOfAsync(CharacterObject,
                                                                               Improvement.ImprovementType
                                                                                   .FreeSpellsSkill,
                                                                               token: token).ConfigureAwait(false))
                            .Count > 0)
                        {
                            ThreadSafeObservableCollection<Spell> lstSpells
                                = await CharacterObject.GetSpellsAsync(token).ConfigureAwait(false);
                            // Count the number of Spells the character currently has
                            int intUsedPoints = await lstSpells
                                                      .CountAsync(
                                                          spell => spell.Grade == 0 && !spell.FreeBonus,
                                                          token: token).ConfigureAwait(false);
                            int intTouchOnlySpells = await lstSpells
                                                           .CountAsync(
                                                               spell => spell.Grade == 0 && !spell.Alchemical
                                                                   && spell.Category != "Rituals"
                                                                   && (spell.Range == "T (A)"
                                                                       || spell.Range == "T")
                                                                   && !spell.FreeBonus, token: token)
                                                           .ConfigureAwait(false);

                            int intFreeSpells = await CharacterObject.GetFreeSpellsAsync(token).ConfigureAwait(false);

                            token.ThrowIfCancellationRequested();

                            if (intFreeSpells > 0)
                            {
                                // Each spell costs KarmaSpell.
                                int spellCost = await CharacterObject.SpellKarmaCostAsync("Spells", token)
                                                                     .ConfigureAwait(false);
                                // Factor in any qualities that can be bought with spell points.
                                // It is only karma-efficient to use spell points for Mastery qualities if real spell karma cost is not greater than unmodified spell karma cost
                                int intKarmaSpell = await CharacterObjectSettings.GetKarmaSpellAsync(token)
                                    .ConfigureAwait(false);
                                if (spellCost <= intKarmaSpell && intKarmaSpell != 0)
                                {
                                    // Assume that every [spell cost] karma spent on a Mastery quality is paid for with a priority-given spell point instead, as that is the most karma-efficient.
                                    int intMasteryQualityKarmaUsed
                                        = await (await CharacterObject.GetQualitiesAsync(token).ConfigureAwait(false))
                                                .SumAsync(
                                                    objQuality =>
                                                        objQuality.CanBuyWithSpellPoints,
                                                    objQuality => objQuality.BP, token)
                                                .ConfigureAwait(false);
                                    if (intMasteryQualityKarmaUsed != 0)
                                    {
                                        int intQualityKarmaToSpellPoints
                                            = Math.Min(
                                                intFreeSpells,
                                                intMasteryQualityKarmaUsed * await CharacterObjectSettings
                                                    .GetKarmaQualityAsync(token)
                                                    .ConfigureAwait(false)
                                                / intKarmaSpell);
                                        intUsedPoints += intQualityKarmaToSpellPoints;
                                    }
                                }
                            }

                            token.ThrowIfCancellationRequested();

                            int intLimitMod = (await ImprovementManager
                                                     .ValueOfAsync(CharacterObject,
                                                                   Improvement.ImprovementType.SpellLimit,
                                                                   token: token).ConfigureAwait(false)
                                               + await ImprovementManager
                                                       .ValueOfAsync(CharacterObject,
                                                                     Improvement.ImprovementType.FreeSpells,
                                                                     token: token).ConfigureAwait(false))
                                .StandardRound();
                            int intLimitModTouchOnly = 0;
                            foreach (Improvement imp in await ImprovementManager
                                                              .GetCachedImprovementListForValueOfAsync(
                                                                  CharacterObject,
                                                                  Improvement.ImprovementType.FreeSpellsATT,
                                                                  token: token).ConfigureAwait(false))
                            {
                                token.ThrowIfCancellationRequested();
                                int intAttValue
                                    = await (await CharacterObject.GetAttributeAsync(imp.ImprovedName, token: token)
                                                                  .ConfigureAwait(false)).GetTotalValueAsync(token)
                                        .ConfigureAwait(false);
                                if (imp.UniqueName.Contains("half"))
                                    intAttValue = (intAttValue + 1) / 2;
                                if (imp.UniqueName.Contains("touchonly"))
                                    intLimitModTouchOnly += intAttValue;
                                else
                                    intLimitMod += intAttValue;
                            }

                            foreach (Improvement imp in await ImprovementManager
                                                              .GetCachedImprovementListForValueOfAsync(
                                                                  CharacterObject,
                                                                  Improvement.ImprovementType.FreeSpellsSkill,
                                                                  token: token).ConfigureAwait(false))
                            {
                                token.ThrowIfCancellationRequested();
                                Skill skill = await objSkillsSection.GetActiveSkillAsync(imp.ImprovedName, token)
                                                                    .ConfigureAwait(false);
                                if (skill == null)
                                    continue;
                                int intSkillValue = await skill.GetTotalBaseRatingAsync(token).ConfigureAwait(false);

                                if (imp.UniqueName.Contains("half"))
                                    intSkillValue = (intSkillValue + 1) / 2;
                                if (imp.UniqueName.Contains("touchonly"))
                                    intLimitModTouchOnly += intSkillValue;
                                else
                                    intLimitMod += intSkillValue;
                                //TODO: I don't like this being hardcoded, even though I know full well CGL are never going to reuse this.
                                intUsedPoints -= await (await skill.GetSpecializationsAsync(token).ConfigureAwait(false))
                                                       .CountAsync(
                                                           async spec =>
                                                               await (await CharacterObject.GetSpellsAsync(token)
                                                                       .ConfigureAwait(false)).AnyAsync(
                                                                       spell => spell.Category == spec.Name
                                                                           && !spell.FreeBonus,
                                                                       token)
                                                                   .ConfigureAwait(false),
                                                           token)
                                                       .ConfigureAwait(false);
                            }

                            if (await CharacterObject.GetUseMysticAdeptPPsAsync(token).ConfigureAwait(false)
                                && await CharacterObjectSettings.GetPrioritySpellsAsAdeptPowersAsync(token)
                                                                .ConfigureAwait(false))
                            {
                                intUsedPoints += await nudMysticAdeptMAGMagician
                                                       .DoThreadSafeFuncAsync(x => x.ValueAsInt, token)
                                                       .ConfigureAwait(false);
                            }

                            intUsedPoints -= intTouchOnlySpells - Math.Max(0, intTouchOnlySpells - intLimitModTouchOnly);

                            int intPointsRemaining = intFreeSpells + intLimitMod - intUsedPoints;

                            if (intPointsRemaining > 0
                                && Program.ShowScrollableMessageBox(this,
                                                                    string.Format(
                                                                        GlobalSettings.CultureInfo,
                                                                        await LanguageManager.GetStringAsync(
                                                                                "Message_ExtraPoints", token: token)
                                                                            .ConfigureAwait(false),
                                                                        intPointsRemaining.ToString(
                                                                            GlobalSettings.CultureInfo),
                                                                        await LanguageManager
                                                                              .GetStringAsync(
                                                                                  "String_FreeSpells", token: token)
                                                                              .ConfigureAwait(false)),
                                                                    await LanguageManager.GetStringAsync(
                                                                            "MessageTitle_ExtraPoints", token: token)
                                                                        .ConfigureAwait(false),
                                                                    MessageBoxButtons.YesNo,
                                                                    MessageBoxIcon.Warning) == DialogResult.No)
                            {
                                blnValid = false;
                            }
                        }
                    }

                    // Check if the character has extra complex form points
                    if (blnValid)
                    {
                        int intCFPointsRemain
                            = await CharacterObject.GetCFPLimitAsync(token).ConfigureAwait(false);
                        if (intCFPointsRemain > 0)
                        {
                            intCFPointsRemain
                                -= await (await CharacterObject.GetComplexFormsAsync(token).ConfigureAwait(false))
                                         .CountAsync(x => x.Grade == 0, token).ConfigureAwait(false);
                            if (intCFPointsRemain > 0
                                && Program.ShowScrollableMessageBox(this,
                                                                    string.Format(
                                                                        GlobalSettings.CultureInfo,
                                                                        await LanguageManager.GetStringAsync(
                                                                                "Message_ExtraPoints", token: token)
                                                                            .ConfigureAwait(false),
                                                                        intCFPointsRemain.ToString(
                                                                            GlobalSettings.CultureInfo),
                                                                        await LanguageManager
                                                                              .GetStringAsync(
                                                                                  "String_FreeCFs", token: token)
                                                                              .ConfigureAwait(false)),
                                                                    await LanguageManager.GetStringAsync(
                                                                            "MessageTitle_ExtraPoints", token: token)
                                                                        .ConfigureAwait(false),
                                                                    MessageBoxButtons.YesNo,
                                                                    MessageBoxIcon.Warning) == DialogResult.No)
                            {
                                blnValid = false;
                            }
                        }
                    }
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }

                if (!blnValid && sbdMessage.Length > (await LanguageManager
                                                            .GetStringAsync("Message_InvalidBeginning", token: token)
                                                            .ConfigureAwait(false)).Length)
                    Program.ShowScrollableMessageBox(this, sbdMessage.ToString(),
                                                     await LanguageManager
                                                           .GetStringAsync("MessageTitle_Invalid", token: token)
                                                           .ConfigureAwait(false),
                                                     MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            return blnValid;
        }

        /// <summary>
        /// Confirm that the character can move to career mode and perform final actions for karma carryover and such.
        /// </summary>
        public async ValueTask<bool> ValidateCharacter(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();

            int intBuildPoints = await CalculateBP(false, token).ConfigureAwait(false);

            if (await CheckCharacterValidity(true, intBuildPoints, token).ConfigureAwait(false))
            {
                // See if the character has any Karma remaining.
                if (intBuildPoints > CharacterObjectSettings.KarmaCarryover)
                {
                    if (!CharacterObject.EffectiveBuildMethodUsesPriorityTables)
                    {
                        if (Program.ShowScrollableMessageBox(
                                this,
                                string.Format(GlobalSettings.CultureInfo,
                                              await LanguageManager.GetStringAsync("Message_NoExtraKarma", token: token)
                                                                   .ConfigureAwait(false),
                                              intBuildPoints.ToString(GlobalSettings.CultureInfo)),
                                await LanguageManager.GetStringAsync("MessageTitle_ExtraKarma", token: token)
                                                     .ConfigureAwait(false), MessageBoxButtons.YesNo,
                                MessageBoxIcon.Warning) == DialogResult.No)
                            return false;
                    }
                    else if (Program.ShowScrollableMessageBox(this, string.Format(GlobalSettings.CultureInfo,
                                                                        await LanguageManager
                                                                              .GetStringAsync(
                                                                                  "Message_ExtraKarma", token: token)
                                                                              .ConfigureAwait(false),
                                                                        intBuildPoints.ToString(
                                                                            GlobalSettings.CultureInfo),
                                                                        CharacterObjectSettings.KarmaCarryover.ToString(GlobalSettings.CultureInfo)),
                                                    await LanguageManager
                                                          .GetStringAsync("MessageTitle_ExtraKarma", token: token)
                                                          .ConfigureAwait(false), MessageBoxButtons.YesNo,
                                                    MessageBoxIcon.Warning) == DialogResult.No)
                    {
                        return false;
                    }
                }

                if (CharacterObject.Nuyen > 5000 && Program.ShowScrollableMessageBox(
                        this, string.Format(GlobalSettings.CultureInfo,
                                            await LanguageManager.GetStringAsync("Message_ExtraNuyen", token: token)
                                                                 .ConfigureAwait(false),
                                            CharacterObject.Nuyen.ToString(
                                                CharacterObjectSettings.NuyenFormat, GlobalSettings.CultureInfo),
                                            5000.ToString(CharacterObjectSettings.NuyenFormat, GlobalSettings.CultureInfo)),
                        await LanguageManager.GetStringAsync("MessageTitle_ExtraNuyen", token: token)
                                             .ConfigureAwait(false), MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                    == DialogResult.No)
                    return false;
                if (GlobalSettings.CreateBackupOnCareer && await chkCharacterCreated
                                                                 .DoThreadSafeFuncAsync(x => x.Checked, token)
                                                                 .ConfigureAwait(false))
                {
                    // Create a pre-Career Mode backup of the character.
                    // Make sure the backup directory exists.
                    if (!Directory.Exists(Path.Combine(Utils.GetStartupPath, "saves", "backup")))
                    {
                        try
                        {
                            Directory.CreateDirectory(Path.Combine(Utils.GetStartupPath, "saves", "backup"));
                        }
                        catch (UnauthorizedAccessException)
                        {
                            Program.ShowScrollableMessageBox(
                                this,
                                await LanguageManager
                                      .GetStringAsync("Message_Insufficient_Permissions_Warning", token: token)
                                      .ConfigureAwait(false));
                            return false;
                        }
                    }

                    string strNewName = Path.GetFileNameWithoutExtension(CharacterObject.FileName);
                    if (string.IsNullOrEmpty(strNewName))
                    {
                        strNewName = CharacterObject.Alias;
                        if (string.IsNullOrEmpty(strNewName))
                        {
                            strNewName = CharacterObject.Name;
                            if (string.IsNullOrEmpty(strNewName))
                                strNewName = Guid.NewGuid().ToString("N", GlobalSettings.InvariantCultureInfo);
                        }
                    }

                    strNewName += await LanguageManager.GetStringAsync("String_Space", token: token)
                                                       .ConfigureAwait(false) + '('
                                                                              + await LanguageManager
                                                                                  .GetStringAsync(
                                                                                      "Title_CreateMode", token: token)
                                                                                  .ConfigureAwait(false)
                                                                              + ").chum5";
                    if (CharacterObject.FileName?.EndsWith(".chum5lz", StringComparison.OrdinalIgnoreCase) == true)
                        strNewName += "lz";
                    strNewName = Path.Combine(Utils.GetStartupPath, "saves", "backup", strNewName);

                    CursorWait objCursorWait = await CursorWait.NewAsync(this, token: token).ConfigureAwait(false);
                    try
                    {
                        using (ThreadSafeForm<LoadingBar> frmLoadingBar
                               = await Program.CreateAndShowProgressBarAsync(token: token).ConfigureAwait(false))
                        {
                            await frmLoadingBar.MyForm.PerformStepAsync(CharacterObject.CharacterName,
                                                                        LoadingBar.ProgressBarTextPatterns.Saving,
                                                                        token).ConfigureAwait(false);
                            if (!await CharacterObject.SaveAsync(strNewName, token: token).ConfigureAwait(false))
                                return false;
                        }
                    }
                    finally
                    {
                        await objCursorWait.DisposeAsync().ConfigureAwait(false);
                    }
                }

                SkipUpdate = true;
                try
                {
                    // If the character does not have any Lifestyles, give them the Street Lifestyle.
                    if (CharacterObject.Lifestyles.Count == 0)
                    {
                        Lifestyle objLifestyle = new Lifestyle(CharacterObject);
                        XmlDocument objXmlDocument = await CharacterObject.LoadDataAsync("lifestyles.xml", token: token)
                                                                          .ConfigureAwait(false);
                        XmlNode objXmlLifestyle
                            = objXmlDocument.SelectSingleNode("/chummer/lifestyles/lifestyle[name = \"Street\"]");

                        objLifestyle.Create(objXmlLifestyle);

                        await CharacterObject.Lifestyles.AddAsync(objLifestyle, token).ConfigureAwait(false);
                    }

                    decimal decStartingNuyen;
                    using (ThreadSafeForm<SelectLifestyleStartingNuyen> frmStartingNuyen
                           = await ThreadSafeForm<SelectLifestyleStartingNuyen>.GetAsync(
                               () => new SelectLifestyleStartingNuyen(CharacterObject), token).ConfigureAwait(false))
                    {
                        if (await frmStartingNuyen.ShowDialogSafeAsync(this, token).ConfigureAwait(false)
                            != DialogResult.OK)
                            return false;
                        decStartingNuyen = frmStartingNuyen.MyForm.StartingNuyen;
                    }

                    // Assign starting values and overflows.
                    if (decStartingNuyen < 0)
                        decStartingNuyen = 0;
                    if (CharacterObject.Nuyen > 5000)
                        CharacterObject.Nuyen = 5000;
                    _decStartingLifestyleNuyen = decStartingNuyen;
                    //This needs to be added to Character.Nuyen to ensure that the ExpanseEntries are created accurately
                    CharacterObject.Nuyen += decStartingNuyen;
                    // See if the character has any Karma remaining.
                    await CharacterObject
                          .SetKarmaAsync(Math.Min(intBuildPoints, CharacterObjectSettings.KarmaCarryover), token)
                          .ConfigureAwait(false);

                    return true;
                }
                finally
                {
                    SkipUpdate = false;
                }
            }

            return false;
        }

        /// <summary>
        /// Verify that the user wants to save this character as Created.
        /// </summary>
        public override async Task<bool> ConfirmSaveCreatedCharacter(CancellationToken token = default)
        {
            return Program.ShowScrollableMessageBox(
                this, await LanguageManager.GetStringAsync("Message_ConfirmCreate", token: token).ConfigureAwait(false),
                await LanguageManager.GetStringAsync("MessageTitle_ConfirmCreate", token: token).ConfigureAwait(false),
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question) != DialogResult.No && await ValidateCharacter(token).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Cyberware from a Cyberware Suite.
        /// </summary>
        /// <param name="xmlSuiteNode">XmlNode for the cyberware suite to add.</param>
        /// <param name="xmlCyberwareNode">XmlNode for the Cyberware to add.</param>
        /// <param name="objGrade">CyberwareGrade to add the item as.</param>
        /// <param name="intRating">Rating of the Cyberware.</param>
        /// <param name="eSource">Source representing whether the suite is cyberware or bioware.</param>
        /// <param name="token">CancellationToken to listen to.</param>
        private Cyberware CreateSuiteCyberware(XmlNode xmlSuiteNode, XmlNode xmlCyberwareNode, Grade objGrade,
                                               int intRating, Improvement.ImprovementSource eSource,
                                               CancellationToken token = default)
        {
            // Create the Cyberware object.
            List<Weapon> lstWeapons = new List<Weapon>(1);
            List<Vehicle> lstVehicles = new List<Vehicle>(1);
            Cyberware objCyberware = new Cyberware(CharacterObject);
            string strForced = xmlSuiteNode.SelectSingleNodeAndCacheExpressionAsNavigator("name/@select", token)?.Value ?? string.Empty;

            objCyberware.Create(xmlCyberwareNode, objGrade, eSource, intRating, lstWeapons, lstVehicles, true, true,
                                strForced);
            objCyberware.Suite = true;

            foreach (Weapon objWeapon in lstWeapons)
            {
                CharacterObject.Weapons.Add(objWeapon);
            }

            foreach (Vehicle objVehicle in lstVehicles)
            {
                CharacterObject.Vehicles.Add(objVehicle);
            }

            string strType = eSource == Improvement.ImprovementSource.Cyberware ? "cyberware" : "bioware";
            using (XmlNodeList xmlChildrenList = xmlSuiteNode.SelectNodes(strType + "s/" + strType))
            {
                if (xmlChildrenList?.Count > 0)
                {
                    XmlDocument objXmlDocument = CharacterObject.LoadData(strType + ".xml", token: token);
                    foreach (XmlNode objXmlChild in xmlChildrenList)
                    {
                        string strName = objXmlChild["name"]?.InnerText;
                        if (string.IsNullOrEmpty(strName))
                            continue;
                        XmlNode objXmlChildCyberware = objXmlDocument.TryGetNodeByNameOrId(
                            "/chummer/" + strType + "s/" + strType, strName);
                        int intChildRating
                            = Convert.ToInt32(objXmlChild["rating"]?.InnerText, GlobalSettings.InvariantCultureInfo);

                        objCyberware.Children.Add(CreateSuiteCyberware(objXmlChild, objXmlChildCyberware, objGrade,
                                                                       intChildRating, eSource, token));
                    }
                }
            }

            return objCyberware;
        }

        /// <summary>
        /// Add a PACKS Kit to the character.
        /// </summary>
        public async ValueTask<bool> AddPACKSKit(CancellationToken token = default)
        {
            XmlNode objXmlKit;
            bool blnAddAgain;
            using (ThreadSafeForm<SelectPACKSKit> frmPickPACKSKit = await ThreadSafeForm<SelectPACKSKit>
                                                                          .GetAsync(
                                                                              () => new SelectPACKSKit(CharacterObject),
                                                                              token).ConfigureAwait(false))
            {
                // If the form was canceled, don't do anything.
                if (await frmPickPACKSKit.ShowDialogSafeAsync(this, token).ConfigureAwait(false) == DialogResult.Cancel)
                    return false;

                // Do not create child items for Gear if the chosen Kit is in the Custom category since these items will contain the exact plugins desired.
                //if (frmPickPACKSKit.SelectedCategory == "Custom")
                //blnCreateChildren = false;

                objXmlKit
                    = (await CharacterObject.LoadDataAsync("packs.xml", token: token).ConfigureAwait(false))
                    .TryGetNodeByNameOrId("/chummer/packs/pack", frmPickPACKSKit.MyForm.SelectedKit,
                                          "category = " + SelectPACKSKit.SelectedCategory.CleanXPath());
                blnAddAgain = frmPickPACKSKit.MyForm.AddAgain;
            }

            if (objXmlKit == null)
                return false;
            const bool blnCreateChildren = true;
            // Update Qualities.
            XmlNode xmlQualities = objXmlKit["qualities"];
            if (xmlQualities != null)
            {
                XmlDocument xmlQualityDocument = await CharacterObject.LoadDataAsync("qualities.xml", token: token)
                                                                      .ConfigureAwait(false);

                // Positive and Negative Qualities.
                using (XmlNodeList xmlQualityList = xmlQualities.SelectNodes("*/quality"))
                {
                    if (xmlQualityList?.Count > 0)
                    {
                        foreach (XmlNode objXmlQuality in xmlQualityList)
                        {
                            XmlNode objXmlQualityNode = xmlQualityDocument.TryGetNodeByNameOrId(
                                "/chummer/qualities/quality", objXmlQuality.InnerText,
                                await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));

                            if (objXmlQualityNode == null)
                                continue;
                            List<Weapon> lstWeapons = new List<Weapon>(1);
                            Quality objQuality = new Quality(CharacterObject);
                            try
                            {
                                string strForceValue = objXmlQuality.Attributes?["select"]?.InnerText ?? string.Empty;

                                objQuality.Create(objXmlQualityNode, QualitySource.Selected, lstWeapons, strForceValue);

                                await CharacterObject.Qualities.AddAsync(objQuality, token).ConfigureAwait(false);

                                // Add any created Weapons to the character.
                                foreach (Weapon objWeapon in lstWeapons)
                                {
                                    await CharacterObject.Weapons.AddAsync(objWeapon, token).ConfigureAwait(false);
                                }
                            }
                            catch
                            {
                                await objQuality.DeleteQualityAsync(token: token).ConfigureAwait(false);
                                throw;
                            }
                        }
                    }
                }
            }

            //TODO: PACKS SKILLS?

            // Select a Martial Art.
            XmlNode xmlSelectMartialArt = objXmlKit["selectmartialart"];
            if (xmlSelectMartialArt != null)
            {
                string strForcedValue = xmlSelectMartialArt.Attributes?["select"]?.InnerText ?? string.Empty;

                using (ThreadSafeForm<SelectMartialArt> frmPickMartialArt = await ThreadSafeForm<SelectMartialArt>
                           .GetAsync(() => new SelectMartialArt(CharacterObject)
                           {
                               ForcedValue = strForcedValue
                           }, token).ConfigureAwait(false))
                {
                    if (await frmPickMartialArt.ShowDialogSafeAsync(this, token).ConfigureAwait(false)
                        != DialogResult.Cancel)
                    {
                        // Open the Martial Arts XML file and locate the selected piece.
                        XmlDocument objXmlMartialArtDocument = await CharacterObject
                                                                     .LoadDataAsync("martialarts.xml", token: token)
                                                                     .ConfigureAwait(false);

                        XmlNode objXmlArt = objXmlMartialArtDocument.TryGetNodeByNameOrId("/chummer/martialarts/martialart", frmPickMartialArt.MyForm.SelectedMartialArt);

                        MartialArt objMartialArt = new MartialArt(CharacterObject);
                        objMartialArt.Create(objXmlArt);
                        await CharacterObject.MartialArts.AddAsync(objMartialArt, token).ConfigureAwait(false);
                    }
                }
            }

            // Update Martial Arts.
            XmlNode xmlMartialArts = objXmlKit["martialarts"];
            if (xmlMartialArts != null)
            {
                // Open the Martial Arts XML file and locate the selected art.
                XmlDocument objXmlMartialArtDocument
                    = await CharacterObject.LoadDataAsync("martialarts.xml", token: token).ConfigureAwait(false);

                using (XmlNodeList xmlMartialArtsList = xmlMartialArts.SelectNodes("martialart"))
                {
                    if (xmlMartialArtsList?.Count > 0)
                    {
                        foreach (XmlNode objXmlArt in xmlMartialArtsList)
                        {
                            MartialArt objArt = new MartialArt(CharacterObject);
                            XmlNode objXmlArtNode = objXmlMartialArtDocument.TryGetNodeByNameOrId(
                                "/chummer/martialarts/martialart", objXmlArt["name"]?.InnerText,
                                await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                            if (objXmlArtNode == null)
                                continue;
                            objArt.Create(objXmlArtNode);
                            await CharacterObject.MartialArts.AddAsync(objArt, token).ConfigureAwait(false);

                            // Check for Techniques.
                            using (XmlNodeList xmlTechniquesList = objXmlArt.SelectNodes("techniques/technique"))
                            {
                                if (xmlTechniquesList?.Count > 0)
                                {
                                    foreach (XmlNode xmlTechnique in xmlTechniquesList)
                                    {
                                        MartialArtTechnique objTechnique = new MartialArtTechnique(CharacterObject);
                                        XmlNode xmlTechniqueNode = objXmlMartialArtDocument.TryGetNodeByNameOrId(
                                            "/chummer/techniques/technique", xmlTechnique["name"]?.InnerText,
                                            await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                                        objTechnique.Create(xmlTechniqueNode);
                                        await objArt.Techniques.AddAsync(objTechnique, token).ConfigureAwait(false);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            /*
            // Update Adept Powers.
            if (objXmlKit["powers"] != null)
            {
                // Open the Powers XML file and locate the selected power.
                XmlDocument objXmlPowerDocument = XmlManager.Load("powers.xml");

                foreach (XmlNode objXmlPower in objXmlKit.SelectNodes("powers/power"))
                {
                    //TODO: Fix
                }
            }
            */

            // Update Complex Forms.
            XmlNode xmlComplexForms = objXmlKit["complexforms"];
            if (xmlComplexForms != null)
            {
                // Open the Programs XML file and locate the selected program.
                XmlDocument objXmlComplexFormDocument
                    = await CharacterObject.LoadDataAsync("complexforms.xml", token: token).ConfigureAwait(false);
                using (XmlNodeList xmlComplexFormsList = xmlComplexForms.SelectNodes("complexform"))
                {
                    if (xmlComplexFormsList?.Count > 0)
                    {
                        foreach (XmlNode objXmlComplexForm in xmlComplexFormsList)
                        {
                            XmlNode objXmlComplexFormNode =
                                objXmlComplexFormDocument.TryGetNodeByNameOrId(
                                    "/chummer/complexforms/complexform", objXmlComplexForm["name"]?.InnerText,
                                    await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                            if (objXmlComplexFormNode != null)
                            {
                                ComplexForm objComplexForm = new ComplexForm(CharacterObject);
                                objComplexForm.Create(objXmlComplexFormNode);

                                await CharacterObject.ComplexForms.AddAsync(objComplexForm, token)
                                                     .ConfigureAwait(false);
                            }
                        }
                    }
                }
            }

            // Update AI Programs.
            XmlNode xmlPrograms = objXmlKit["programs"];
            if (xmlPrograms != null)
            {
                // Open the Programs XML file and locate the selected program.
                XmlDocument objXmlProgramDocument
                    = await CharacterObject.LoadDataAsync("programs.xml", token: token).ConfigureAwait(false);
                using (XmlNodeList xmlProgramsList = xmlPrograms.SelectNodes("program"))
                {
                    if (xmlProgramsList?.Count > 0)
                    {
                        foreach (XmlNode objXmlProgram in xmlProgramsList)
                        {
                            XmlNode objXmlProgramNode = objXmlProgramDocument.TryGetNodeByNameOrId(
                                "/chummer/programs/program", objXmlProgram["name"]?.InnerText,
                                await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                            if (objXmlProgramNode != null)
                            {
                                AIProgram objProgram = new AIProgram(CharacterObject);
                                objProgram.Create(objXmlProgramNode);

                                await CharacterObject.AIPrograms.AddAsync(objProgram, token).ConfigureAwait(false);
                            }
                        }
                    }
                }
            }

            // Update Spells.
            XmlNode xmlSpells = objXmlKit["spells"];
            if (xmlSpells != null)
            {
                XmlDocument objXmlSpellDocument
                    = await CharacterObject.LoadDataAsync("spells.xml", token: token).ConfigureAwait(false);
                using (XmlNodeList xmlSpellsList = xmlSpells.SelectNodes("spell"))
                {
                    if (xmlSpellsList?.Count > 0)
                    {
                        foreach (XmlNode objXmlSpell in xmlSpellsList)
                        {
                            string strCategory = objXmlSpell["category"]?.InnerText;
                            string strName = objXmlSpell["name"].InnerText;
                            // Make sure the Spell has not already been added to the character.
                            if (await CharacterObject.Spells.AnyAsync(x => x.Name == strName && x.Category == strCategory, token).ConfigureAwait(false))
                                continue;
                            XmlNode objXmlSpellNode = objXmlSpellDocument.TryGetNodeByNameOrId(
                                "/chummer/spells/spell", strName,
                                "category = " + strCategory.CleanXPath() + " and (" + await CharacterObjectSettings
                                    .BookXPathAsync(token: token).ConfigureAwait(false) + ')');

                            if (objXmlSpellNode == null)
                                continue;

                            Spell objSpell = new Spell(CharacterObject);
                            string strForceValue = objXmlSpell.Attributes?["select"]?.InnerText ?? string.Empty;
                            objSpell.Create(objXmlSpellNode, strForceValue);
                            await CharacterObject.Spells.AddAsync(objSpell, token).ConfigureAwait(false);
                        }
                    }
                }
            }

            // Update Spirits.
            XmlNode xmlSpirits = objXmlKit["spirits"];
            if (xmlSpirits != null)
            {
                using (XmlNodeList xmlSpiritsList = xmlSpirits.SelectNodes("spirit"))
                {
                    if (xmlSpiritsList?.Count > 0)
                    {
                        foreach (XmlNode objXmlSpirit in xmlSpiritsList)
                        {
                            Spirit objSpirit = new Spirit(CharacterObject)
                            {
                                EntityType = SpiritType.Spirit,
                                Name = objXmlSpirit["name"].InnerText,
                                Force =
                                    Convert.ToInt32(objXmlSpirit["force"].InnerText,
                                                    GlobalSettings.InvariantCultureInfo),
                                ServicesOwed = Convert.ToInt32(objXmlSpirit["services"].InnerText,
                                                               GlobalSettings.InvariantCultureInfo)
                            };
                            await CharacterObject.Spirits.AddAsync(objSpirit, token).ConfigureAwait(false);
                        }
                    }
                }
            }

            // Update Lifestyles.
            XmlNode xmlLifestyles = objXmlKit["lifestyles"];
            if (xmlLifestyles != null)
            {
                XmlDocument objXmlLifestyleDocument
                    = await CharacterObject.LoadDataAsync("lifestyles.xml", token: token).ConfigureAwait(false);

                foreach (XmlNode objXmlLifestyle in xmlLifestyles.SelectNodes("lifestyle"))
                {
                    // Create the Lifestyle.
                    XmlNode objXmlLifestyleNode = objXmlLifestyleDocument.TryGetNodeByNameOrId(
                        "/chummer/lifestyles/lifestyle", objXmlLifestyle["baselifestyle"].InnerText);
                    if (objXmlLifestyleNode == null)
                        continue;
                    Lifestyle objLifestyle = new Lifestyle(CharacterObject);
                    objLifestyle.Create(objXmlLifestyleNode);
                    // This is an Advanced Lifestyle, so build it manually.
                    objLifestyle.CustomName = objXmlLifestyle["name"]?.InnerText ?? string.Empty;
                    objLifestyle.Comforts
                        = Convert.ToInt32(objXmlLifestyle["comforts"]?.InnerText, GlobalSettings.InvariantCultureInfo);
                    objLifestyle.Security
                        = Convert.ToInt32(objXmlLifestyle["security"]?.InnerText, GlobalSettings.InvariantCultureInfo);
                    objLifestyle.Area
                        = Convert.ToInt32(objXmlLifestyle["area"]?.InnerText, GlobalSettings.InvariantCultureInfo);

                    foreach (XmlNode objXmlQuality in objXmlLifestyle.SelectNodes("qualities/quality"))
                    {
                        LifestyleQuality lq = new LifestyleQuality(CharacterObject);
                        lq.Create(objXmlQuality, objLifestyle, CharacterObject, QualitySource.Selected);
                        await objLifestyle.LifestyleQualities.AddAsync(lq, token).ConfigureAwait(false);
                    }

                    // Add the Lifestyle to the character and Lifestyle Tree.
                    await CharacterObject.Lifestyles.AddAsync(objLifestyle, token).ConfigureAwait(false);
                }
            }

            // Update NuyenBP.
            string strNuyenBP = objXmlKit["nuyenbp"]?.InnerText;
            if (!string.IsNullOrEmpty(strNuyenBP)
                && decimal.TryParse(strNuyenBP, NumberStyles.Any, GlobalSettings.InvariantCultureInfo,
                                    out decimal decAmount))
            {
                //if (_objCharacter.BuildMethod == CharacterBuildMethod.Karma)
                //decAmount *= 2;

                CharacterObject.NuyenBP += decAmount;
            }

            XmlDocument objXmlGearDocument
                = await CharacterObject.LoadDataAsync("gear.xml", token: token).ConfigureAwait(false);

            // Update Armor.
            XmlNode xmlArmors = objXmlKit["armors"];
            if (xmlArmors != null)
            {
                XmlDocument objXmlArmorDocument
                    = await CharacterObject.LoadDataAsync("armor.xml", token: token).ConfigureAwait(false);
                foreach (XmlNode objXmlArmor in xmlArmors.SelectNodes("armor"))
                {
                    XmlNode objXmlArmorNode = objXmlArmorDocument.TryGetNodeByNameOrId(
                        "/chummer/armors/armor", objXmlArmor["name"].InnerText, await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                    if (objXmlArmorNode == null)
                        continue;
                    Armor objArmor = new Armor(CharacterObject);
                    List<Weapon> lstWeapons = new List<Weapon>(1);

                    objArmor.Create(objXmlArmorNode,
                                    Convert.ToInt32(objXmlArmor["rating"]?.InnerText,
                                                    GlobalSettings.InvariantCultureInfo), lstWeapons, false,
                                    blnCreateChildren);
                    await CharacterObject.Armor.AddAsync(objArmor, token).ConfigureAwait(false);

                    // Look for Armor Mods.
                    foreach (XmlNode objXmlMod in objXmlArmor.SelectNodes("mods/mod"))
                    {
                        XmlNode objXmlModNode = objXmlArmorDocument.TryGetNodeByNameOrId(
                            "/chummer/mods/mod", objXmlMod["name"].InnerText, await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                        if (objXmlModNode != null)
                        {
                            ArmorMod objMod = new ArmorMod(CharacterObject);
                            int intRating = 0;
                            if (objXmlMod["rating"] != null)
                                intRating = Convert.ToInt32(objXmlMod["rating"].InnerText,
                                                            GlobalSettings.InvariantCultureInfo);
                            objMod.Create(objXmlModNode, intRating, lstWeapons);

                            foreach (XmlNode objXmlGear in objXmlArmor.SelectNodes("gears/gear"))
                                await AddPACKSGearAsync(objXmlGearDocument, objXmlGear, objMod, blnCreateChildren, token).ConfigureAwait(false);

                            await objArmor.ArmorMods.AddAsync(objMod, token).ConfigureAwait(false);
                        }
                    }

                    foreach (Weapon objWeapon in lstWeapons)
                    {
                        await CharacterObject.Weapons.AddAsync(objWeapon, token).ConfigureAwait(false);
                    }

                    foreach (XmlNode objXmlGear in objXmlArmor.SelectNodes("gears/gear"))
                        await AddPACKSGearAsync(objXmlGearDocument, objXmlGear, objArmor, blnCreateChildren, token).ConfigureAwait(false);
                }
            }

            // Update Weapons.
            XmlNode xmlWeapons = objXmlKit["weapons"];
            if (xmlWeapons != null)
            {
                XmlDocument objXmlWeaponDocument
                    = await CharacterObject.LoadDataAsync("weapons.xml", token: token).ConfigureAwait(false);

                XmlNodeList xmlWeaponsList = xmlWeapons.SelectNodes("weapon");
                await tsMain.DoThreadSafeAsync(() =>
                {
                    pgbProgress.Visible = true;
                    pgbProgress.Value = 0;
                    pgbProgress.Maximum = xmlWeaponsList.Count;
                }, token).ConfigureAwait(false);
                int i = 0;
                foreach (XmlNode objXmlWeapon in xmlWeaponsList)
                {
                    int i2 = ++i;
                    await tsMain.DoThreadSafeAsync(() => pgbProgress.Value = i2, token).ConfigureAwait(false);
                    Utils.DoEventsSafe();

                    XmlNode objXmlWeaponNode = objXmlWeaponDocument.TryGetNodeByNameOrId(
                        "/chummer/weapons/weapon", objXmlWeapon["name"].InnerText,
                        await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                    if (objXmlWeaponNode != null)
                    {
                        Weapon objWeapon = new Weapon(CharacterObject);
                        List<Weapon> lstWeapons = new List<Weapon>(1);
                        objWeapon.Create(objXmlWeaponNode, lstWeapons, blnCreateChildren);
                        await CharacterObject.Weapons.AddAsync(objWeapon, token).ConfigureAwait(false);

                        // Look for Weapon Accessories.
                        foreach (XmlNode objXmlAccessory in objXmlWeapon.SelectNodes("accessories/accessory"))
                        {
                            XmlNode objXmlAccessoryNode = objXmlWeaponDocument.TryGetNodeByNameOrId(
                                "/chummer/accessories/accessory", objXmlAccessory["name"].InnerText,
                                await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                            if (objXmlAccessoryNode == null)
                                continue;
                            WeaponAccessory objMod = new WeaponAccessory(CharacterObject);
                            string strMount = objXmlAccessory["mount"]?.InnerText ?? "Internal";
                            string strExtraMount = objXmlAccessory["extramount"]?.InnerText ?? "None";
                            objMod.Create(objXmlAccessoryNode, new Tuple<string, string>(strMount, strExtraMount), 0,
                                          false, blnCreateChildren);
                            objMod.Parent = objWeapon;

                            await objWeapon.WeaponAccessories.AddAsync(objMod, token).ConfigureAwait(false);

                            foreach (XmlNode objXmlGear in objXmlAccessory.SelectNodes("gears/gear"))
                                await AddPACKSGearAsync(objXmlGearDocument, objXmlGear, objMod, blnCreateChildren, token).ConfigureAwait(false);
                        }

                        // Look for an Underbarrel Weapon.
                        XmlNode xmlUnderbarrelNode = objXmlWeapon["underbarrel"];
                        if (xmlUnderbarrelNode != null)
                        {
                            XmlNode objXmlUnderbarrelNode = objXmlWeaponDocument.TryGetNodeByNameOrId(
                                "/chummer/weapons/weapon", objXmlWeapon["underbarrel"].InnerText,
                                await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                            if (objXmlUnderbarrelNode == null)
                            {
                                List<Weapon> lstLoopWeapons = new List<Weapon>(1);
                                Weapon objUnderbarrelWeapon = new Weapon(CharacterObject);
                                objUnderbarrelWeapon.Create(objXmlUnderbarrelNode, lstLoopWeapons, blnCreateChildren);
                                await objWeapon.UnderbarrelWeapons.AddAsync(objUnderbarrelWeapon, token)
                                               .ConfigureAwait(false);
                                if (!objWeapon.AllowAccessory)
                                    objUnderbarrelWeapon.AllowAccessory = false;

                                foreach (Weapon objLoopWeapon in lstLoopWeapons)
                                {
                                    if (!objWeapon.AllowAccessory)
                                        objLoopWeapon.AllowAccessory = false;
                                    await objWeapon.UnderbarrelWeapons.AddAsync(objLoopWeapon, token)
                                                   .ConfigureAwait(false);
                                }

                                foreach (XmlNode objXmlAccessory in xmlUnderbarrelNode.SelectNodes(
                                             "accessories/accessory"))
                                {
                                    XmlNode objXmlAccessoryNode =
                                        objXmlWeaponDocument.TryGetNodeByNameOrId(
                                            "/chummer/accessories/accessory", objXmlAccessory["name"].InnerText,
                                            await CharacterObjectSettings.BookXPathAsync(token: token)
                                                                         .ConfigureAwait(false));
                                    if (objXmlAccessoryNode == null)
                                        continue;
                                    WeaponAccessory objMod = new WeaponAccessory(CharacterObject);
                                    string strMount = objXmlAccessory["mount"]?.InnerText ?? "Internal";
                                    string strExtraMount = objXmlAccessory["extramount"]?.InnerText ?? "None";
                                    objMod.Create(objXmlAccessoryNode,
                                                  new Tuple<string, string>(strMount, strExtraMount), 0, false,
                                                  blnCreateChildren);
                                    objMod.Parent = objWeapon;

                                    await objUnderbarrelWeapon.WeaponAccessories.AddAsync(objMod, token)
                                                              .ConfigureAwait(false);

                                    foreach (XmlNode objXmlGear in objXmlAccessory.SelectNodes("gears/gear"))
                                        await AddPACKSGearAsync(objXmlGearDocument, objXmlGear, objMod, blnCreateChildren, token).ConfigureAwait(false);
                                }
                            }
                        }

                        foreach (Weapon objLoopWeapon in lstWeapons)
                        {
                            await CharacterObject.Weapons.AddAsync(objLoopWeapon, token).ConfigureAwait(false);
                        }
                    }

                    Utils.DoEventsSafe();
                }
            }

            XmlDocument objXmlCyberwareDocument
                = await CharacterObject.LoadDataAsync("cyberware.xml", token: token).ConfigureAwait(false);
            XmlDocument objXmlBiowareDocument
                = await CharacterObject.LoadDataAsync("bioware.xml", token: token).ConfigureAwait(false);

            // Update Cyberware.
            XmlNode xmlCyberwares = objXmlKit["cyberwares"];
            if (xmlCyberwares != null)
            {
                XmlNodeList xmlCyberwaresList = xmlCyberwares.SelectNodes("cyberware");
                await tsMain.DoThreadSafeAsync(() =>
                {
                    pgbProgress.Visible = true;
                    pgbProgress.Value = 0;
                    pgbProgress.Maximum = xmlCyberwaresList.Count;
                }, token).ConfigureAwait(false);
                int i = 0;
                foreach (XmlNode objXmlCyberware in xmlCyberwaresList)
                {
                    int i2 = ++i;
                    await tsMain.DoThreadSafeAsync(() => pgbProgress.Value = i2, token).ConfigureAwait(false);
                    Utils.DoEventsSafe();

                    await AddPACKSCyberwareAsync(objXmlCyberwareDocument, objXmlBiowareDocument, objXmlGearDocument,
                                                 objXmlCyberware, CharacterObject, blnCreateChildren, token).ConfigureAwait(false);

                    Utils.DoEventsSafe();
                }
            }

            // Update Bioware.
            XmlNode xmlBiowares = objXmlKit["biowares"];
            if (xmlBiowares != null)
            {
                XmlNodeList xmlBiowaresList = xmlBiowares.SelectNodes("bioware");
                await tsMain.DoThreadSafeAsync(() =>
                {
                    pgbProgress.Visible = true;
                    pgbProgress.Value = 0;
                    pgbProgress.Maximum = xmlBiowaresList.Count;
                }, token).ConfigureAwait(false);
                int i = 0;
                foreach (XmlNode objXmlBioware in xmlBiowaresList)
                {
                    int i2 = ++i;
                    await tsMain.DoThreadSafeAsync(() => pgbProgress.Value = i2, token).ConfigureAwait(false);
                    Utils.DoEventsSafe();

                    await AddPACKSCyberwareAsync(objXmlCyberwareDocument, objXmlBiowareDocument, objXmlGearDocument, objXmlBioware,
                                                 CharacterObject, blnCreateChildren, token).ConfigureAwait(false);

                    Utils.DoEventsSafe();
                }
            }

            // Update Gear.
            XmlNode xmlGears = objXmlKit["gears"];
            if (xmlGears != null)
            {
                XmlNodeList xmlGearsList = xmlGears.SelectNodes("gear");
                await tsMain.DoThreadSafeAsync(() =>
                {
                    pgbProgress.Visible = true;
                    pgbProgress.Value = 0;
                    pgbProgress.Maximum = xmlGearsList.Count;
                }, token).ConfigureAwait(false);
                int i = 0;
                foreach (XmlNode objXmlGear in xmlGearsList)
                {
                    int i2 = ++i;
                    await tsMain.DoThreadSafeAsync(() => pgbProgress.Value = i2, token).ConfigureAwait(false);
                    Utils.DoEventsSafe();

                    await AddPACKSGearAsync(objXmlGearDocument, objXmlGear, CharacterObject, blnCreateChildren, token).ConfigureAwait(false);

                    Utils.DoEventsSafe();
                }
            }

            // Update Vehicles.
            XmlNode xmlVehicles = objXmlKit["vehicles"];
            if (xmlVehicles != null)
            {
                XmlDocument objXmlVehicleDocument
                    = await CharacterObject.LoadDataAsync("vehicles.xml", token: token).ConfigureAwait(false);
                XmlNodeList xmlVehiclesList = xmlVehicles.SelectNodes("vehicle");
                await tsMain.DoThreadSafeAsync(() =>
                {
                    pgbProgress.Visible = true;
                    pgbProgress.Value = 0;
                    pgbProgress.Maximum = xmlVehiclesList.Count;
                }, token).ConfigureAwait(false);
                int i = 0;
                foreach (XmlNode objXmlVehicle in xmlVehiclesList)
                {
                    int i2 = ++i;
                    await tsMain.DoThreadSafeAsync(() => pgbProgress.Value = i2, token).ConfigureAwait(false);
                    Utils.DoEventsSafe();

                    Gear objDefaultSensor = null;

                    XmlNode objXmlVehicleNode = objXmlVehicleDocument.TryGetNodeByNameOrId(
                        "/chummer/vehicles/vehicle", objXmlVehicle["name"].InnerText,
                        await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                    if (objXmlVehicleNode == null)
                        continue;
                    Vehicle objVehicle = new Vehicle(CharacterObject);
                    objVehicle.Create(objXmlVehicleNode, blnCreateChildren: blnCreateChildren);
                    await CharacterObject.Vehicles.AddAsync(objVehicle, token).ConfigureAwait(false);

                    // Grab the default Sensor that comes with the Vehicle.
                    foreach (Gear objSensorGear in objVehicle.GearChildren)
                    {
                        if (objSensorGear.Category == "Sensors" && objSensorGear.Cost == "0"
                                                                && objSensorGear.Rating == 0)
                        {
                            objDefaultSensor = objSensorGear;
                            break;
                        }
                    }

                    // Add any Vehicle Mods.
                    foreach (XmlNode objXmlMod in objXmlVehicle.SelectNodes("mods/mod"))
                    {
                        XmlNode objXmlModNode = objXmlVehicleDocument.TryGetNodeByNameOrId(
                            "/chummer/mods/mod", objXmlMod["name"].InnerText, await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                        if (objXmlModNode == null)
                            continue;
                        int intRating = 0;
                        objXmlMod.TryGetInt32FieldQuickly("rating", ref intRating);
                        int intMarkup = 0;
                        objXmlMod.TryGetInt32FieldQuickly("markup", ref intMarkup);
                        VehicleMod objMod = new VehicleMod(CharacterObject);
                        objMod.Create(objXmlModNode, intRating, objVehicle, intMarkup);
                        await objVehicle.Mods.AddAsync(objMod, token).ConfigureAwait(false);

                        foreach (XmlNode objXmlCyberware in objXmlMod.SelectNodes("cyberwares/cyberware"))
                            await AddPACKSCyberwareAsync(objXmlCyberwareDocument, objXmlBiowareDocument, objXmlGearDocument,
                                                         objXmlCyberware, objMod, blnCreateChildren, token).ConfigureAwait(false);
                    }

                    // Add any Vehicle Gear.
                    foreach (XmlNode objXmlGear in objXmlVehicle.SelectNodes("gears/gear"))
                    {
                        Gear objGear = await AddPACKSGearAsync(objXmlGearDocument, objXmlGear, objVehicle, blnCreateChildren, token).ConfigureAwait(false);
                        // If this is a Sensor, it will replace the Vehicle's base sensor, so remove it.
                        if (objGear?.Category == "Sensors" && objGear.Cost == "0" && objGear.Rating == 0)
                        {
                            await objVehicle.GearChildren.RemoveAsync(objDefaultSensor, token).ConfigureAwait(false);
                        }
                    }

                    // Add any Vehicle Weapons.
                    if (objXmlVehicle["weapons"] != null)
                    {
                        XmlDocument objXmlWeaponDocument = await CharacterObject
                                                                 .LoadDataAsync("weapons.xml", token: token)
                                                                 .ConfigureAwait(false);

                        foreach (XmlNode objXmlWeapon in objXmlVehicle.SelectNodes("weapons/weapon"))
                        {
                            Weapon objWeapon = new Weapon(CharacterObject);

                            List<Weapon> lstSubWeapons = new List<Weapon>(1);
                            XmlNode objXmlWeaponNode = objXmlWeaponDocument.TryGetNodeByNameOrId(
                                "/chummer/weapons/weapon", objXmlWeapon["name"].InnerText,
                                await CharacterObjectSettings.BookXPathAsync(token: token)
                                                             .ConfigureAwait(false));
                            if (objXmlWeaponNode == null)
                                continue;
                            objWeapon.ParentVehicle = objVehicle;
                            objWeapon.Create(objXmlWeaponNode, lstSubWeapons, blnCreateChildren);

                            // Find the first Weapon Mount in the Vehicle.
                            foreach (VehicleMod objMod in objVehicle.Mods)
                            {
                                if (objMod.Name.Contains("Weapon Mount")
                                    || !string.IsNullOrEmpty(objMod.WeaponMountCategories)
                                    && objMod.WeaponMountCategories.Contains(objWeapon.Category))
                                {
                                    await objMod.Weapons.AddAsync(objWeapon, token).ConfigureAwait(false);
                                    foreach (Weapon objSubWeapon in lstSubWeapons)
                                        await objMod.Weapons.AddAsync(objSubWeapon, token).ConfigureAwait(false);
                                    break;
                                }
                            }

                            // Look for Weapon Accessories.
                            foreach (XmlNode objXmlAccessory in objXmlWeapon.SelectNodes("accessories/accessory"))
                            {
                                XmlNode objXmlAccessoryNode =
                                    objXmlWeaponDocument.TryGetNodeByNameOrId(
                                        "/chummer/accessories/accessory", objXmlAccessory["name"].InnerText,
                                        await CharacterObjectSettings.BookXPathAsync(token: token)
                                                                     .ConfigureAwait(false));
                                if (objXmlAccessoryNode == null)
                                    continue;
                                WeaponAccessory objMod = new WeaponAccessory(CharacterObject);
                                string strMount = objXmlAccessory["mount"]?.InnerText ?? "Internal";
                                string strExtraMount = objXmlAccessory["extramount"]?.InnerText ?? "None";
                                objMod.Create(objXmlAccessoryNode, new Tuple<string, string>(strMount, strExtraMount),
                                              0, false, blnCreateChildren);
                                objMod.Parent = objWeapon;

                                await objWeapon.WeaponAccessories.AddAsync(objMod, token).ConfigureAwait(false);
                            }

                            // Look for an Underbarrel Weapon.
                            XmlNode xmlUnderbarrelNode = objXmlWeapon["underbarrel"];
                            if (xmlUnderbarrelNode != null)
                            {
                                XmlNode objXmlUnderbarrelNode =
                                    objXmlWeaponDocument.TryGetNodeByNameOrId(
                                        "/chummer/weapons/weapon", objXmlWeapon["underbarrel"].InnerText,
                                        await CharacterObjectSettings.BookXPathAsync(token: token)
                                                                     .ConfigureAwait(false));
                                if (objXmlUnderbarrelNode != null)
                                {
                                    List<Weapon> lstLoopWeapons = new List<Weapon>(1);
                                    Weapon objUnderbarrelWeapon = new Weapon(CharacterObject);
                                    objUnderbarrelWeapon.Create(objXmlUnderbarrelNode, lstLoopWeapons,
                                                                blnCreateChildren);
                                    await objWeapon.UnderbarrelWeapons.AddAsync(objUnderbarrelWeapon, token)
                                                   .ConfigureAwait(false);
                                    if (!objWeapon.AllowAccessory)
                                        objUnderbarrelWeapon.AllowAccessory = false;

                                    foreach (Weapon objLoopWeapon in lstLoopWeapons)
                                    {
                                        if (!objWeapon.AllowAccessory)
                                            objLoopWeapon.AllowAccessory = false;
                                        await objWeapon.UnderbarrelWeapons.AddAsync(objLoopWeapon, token)
                                                       .ConfigureAwait(false);
                                    }

                                    foreach (XmlNode objXmlAccessory in xmlUnderbarrelNode.SelectNodes(
                                                 "accessories/accessory"))
                                    {
                                        XmlNode objXmlAccessoryNode = objXmlWeaponDocument.TryGetNodeByNameOrId(
                                            "/chummer/accessories/accessory", objXmlAccessory["name"].InnerText,
                                            await CharacterObjectSettings.BookXPathAsync(token: token)
                                                                         .ConfigureAwait(false));
                                        if (objXmlAccessoryNode == null)
                                            continue;
                                        WeaponAccessory objMod = new WeaponAccessory(CharacterObject);
                                        string strMount = objXmlAccessory["mount"]?.InnerText ?? "Internal";
                                        string strExtraMount = objXmlAccessory["extramount"]?.InnerText ?? "None";
                                        objMod.Create(objXmlAccessoryNode,
                                                      new Tuple<string, string>(strMount, strExtraMount), 0, false,
                                                      blnCreateChildren);
                                        objMod.Parent = objWeapon;

                                        await objUnderbarrelWeapon.WeaponAccessories.AddAsync(objMod, token)
                                                                  .ConfigureAwait(false);

                                        foreach (XmlNode objXmlGear in objXmlAccessory.SelectNodes("gears/gear"))
                                            await AddPACKSGearAsync(objXmlGearDocument, objXmlGear, objMod, blnCreateChildren, token).ConfigureAwait(false);
                                    }
                                }
                            }
                        }
                    }

                    Utils.DoEventsSafe();
                }
            }

            await tsMain.DoThreadSafeAsync(() => pgbProgress.Visible = false, token).ConfigureAwait(false);

            return blnAddAgain;
        }

        /// <summary>
        /// Create a PACKS Kit from the character.
        /// </summary>
        public async ValueTask CreatePACKSKit(CancellationToken token = default)
        {
            using (ThreadSafeForm<CreatePACKSKit> frmBuildPACKSKit = await ThreadSafeForm<CreatePACKSKit>
                                                                           .GetAsync(
                                                                               () => new CreatePACKSKit(
                                                                                   CharacterObject), token)
                                                                           .ConfigureAwait(false))
                await frmBuildPACKSKit.ShowDialogSafeAsync(this, token).ConfigureAwait(false);
        }

        /// <summary>
        /// Update the karma cost tooltip for Initiation/Submersion.
        /// </summary>
        private async Task UpdateInitiationCost(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            decimal decMultiplier = 1.0m;
            int intAmount;
            string strInitTip;
            if (CharacterObject.MAGEnabled)
            {
                if (await chkInitiationGroup.DoThreadSafeFuncAsync(x => x.Checked, token).ConfigureAwait(false))
                    decMultiplier -= CharacterObjectSettings.KarmaMAGInitiationGroupPercent;
                if (await chkInitiationOrdeal.DoThreadSafeFuncAsync(x => x.Checked, token).ConfigureAwait(false))
                    decMultiplier -= CharacterObjectSettings.KarmaMAGInitiationOrdealPercent;
                if (await chkInitiationSchooling.DoThreadSafeFuncAsync(x => x.Checked, token).ConfigureAwait(false))
                    decMultiplier -= CharacterObjectSettings.KarmaMAGInitiationSchoolingPercent;
                intAmount = ((CharacterObjectSettings.KarmaInitiationFlat
                              + (CharacterObject.InitiateGrade + 1) * CharacterObjectSettings.KarmaInitiation)
                             * decMultiplier).StandardRound();
                token.ThrowIfCancellationRequested();
                strInitTip = string.Format(GlobalSettings.CultureInfo,
                                           await LanguageManager
                                                 .GetStringAsync("Tip_ImproveInitiateGrade", token: token)
                                                 .ConfigureAwait(false),
                                           (CharacterObject.InitiateGrade + 1).ToString(GlobalSettings.CultureInfo),
                                           intAmount.ToString(GlobalSettings.CultureInfo));
            }
            else
            {
                if (await chkInitiationGroup.DoThreadSafeFuncAsync(x => x.Checked, token).ConfigureAwait(false))
                    decMultiplier -= CharacterObjectSettings.KarmaRESInitiationGroupPercent;
                if (await chkInitiationOrdeal.DoThreadSafeFuncAsync(x => x.Checked, token).ConfigureAwait(false))
                    decMultiplier -= CharacterObjectSettings.KarmaRESInitiationOrdealPercent;
                if (await chkInitiationSchooling.DoThreadSafeFuncAsync(x => x.Checked, token).ConfigureAwait(false))
                    decMultiplier -= CharacterObjectSettings.KarmaRESInitiationSchoolingPercent;
                intAmount = ((CharacterObjectSettings.KarmaInitiationFlat
                              + (CharacterObject.SubmersionGrade + 1) * CharacterObjectSettings.KarmaInitiation)
                             * decMultiplier).StandardRound();
                token.ThrowIfCancellationRequested();
                strInitTip = string.Format(GlobalSettings.CultureInfo,
                                           await LanguageManager
                                                 .GetStringAsync("Tip_ImproveSubmersionGrade", token: token)
                                                 .ConfigureAwait(false),
                                           (CharacterObject.SubmersionGrade + 1).ToString(GlobalSettings.CultureInfo),
                                           intAmount.ToString(GlobalSettings.CultureInfo));
            }

            token.ThrowIfCancellationRequested();
            await cmdAddMetamagic.SetToolTipAsync(strInitTip, token).ConfigureAwait(false);
        }

        /// <summary>
        /// Change the character's Metatype or priority selection.
        /// </summary>
        public async ValueTask ChangeMetatype(CancellationToken token = default)
        {
            if (CharacterObject.EffectiveBuildMethodUsesPriorityTables)
            {
                using (ThreadSafeForm<SelectMetatypePriority> frmSelectMetatype
                       = await ThreadSafeForm<SelectMetatypePriority>
                               .GetAsync(() => new SelectMetatypePriority(CharacterObject), token)
                               .ConfigureAwait(false))
                {
                    if (await frmSelectMetatype.ShowDialogSafeAsync(this, token).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;
                }
            }
            else
            {
                using (ThreadSafeForm<SelectMetatypeKarma> frmSelectMetatype = await ThreadSafeForm<SelectMetatypeKarma>
                           .GetAsync(() => new SelectMetatypeKarma(CharacterObject), token).ConfigureAwait(false))
                {
                    if (await frmSelectMetatype.ShowDialogSafeAsync(this, token).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;
                }
            }

            await RequestCharacterUpdate(token).ConfigureAwait(false);
            await SetDirty(true, token).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a Cyberware Suite from the Cyberware the character currently has.
        /// </summary>
        private async ValueTask CreateCyberwareSuite(Improvement.ImprovementSource objSource,
                                                     CancellationToken token = default)
        {
            // Make sure all of the Cyberware the character has is of the same grade.
            string strGrade = string.Empty;
            bool blnReturn = false;
            await CharacterObject.Cyberware.ForEachWithBreakAsync(async objCyberware =>
            {
                if (objCyberware.SourceType == objSource)
                {
                    if (string.IsNullOrEmpty(strGrade))
                        strGrade = objCyberware.Grade.ToString();
                    else if (strGrade != objCyberware.Grade.ToString())
                    {
                        Program.ShowScrollableMessageBox(
                            this,
                            await LanguageManager.GetStringAsync("Message_CyberwareGradeMismatch", token: token)
                                                 .ConfigureAwait(false),
                            await LanguageManager.GetStringAsync("MessageTitle_CyberwareGradeMismatch", token: token)
                                                 .ConfigureAwait(false), MessageBoxButtons.OK, MessageBoxIcon.Error);
                        blnReturn = true;
                        return false;
                    }
                }

                return true;
            }, token).ConfigureAwait(false);
            if (blnReturn)
                return;

            // The character has no Cyberware!
            if (string.IsNullOrEmpty(strGrade))
            {
                Program.ShowScrollableMessageBox(
                    this,
                    await LanguageManager.GetStringAsync("Message_NoCyberware", token: token).ConfigureAwait(false),
                    await LanguageManager.GetStringAsync("MessageTitle_NoCyberware", token: token)
                                         .ConfigureAwait(false), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            using (ThreadSafeForm<CreateCyberwareSuite> frmBuildCyberwareSuite
                   = await ThreadSafeForm<CreateCyberwareSuite>
                           .GetAsync(() => new CreateCyberwareSuite(CharacterObject, objSource), token)
                           .ConfigureAwait(false))
                await frmBuildCyberwareSuite.ShowDialogSafeAsync(this, token).ConfigureAwait(false);
        }

        /// <summary>
        /// Set the ToolTips from the Language file.
        /// </summary>
        private async ValueTask SetTooltips(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            // Common Tab.
            await lblAttributes
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_CommonAttributes", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblAttributesBase
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_CommonAttributesBase", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblAttributesAug
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_CommonAttributesAug", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblAttributesMetatype
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_CommonAttributesMetatypeLimits", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblNuyen.SetToolTipAsync(string.Format(GlobalSettings.CultureInfo,
                                                         await LanguageManager
                                                               .GetStringAsync("Tip_CommonNuyen", token: token)
                                                               .ConfigureAwait(false),
                                                         (await CharacterObjectSettings
                                                                .GetChargenKarmaToNuyenExpressionAsync(token)
                                                                .ConfigureAwait(false))
                                                         .Replace("{Karma}",
                                                                  await LanguageManager
                                                                        .GetStringAsync("String_Karma", token: token)
                                                                        .ConfigureAwait(false))
                                                         .Replace("{PriorityNuyen}",
                                                                  await LanguageManager
                                                                        .GetStringAsync(
                                                                            "Checkbox_CreatePACKSKit_StartingNuyen",
                                                                            token: token).ConfigureAwait(false))),
                                           token).ConfigureAwait(false);
            // Armor Tab.
            await chkArmorEquipped
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_ArmorEquipped", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            // Gear Tab.
            await chkGearActiveCommlink
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_ActiveCommlink", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await chkCyberwareActiveCommlink
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_ActiveCommlink", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            // Vehicles Tab.
            await chkVehicleWeaponAccessoryInstalled
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_WeaponInstalled", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await chkVehicleActiveCommlink
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_ActiveCommlink", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblVehiclePowertrainLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_TotalVehicleModCapacity", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblVehicleCosmeticLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_TotalVehicleModCapacity", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblVehicleElectromagneticLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_TotalVehicleModCapacity", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblVehicleBodymodLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_TotalVehicleModCapacity", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblVehicleWeaponsmodLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_TotalVehicleModCapacity", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblVehicleProtectionLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_TotalVehicleModCapacity", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            // Character Info Tab.
            await chkCharacterCreated
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_CharacterCreated", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            // Build Point Summary Tab.
            await lblBuildPrimaryAttributes
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_CommonAttributes", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblBuildPositiveQualities
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_BuildPositiveQualities", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblBuildNegativeQualities
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_BuildNegativeQualities", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblBuildContacts.SetToolTipAsync(string.Format(GlobalSettings.CultureInfo,
                                                                 await LanguageManager
                                                                       .GetStringAsync(
                                                                           "Tip_CommonContacts", token: token)
                                                                       .ConfigureAwait(false),
                                                                 CharacterObjectSettings.KarmaContact.ToString(
                                                                     GlobalSettings.CultureInfo)), token)
                                  .ConfigureAwait(false);
            await lblBuildEnemies
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_CommonEnemies", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblBuildNuyen.SetToolTipAsync(string.Format(GlobalSettings.CultureInfo,
                                                              await LanguageManager
                                                                    .GetStringAsync("Tip_CommonNuyen", token: token)
                                                                    .ConfigureAwait(false),
                                                              (await CharacterObjectSettings
                                                                     .GetChargenKarmaToNuyenExpressionAsync(token)
                                                                     .ConfigureAwait(false))
                                                              .Replace("{Karma}",
                                                                       await LanguageManager
                                                                             .GetStringAsync(
                                                                                 "String_Karma", token: token)
                                                                             .ConfigureAwait(false))
                                                              .Replace("{PriorityNuyen}",
                                                                       await LanguageManager
                                                                             .GetStringAsync(
                                                                                 "Checkbox_CreatePACKSKit_StartingNuyen",
                                                                                 token: token).ConfigureAwait(false))),
                                                token).ConfigureAwait(false);
            await lblBuildSkillGroups.SetToolTipAsync(
                string.Format(GlobalSettings.CultureInfo,
                              await LanguageManager.GetStringAsync("Tip_SkillsSkillGroups", token: token)
                                                   .ConfigureAwait(false),
                              CharacterObjectSettings.KarmaImproveSkillGroup.ToString(GlobalSettings.CultureInfo)),
                token).ConfigureAwait(false);
            await lblBuildActiveSkills.SetToolTipAsync(
                                          string.Format(GlobalSettings.CultureInfo,
                                                        await LanguageManager
                                                              .GetStringAsync("Tip_SkillsActiveSkills", token: token)
                                                              .ConfigureAwait(false),
                                                        CharacterObjectSettings.KarmaImproveActiveSkill.ToString(
                                                            GlobalSettings.CultureInfo),
                                                        CharacterObjectSettings.KarmaSpecialization.ToString(
                                                            GlobalSettings.CultureInfo)), token)
                                      .ConfigureAwait(false);
            await lblBuildKnowledgeSkills.SetToolTipAsync(
                                             string.Format(GlobalSettings.CultureInfo,
                                                           await LanguageManager
                                                                 .GetStringAsync("Tip_SkillsKnowledgeSkills",
                                                                     token: token)
                                                                 .ConfigureAwait(false),
                                                           CharacterObjectSettings.KarmaImproveKnowledgeSkill.ToString(
                                                               GlobalSettings.CultureInfo),
                                                           CharacterObjectSettings.KarmaKnowledgeSpecialization
                                                               .ToString(GlobalSettings.CultureInfo)), token)
                                         .ConfigureAwait(false);
            await lblBuildSpells.SetToolTipAsync(
                                    string.Format(GlobalSettings.CultureInfo,
                                                  await LanguageManager
                                                        .GetStringAsync("Tip_SpellsSelectedSpells", token: token)
                                                        .ConfigureAwait(false),
                                                  CharacterObjectSettings.KarmaSpell.ToString(
                                                      GlobalSettings.CultureInfo)), token)
                                .ConfigureAwait(false);
            await lblBuildSpirits.SetToolTipAsync(
                                     string.Format(GlobalSettings.CultureInfo,
                                                   await LanguageManager
                                                         .GetStringAsync("Tip_SpellsSpirits", token: token)
                                                         .ConfigureAwait(false),
                                                   CharacterObjectSettings.KarmaSpirit.ToString(GlobalSettings
                                                       .CultureInfo)), token)
                                 .ConfigureAwait(false);
            await lblBuildSprites.SetToolTipAsync(
                                     string.Format(GlobalSettings.CultureInfo,
                                                   await LanguageManager
                                                         .GetStringAsync("Tip_TechnomancerSprites", token: token)
                                                         .ConfigureAwait(false),
                                                   CharacterObjectSettings.KarmaSpirit.ToString(GlobalSettings
                                                       .CultureInfo)), token)
                                 .ConfigureAwait(false);
            await lblBuildComplexForms.SetToolTipAsync(
                                          string.Format(GlobalSettings.CultureInfo,
                                                        await LanguageManager
                                                              .GetStringAsync(
                                                                  "Tip_TechnomancerComplexForms", token: token)
                                                              .ConfigureAwait(false),
                                                        CharacterObjectSettings.KarmaNewComplexForm.ToString(
                                                            GlobalSettings.CultureInfo)), token)
                                      .ConfigureAwait(false);
            // Other Info Tab.
            await lblCMPhysicalLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherCMPhysical", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblCMStunLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherCMStun", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblINILabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherInitiative", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblMatrixINILabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherMatrixInitiative", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblAstralINILabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherAstralInitiative", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblArmorLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherArmor", token: token).ConfigureAwait(false), token)
                  .ConfigureAwait(false);
            await lblESS
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherEssence", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblRemainingNuyenLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherNuyen", token: token).ConfigureAwait(false), token)
                  .ConfigureAwait(false);
            await lblMovementLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherMovement", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblSwimLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherSwim", token: token).ConfigureAwait(false), token)
                  .ConfigureAwait(false);
            await lblFlyLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherFly", token: token).ConfigureAwait(false), token)
                  .ConfigureAwait(false);
            await lblLiftCarryLimitsLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherLiftAndCarryLimits", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblComposureLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherComposure", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblSurpriseLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherSurprise", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblJudgeIntentionsLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherJudgeIntentions", token: token)
                                           .ConfigureAwait(false), token).ConfigureAwait(false);
            await lblLiftCarryLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherLiftAndCarry", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
            await lblMemoryLabel
                  .SetToolTipAsync(
                      await LanguageManager.GetStringAsync("Tip_OtherMemory", token: token).ConfigureAwait(false),
                      token).ConfigureAwait(false);
        }

        /// <summary>
        /// Recheck all mods to see if Sensor has changed.
        /// </summary>
        private async ValueTask UpdateSensor(Vehicle objVehicle, CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            foreach (Gear objGear in objVehicle.GearChildren)
            {
                if (objGear.Category != "Sensors" || objGear.Name != "Sensor Array" || !objGear.IncludedInParent)
                    continue;
                token.ThrowIfCancellationRequested();
                // Update the name of the item in the TreeView.
                TreeNode objNode = treVehicles.FindNode(objGear.InternalId);
                if (objNode != null)
                {
                    string strText = await objGear.GetCurrentDisplayNameAsync(token).ConfigureAwait(false);
                    await treVehicles.DoThreadSafeAsync(() => objNode.Text = strText, token).ConfigureAwait(false);
                    token.ThrowIfCancellationRequested();
                }
            }
        }

        /// <summary>
        /// Enable/Disable the Paste Menu and ToolStrip items as appropriate.
        /// </summary>
        private async void RefreshPasteStatus(object sender, EventArgs e)
        {
            try
            {
                await DoRefreshPasteStatus(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async ValueTask DoRefreshPasteStatus(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();

            bool blnPasteEnabled = false;
            bool blnCopyEnabled = false;

            TabPage objSelectedCharacterTab = await tabCharacterTabs.DoThreadSafeFuncAsync(x => x.SelectedTab, token)
                                                                    .ConfigureAwait(false);
            if (objSelectedCharacterTab == tabStreetGear)
            {
                TabPage objSelectedGearTabPage
                    = await tabStreetGearTabs.DoThreadSafeFuncAsync(x => x.SelectedTab, token).ConfigureAwait(false);
                // Lifestyle Tab.
                if (objSelectedGearTabPage == tabLifestyle)
                {
                    blnPasteEnabled = GlobalSettings.ClipboardContentType == ClipboardContentType.Lifestyle;
                    blnCopyEnabled = await treLifestyles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token)
                                                        .ConfigureAwait(false) is Lifestyle;
                }
                // Armor Tab.
                else if (objSelectedGearTabPage == tabArmor)
                {
                    if (await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token).ConfigureAwait(false) is
                        IHasInternalId
                        strSelectedId)
                    {
                        blnPasteEnabled = GlobalSettings.ClipboardContentType == ClipboardContentType.Armor ||
                                          GlobalSettings.ClipboardContentType == ClipboardContentType.Gear
                                          && (await CharacterObject.Armor
                                                                   .AnyAsync(
                                                                       x => x.InternalId == strSelectedId.InternalId,
                                                                       token).ConfigureAwait(false)
                                              ||
                                              CharacterObject.Armor.FindArmorMod(strSelectedId.InternalId) != null ||
                                              CharacterObject.Armor.FindArmorGear(strSelectedId.InternalId) != null);
                        blnCopyEnabled = await CharacterObject.Armor
                                                              .AnyAsync(x => x.InternalId == strSelectedId.InternalId,
                                                                        token).ConfigureAwait(false)
                                         || CharacterObject.Armor.FindArmorGear(strSelectedId.InternalId) != null;
                    }
                }
                // Weapons Tab.
                else if (objSelectedGearTabPage == tabWeapons)
                {
                    if (await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token).ConfigureAwait(false) is
                        IHasInternalId objSelected)
                    {
                        switch (GlobalSettings.ClipboardContentType)
                        {
                            case ClipboardContentType.Weapon:
                                blnPasteEnabled = true;
                                break;

                            case ClipboardContentType.Gear:
                            case ClipboardContentType.WeaponAccessory:
                                blnPasteEnabled = objSelected is ICanPaste objCanPaste && objCanPaste.AllowPasteXml;
                                break;
                        }

                        //TODO: ICanCopy interface? If weapon comes from something else == false, etc.
                        blnCopyEnabled = objSelected is Weapon || objSelected is Gear;
                    }
                }
                // Gear Tab.
                else if (objSelectedGearTabPage == tabGear
                         && await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token)
                                         .ConfigureAwait(false) is IHasInternalId
                             objSelected)
                {
                    blnPasteEnabled = GlobalSettings.ClipboardContentType == ClipboardContentType.Gear;
                    blnCopyEnabled = objSelected is Gear;
                }
            }
            // Cyberware Tab.
            else if (objSelectedCharacterTab == tabCyberware)
            {
                if (await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token).ConfigureAwait(false) is
                    IHasInternalId
                    objSelected)
                {
                    blnPasteEnabled = objSelected is ICanPaste selected && selected.AllowPasteXml
                                      || GlobalSettings.ClipboardContentType == ClipboardContentType.Cyberware;
                    blnCopyEnabled = objSelected is Gear || objSelected is Cyberware;
                }
            }
            // Vehicles Tab.
            else if (objSelectedCharacterTab == tabVehicles
                     && await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token)
                                         .ConfigureAwait(false) is IHasInternalId
                         objSelected)
            {
                switch (GlobalSettings.ClipboardContentType)
                {
                    case ClipboardContentType.Vehicle:
                        blnPasteEnabled = true;
                        break;

                    case ClipboardContentType.Gear:
                    case ClipboardContentType.Weapon:
                    case ClipboardContentType.WeaponAccessory:
                    {
                        blnPasteEnabled = objSelected is ICanPaste selected && selected.AllowPasteXml;
                    }
                        break;
                }

                // In theory any object that's not a generic string node is valid to copy here. Locations might go screwy?
                blnCopyEnabled = true;
            }

            await mnuCreateMenu.DoThreadSafeAsync(() =>
            {
                mnuEditPaste.Enabled = blnPasteEnabled;
                mnuEditCopy.Enabled = blnCopyEnabled;
            }, token).ConfigureAwait(false);
            await tsMain.DoThreadSafeAsync(() =>
            {
                tsbPaste.Enabled = blnPasteEnabled;
                tsbCopy.Enabled = blnCopyEnabled;
            }, token).ConfigureAwait(false);
        }

        private async ValueTask AddCyberwareSuite(Improvement.ImprovementSource objSource,
                                                  CancellationToken token = default)
        {
            using (ThreadSafeForm<SelectCyberwareSuite> frmPickCyberwareSuite
                   = await ThreadSafeForm<SelectCyberwareSuite>
                           .GetAsync(() => new SelectCyberwareSuite(CharacterObject, objSource), token)
                           .ConfigureAwait(false))
            {
                if (await frmPickCyberwareSuite.ShowDialogSafeAsync(this, token).ConfigureAwait(false)
                    == DialogResult.Cancel)
                    return;

                string strType = objSource == Improvement.ImprovementSource.Cyberware ? "cyberware" : "bioware";
                XmlDocument objXmlDocument = await CharacterObject
                                                   .LoadDataAsync(strType + ".xml", string.Empty, true, token)
                                                   .ConfigureAwait(false);
                XmlNode xmlSuite = objXmlDocument.TryGetNodeByNameOrId("/chummer/suites/suite", frmPickCyberwareSuite.MyForm.SelectedSuite);
                if (xmlSuite == null)
                    return;
                Grade objGrade
                    = Grade.ConvertToCyberwareGrade(xmlSuite["grade"]?.InnerText, objSource, CharacterObject);

                string strXPathPrefix = strType + "s/" + strType;
                // Run through each of the items in the Suite and add them to the character.
                using (XmlNodeList xmlItemList = xmlSuite.SelectNodes(strXPathPrefix))
                {
                    if (xmlItemList?.Count > 0)
                    {
                        foreach (XmlNode xmlItem in xmlItemList)
                        {
                            string strName = xmlItem["name"]?.InnerText;
                            if (string.IsNullOrEmpty(strName))
                                continue;
                            XmlNode objXmlCyberware
                                = objXmlDocument.TryGetNodeByNameOrId(
                                    "/chummer/" + strXPathPrefix, strName);
                            int intRating
                                = Convert.ToInt32(xmlItem["rating"]?.InnerText, GlobalSettings.InvariantCultureInfo);

                            Cyberware objCyberware
                                = CreateSuiteCyberware(xmlItem, objXmlCyberware, objGrade, intRating, objSource, token);
                            await CharacterObject.Cyberware.AddAsync(objCyberware, token).ConfigureAwait(false);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Add a piece of Gear that was found in a PACKS Kit.
        /// </summary>
        /// <param name="objXmlGearDocument">XmlDocument that contains the Gear.</param>
        /// <param name="objXmlGear">XmlNode of the Gear to add.</param>
        /// <param name="objParentObject">Object to associate the newly-created items with.</param>
        /// <param name="blnCreateChildren">Whether or not the default plugins for the Gear should be created.</param>
        /// <param name="token">Cancellation token to listen to.</param>
        private async ValueTask<Gear> AddPACKSGearAsync(XmlDocument objXmlGearDocument, XmlNode objXmlGear, object objParentObject,
                                  bool blnCreateChildren, CancellationToken token = default)
        {
            XmlNode objXmlGearNode = null;
            string strName = objXmlGear["name"]?.InnerText;
            if (!string.IsNullOrEmpty(strName))
            {
                string strCategory = objXmlGear["category"]?.InnerText;
                if (!string.IsNullOrEmpty(strCategory))
                    objXmlGearNode = objXmlGearDocument.TryGetNodeByNameOrId(
                        "/chummer/gears/gear", strName.CleanXPath(),
                        '(' + await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false)
                            + ") and category = " + strCategory.CleanXPath());
                else
                    objXmlGearNode = objXmlGearDocument.TryGetNodeByNameOrId(
                        "/chummer/gears/gear", strName.CleanXPath(),
                        await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
            }

            if (objXmlGearNode == null)
                return null;

            int intRating = Convert.ToInt32(objXmlGear["rating"]?.InnerText, GlobalSettings.InvariantCultureInfo);
            decimal decQty = 1;
            string strQty = objXmlGear["qty"]?.InnerText;
            if (!string.IsNullOrEmpty(strQty))
                decQty = Convert.ToDecimal(strQty, GlobalSettings.InvariantCultureInfo);

            List<Weapon> lstWeapons = new List<Weapon>(1);
            string strForceValue = (await objXmlGear.SelectSingleNodeAndCacheExpressionAsNavigatorAsync("name/@select", token).ConfigureAwait(false))?.Value ?? string.Empty;
            Gear objNewGear = new Gear(CharacterObject);
            try
            {
                try
                {
                    objNewGear.Create(objXmlGearNode, intRating, lstWeapons, strForceValue, true, blnCreateChildren);
                    objNewGear.Quantity = decQty;

                    switch (objParentObject)
                    {
                        case Character objParentCharacter:
                            await objParentCharacter.Gear.AddAsync(objNewGear, token).ConfigureAwait(false);
                            break;

                        case Gear objParentGear:
                            await objParentGear.Children.AddAsync(objNewGear, token).ConfigureAwait(false);
                            break;

                        case Armor objParentArmor:
                            await objParentArmor.GearChildren.AddAsync(objNewGear, token).ConfigureAwait(false);
                            break;

                        case ArmorMod objParentArmorMod:
                            await objParentArmorMod.GearChildren.AddAsync(objNewGear, token).ConfigureAwait(false);
                            break;

                        case WeaponAccessory objParentWeaponAccessory:
                            await objParentWeaponAccessory.GearChildren.AddAsync(objNewGear, token)
                                                          .ConfigureAwait(false);
                            break;

                        case Cyberware objParentCyberware:
                            await objParentCyberware.GearChildren.AddAsync(objNewGear, token).ConfigureAwait(false);
                            break;

                        case Vehicle objParentVehicle:
                            objNewGear.Parent = objParentVehicle;
                            await objParentVehicle.GearChildren.AddAsync(objNewGear, token).ConfigureAwait(false);
                            break;
                    }

                    // Look for child components.
                    using (XmlNodeList xmlChildrenList = objXmlGear.SelectNodes("gears/gear"))
                    {
                        if (xmlChildrenList?.Count > 0)
                        {
                            foreach (XmlNode xmlChild in xmlChildrenList)
                            {
                                await AddPACKSGearAsync(objXmlGearDocument, xmlChild, objNewGear, blnCreateChildren,
                                                        token).ConfigureAwait(false);
                            }
                        }
                    }
                }
                catch
                {
                    objNewGear.Remove(false);
                    throw;
                }
            }
            catch
            {
                if (lstWeapons.Count > 0)
                {
                    foreach (Weapon objWeapon in lstWeapons)
                    {
                        await objWeapon.DisposeAsync().ConfigureAwait(false);
                    }
                }
                throw;
            }

            // Add any Weapons created by the Gear.
            if (lstWeapons.Count > 0)
            {
                try
                {
                    foreach (Weapon objWeapon in lstWeapons)
                    {
                        await CharacterObject.Weapons.AddAsync(objWeapon, token).ConfigureAwait(false);
                    }
                }
                catch
                {
                    objNewGear.Remove(false);
                    throw;
                }
            }

            return objNewGear;
        }

        private async ValueTask AddPACKSCyberwareAsync(XmlDocument xmlCyberwareDocument, XmlDocument xmlBiowareDocument,
                                       XmlDocument xmlGearDocument, XmlNode xmlCyberware, object objParentObject,
                                       bool blnCreateChildren, CancellationToken token = default)
        {
            Grade objGrade = Grade.ConvertToCyberwareGrade(xmlCyberware["grade"]?.InnerText,
                                                           Improvement.ImprovementSource.Cyberware, CharacterObject);

            int intRating = Convert.ToInt32(xmlCyberware["rating"]?.InnerText, GlobalSettings.InvariantCultureInfo);

            Improvement.ImprovementSource eSource = Improvement.ImprovementSource.Cyberware;
            string strName = xmlCyberware["name"]?.InnerText;
            if (string.IsNullOrEmpty(strName))
                return;

            XmlNode objXmlCyberwareNode = xmlCyberwareDocument.TryGetNodeByNameOrId(
                "/chummer/cyberwares/cyberware", strName,
                await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
            if (objXmlCyberwareNode == null)
            {
                eSource = Improvement.ImprovementSource.Bioware;
                objXmlCyberwareNode = xmlBiowareDocument.TryGetNodeByNameOrId(
                    "/chummer/biowares/bioware", strName,
                    await CharacterObjectSettings.BookXPathAsync(token: token).ConfigureAwait(false));
                if (objXmlCyberwareNode == null)
                {
                    return;
                }
            }

            List<Weapon> lstWeapons = new List<Weapon>(1);
            List<Vehicle> lstVehicles = new List<Vehicle>(1);
            Cyberware objCyberware = new Cyberware(CharacterObject);
            try
            {
                try
                {
                    objCyberware.Create(objXmlCyberwareNode, objGrade, eSource, intRating, lstWeapons, lstVehicles,
                                        true,
                                        blnCreateChildren);

                    switch (objParentObject)
                    {
                        case Character objParentCharacter:
                            await objParentCharacter.Cyberware.AddAsync(objCyberware, token).ConfigureAwait(false);
                            break;

                        case Cyberware objParentCyberware:
                            await objParentCyberware.Children.AddAsync(objCyberware, token).ConfigureAwait(false);
                            break;

                        case VehicleMod objParentVehicleMod:
                            await objParentVehicleMod.Cyberware.AddAsync(objCyberware, token).ConfigureAwait(false);
                            break;
                    }

                    // Add any children.
                    using (XmlNodeList xmlCyberwareList = xmlCyberware.SelectNodes("cyberwares/cyberware"))
                    {
                        if (xmlCyberwareList?.Count > 0)
                        {
                            foreach (XmlNode objXmlChild in xmlCyberwareList)
                                await AddPACKSCyberwareAsync(xmlCyberwareDocument, xmlBiowareDocument, xmlGearDocument,
                                                             objXmlChild,
                                                             objCyberware, blnCreateChildren, token).ConfigureAwait(false);
                        }
                    }

                    using (XmlNodeList xmlGearList = xmlCyberware.SelectNodes("gears/gear"))
                    {
                        if (xmlGearList?.Count > 0)
                        {
                            foreach (XmlNode objXmlGear in xmlGearList)
                                await AddPACKSGearAsync(xmlGearDocument, objXmlGear, objCyberware, blnCreateChildren,
                                                        token).ConfigureAwait(false);
                        }
                    }
                }
                catch
                {
                    await objCyberware.DeleteCyberwareAsync(token: token).ConfigureAwait(false);
                    throw;
                }
            }
            catch
            {
                if (lstWeapons.Count > 0)
                {
                    foreach (Weapon objWeapon in lstWeapons)
                    {
                        await objWeapon.DisposeAsync().ConfigureAwait(false);
                    }
                }

                if (lstVehicles.Count > 0)
                {
                    foreach (Vehicle objVehicle in lstVehicles)
                    {
                        await objVehicle.DisposeAsync().ConfigureAwait(false);
                    }
                }
                throw;
            }

            try
            {
                if (lstWeapons.Count > 0)
                {
                    await lstWeapons.ForEachAsync(objWeapon => CharacterObject.Weapons.AddAsync(objWeapon, token).AsTask(),
                                                  token).ConfigureAwait(false);
                }

                if (lstVehicles.Count > 0)
                {
                    await lstVehicles.ForEachAsync(objVehicle => CharacterObject.Vehicles.AddAsync(objVehicle, token).AsTask(),
                                                   token).ConfigureAwait(false);
                }
            }
            catch
            {
                await objCyberware.DeleteCyberwareAsync(token: token).ConfigureAwait(false);
                throw;
            }
        }

        #endregion Custom Methods

        private async void tsMetamagicAddMetamagic_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treMetamagic.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is
                        InitiationGrade objGrade))
                    return;

                using (ThreadSafeForm<SelectMetamagic> frmPickMetamagic
                       = await ThreadSafeForm<SelectMetamagic>.GetAsync(
                           () => new SelectMetamagic(CharacterObject, objGrade), GenericToken).ConfigureAwait(false))
                {
                    // Make sure a value was selected.
                    if (await frmPickMetamagic.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;

                    Metamagic objNewMetamagic = new Metamagic(CharacterObject);

                    XmlNode objXmlMetamagic;
                    Improvement.ImprovementSource objSource;
                    if (CharacterObject.RESEnabled)
                    {
                        objXmlMetamagic
                            = (await CharacterObject.LoadDataAsync("echoes.xml", token: GenericToken)
                                                    .ConfigureAwait(false)).TryGetNodeByNameOrId(
                                "/chummer/echoes/echo", frmPickMetamagic.MyForm.SelectedMetamagic);
                        objSource = Improvement.ImprovementSource.Echo;
                    }
                    else
                    {
                        objXmlMetamagic
                            = (await CharacterObject.LoadDataAsync("metamagic.xml", token: GenericToken)
                                                    .ConfigureAwait(false))
                            .TryGetNodeByNameOrId("/chummer/metamagics/metamagic",
                                                  frmPickMetamagic.MyForm.SelectedMetamagic);
                        objSource = Improvement.ImprovementSource.Metamagic;
                    }

                    objNewMetamagic.Create(objXmlMetamagic, objSource);
                    objNewMetamagic.Grade = objGrade.Grade;
                    if (objNewMetamagic.InternalId.IsEmptyGuid())
                        return;

                    await CharacterObject.Metamagics.AddAsync(objNewMetamagic, GenericToken).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsMetamagicAddArt_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treMetamagic.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is InitiationGrade objGrade))
                    return;

                using (ThreadSafeForm<SelectArt> frmPickArt
                       = await ThreadSafeForm<SelectArt>.GetAsync(
                                                            () => new SelectArt(CharacterObject, SelectArt.Mode.Art),
                                                            GenericToken)
                                                        .ConfigureAwait(false))
                {
                    // Make sure a value was selected.
                    if (await frmPickArt.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;

                    XmlNode objXmlArt
                        = (await CharacterObject.LoadDataAsync("metamagic.xml", token: GenericToken)
                                                .ConfigureAwait(false))
                        .TryGetNodeByNameOrId("/chummer/arts/art", frmPickArt.MyForm.SelectedItem);

                    Art objArt = new Art(CharacterObject);

                    objArt.Create(objXmlArt, Improvement.ImprovementSource.Metamagic);
                    objArt.Grade = objGrade.Grade;
                    if (objArt.InternalId.IsEmptyGuid())
                        return;

                    await CharacterObject.Arts.AddAsync(objArt, GenericToken).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsMetamagicAddEnchantment_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treMetamagic.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is InitiationGrade objGrade))
                    return;

                using (ThreadSafeForm<SelectArt> frmPickArt
                       = await ThreadSafeForm<SelectArt>.GetAsync(
                                                            () => new SelectArt(CharacterObject,
                                                                SelectArt.Mode.Enchantment), GenericToken)
                                                        .ConfigureAwait(false))
                {
                    // Make sure a value was selected.
                    if (await frmPickArt.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;

                    XmlNode objXmlArt
                        = (await CharacterObject.LoadDataAsync("spells.xml", token: GenericToken).ConfigureAwait(false))
                        .TryGetNodeByNameOrId("/chummer/spells/spell", frmPickArt.MyForm.SelectedItem);

                    Spell objNewSpell = new Spell(CharacterObject);

                    try
                    {
                        objNewSpell.Create(objXmlArt, string.Empty, false, false, false,
                                           Improvement.ImprovementSource.Initiation);
                        objNewSpell.Grade = objGrade.Grade;
                        if (objNewSpell.InternalId.IsEmptyGuid())
                        {
                            await objNewSpell.DisposeAsync().ConfigureAwait(false);
                            return;
                        }

                        await CharacterObject.Spells.AddAsync(objNewSpell, GenericToken).ConfigureAwait(false);
                    }
                    catch
                    {
                        await objNewSpell.DisposeAsync().ConfigureAwait(false);
                        throw;
                    }
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsMetamagicAddRitual_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treMetamagic.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token: GenericToken)
                                        .ConfigureAwait(false) is InitiationGrade objGrade))
                    return;

                using (ThreadSafeForm<SelectArt> frmPickArt
                       = await ThreadSafeForm<SelectArt>.GetAsync(
                                                            () => new SelectArt(CharacterObject, SelectArt.Mode.Ritual),
                                                            GenericToken)
                                                        .ConfigureAwait(false))
                {
                    // Make sure a value was selected.
                    if (await frmPickArt.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;

                    XmlNode objXmlArt
                        = (await CharacterObject.LoadDataAsync("spells.xml", token: GenericToken).ConfigureAwait(false))
                        .TryGetNodeByNameOrId("/chummer/spells/spell", frmPickArt.MyForm.SelectedItem);

                    Spell objNewSpell = new Spell(CharacterObject);
                    try
                    {
                        objNewSpell.Create(objXmlArt, string.Empty, false, false, false,
                                           Improvement.ImprovementSource.Initiation);
                        objNewSpell.Grade = objGrade.Grade;
                        if (objNewSpell.InternalId.IsEmptyGuid())
                        {
                            await objNewSpell.DisposeAsync().ConfigureAwait(false);
                            return;
                        }

                        await CharacterObject.Spells.AddAsync(objNewSpell, GenericToken).ConfigureAwait(false);
                    }
                    catch
                    {
                        await objNewSpell.DisposeAsync().ConfigureAwait(false);
                        throw;
                    }
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsInitiationNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treMetamagic.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void tsMetamagicAddEnhancement_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treMetamagic.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is InitiationGrade objGrade))
                    return;

                using (ThreadSafeForm<SelectArt> frmPickArt
                       = await ThreadSafeForm<SelectArt>.GetAsync(
                                                            () => new SelectArt(CharacterObject,
                                                                SelectArt.Mode.Enhancement), GenericToken)
                                                        .ConfigureAwait(false))
                {
                    // Make sure a value was selected.
                    if (await frmPickArt.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;

                    XmlNode objXmlArt
                        = (await CharacterObject.LoadDataAsync("powers.xml", token: GenericToken).ConfigureAwait(false))
                        .TryGetNodeByNameOrId("/chummer/enhancements/enhancement", frmPickArt.MyForm.SelectedItem);
                    if (objXmlArt == null)
                        return;

                    Enhancement objEnhancement = new Enhancement(CharacterObject);
                    objEnhancement.Create(objXmlArt, Improvement.ImprovementSource.Initiation);
                    objEnhancement.Grade = objGrade.Grade;
                    if (objEnhancement.InternalId.IsEmptyGuid())
                        return;

                    // Find the associated Power
                    string strPower = objXmlArt["power"]?.InnerText;
                    Power objPower = await CharacterObject.Powers
                                                          .FirstOrDefaultAsync(
                                                              x => x.Name == strPower
                                                                   || string.Equals(
                                                                       x.SourceIDString, strPower,
                                                                       StringComparison.OrdinalIgnoreCase), GenericToken)
                                                          .ConfigureAwait(false);
                    if (objPower != null)
                    {
                        await objPower.Enhancements.AddAsync(objEnhancement, GenericToken).ConfigureAwait(false);
                    }
                    else
                    {
                        // Add it to the character instead
                        await CharacterObject.Enhancements.AddAsync(objEnhancement, GenericToken).ConfigureAwait(false);
                    }
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void panContacts_Click(object sender, EventArgs e)
        {
            panContacts.Focus();
        }

        private void panContacts_DragDrop(object sender, DragEventArgs e)
        {
            Point mousePosition = panContacts.PointToClient(new Point(e.X, e.Y));
            Control destination = panContacts.GetChildAtPoint(mousePosition);

            if (destination != null)
            {
                TransportWrapper wrapper = (TransportWrapper) e.Data.GetData(typeof(TransportWrapper));
                Control source = wrapper.Control;

                int indexDestination = panContacts.Controls.IndexOf(destination);
                if (panContacts.Controls.IndexOf(source) < indexDestination)
                    indexDestination--;

                panContacts.Controls.SetChildIndex(source, indexDestination);
            }

            foreach (ContactControl objControl in panContacts.Controls)
            {
                objControl.BackColor = ColorManager.Control;
            }
        }

        private void panContacts_DragOver(object sender, DragEventArgs e)
        {
            Point mousePosition = panContacts.PointToClient(new Point(e.X, e.Y));
            Control destination = panContacts.GetChildAtPoint(mousePosition);

            if (destination == null)
                return;

            destination.BackColor = ColorManager.ControlDarker;
            foreach (ContactControl objControl in panContacts.Controls)
            {
                if (objControl != destination as ContactControl)
                {
                    objControl.BackColor = ColorManager.Control;
                }
            }
            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
        }

        private void panContacts_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void panEnemies_Click(object sender, EventArgs e)
        {
            panEnemies.Focus();
        }

        private async void tsAddTechniqueNotes_Click(object sender, EventArgs e)
        {
            try
            {
                await WriteNotes(
                    await treMartialArts.DoThreadSafeFuncAsync(x => x.SelectedNode, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void btnCreateBackstory_Click(object sender, EventArgs e)
        {
            try
            {
                CursorWait objCursorWait
                    = await CursorWait.NewAsync(this, true, token: GenericToken).ConfigureAwait(false);
                try
                {
                    if (_objStoryBuilder == null)
                    {
                        StoryBuilder objBuilder = new StoryBuilder(CharacterObject);
                        Disposed += (o, args) => objBuilder.Dispose();
                        _objStoryBuilder = objBuilder;
                        await btnCreateBackstory.DoThreadSafeAsync(x => x.Enabled = false, token: GenericToken)
                                                .ConfigureAwait(false);
                    }

                    CharacterObject.Background
                        = await _objStoryBuilder.GetStory(token: GenericToken).ConfigureAwait(false);
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuSpecialConfirmValidity_Click(object sender, EventArgs e)
        {
            try
            {
                if (await CheckCharacterValidity(token: GenericToken).ConfigureAwait(false))
                {
                    Program.ShowScrollableMessageBox(
                        this, await LanguageManager.GetStringAsync("Message_ValidCharacter", token: GenericToken).ConfigureAwait(false),
                        await LanguageManager.GetStringAsync("MessageTitle_ValidCharacter", token: GenericToken).ConfigureAwait(false),
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cboPrimaryArm_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (IsLoading || IsRefreshing)
                return;

            try
            {
                if (await CharacterObject.GetAmbidextrousAsync(GenericToken).ConfigureAwait(false))
                    return;
                CharacterObject.PrimaryArm = await cboPrimaryArm
                                                   .DoThreadSafeFuncAsync(x => x.SelectedValue.ToString(), GenericToken)
                                                   .ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void AttributeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshAttributes(pnlAttributes, e, lblAttributes,
                                        await lblKarma.DoThreadSafeFuncAsync(x => x.PreferredWidth, GenericToken)
                                                      .ConfigureAwait(false),
                                        await lblAttributesAug
                                              .DoThreadSafeFuncAsync(x => x.PreferredWidth, GenericToken)
                                              .ConfigureAwait(false),
                                        await lblAttributesMetatype
                                              .DoThreadSafeFuncAsync(x => x.PreferredWidth, GenericToken)
                                              .ConfigureAwait(false), GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void PowersBeforeRemove(object sender, RemovingOldEventArgs e)
        {
            try
            {
                await RefreshPowerCollectionBeforeRemove(treMetamagic, e, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void PowersListChanged(object sender, ListChangedEventArgs e)
        {
            try
            {
                await RefreshPowerCollectionListChanged(treMetamagic, cmsMetamagic, cmsInitiationNotes, e, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void SpellCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshSpells(treSpells, treMetamagic, cmsSpell, cmsInitiationNotes, e, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void ComplexFormCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshComplexForms(treComplexForms, treMetamagic, cmsComplexForm, cmsInitiationNotes, e,
                                          GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void ArtCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshArtCollection(treMetamagic, cmsMetamagic, cmsInitiationNotes, e, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void EnhancementCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshEnhancementCollection(treMetamagic, cmsMetamagic, cmsInitiationNotes, e, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void MetamagicCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshMetamagicCollection(treMetamagic, cmsMetamagic, cmsInitiationNotes, e, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void InitiationGradeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshInitiationGrades(treMetamagic, cmsMetamagic, cmsInitiationNotes, e, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void AIProgramCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshAIPrograms(treAIPrograms, cmsAdvancedProgram, e, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void CritterPowerCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshCritterPowers(treCritterPowers, cmsCritterPowers, e, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void QualityCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshQualities(treQualities, cmsQuality, _fntNormal, _fntStrikeout, e, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void MartialArtCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshMartialArts(treMartialArts, cmsMartialArts, cmsTechnique, e, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void LifestyleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshLifestyles(treLifestyles, cmsLifestyleNotes, cmsAdvancedLifestyle, e, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void ContactCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshContacts(panContacts, panEnemies, panPets, e, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void SpiritCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshSpirits(panSpirits, panSprites, e, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void ArmorCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshArmor(treArmor, cmsArmorLocation, cmsArmor, cmsArmorMod, cmsArmorGear, e,
                                   token: GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void ArmorLocationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshArmorLocations(treArmor, cmsArmorLocation, e, token: GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void WeaponCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshWeapons(treWeapons, cmsWeaponLocation, cmsWeapon, cmsWeaponAccessory,
                                     cmsWeaponAccessoryGear, e, token: GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void WeaponLocationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshWeaponLocations(treWeapons, cmsWeaponLocation, e, token: GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void DrugCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshDrugs(treCustomDrugs, e, token: GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void GearCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshGears(treGear, cmsGearLocation, cmsGear, cmsGearAllowRename,
                                   await chkCommlinks.DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                     .ConfigureAwait(false), false, e, GenericToken)
                    .ConfigureAwait(false);
                await RefreshFociFromGear(treFoci, null, e, token: GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void GearLocationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshGearLocations(treGear, cmsGearLocation, e, token: GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void CyberwareCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshCyberware(treCyberware, cmsCyberware, cmsCyberwareGear, e, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void VehicleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshVehicles(treVehicles, cmsVehicleLocation, cmsVehicle, cmsVehicleWeapon,
                                      cmsVehicleWeaponAccessory, cmsVehicleWeaponAccessoryGear, cmsVehicleGear,
                                      cmsWeaponMount, cmsVehicleCyberware, cmsVehicleCyberwareGear, e, GenericToken)
                    .ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void VehicleLocationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            try
            {
                await RefreshVehicleLocations(treVehicles, cmsVehicleLocation, e, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void picMugshot_SizeChanged(object sender, EventArgs e)
        {
            try
            {
                await ProcessMugshot(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async ValueTask ProcessMugshot(CancellationToken token = default)
        {
            token.ThrowIfCancellationRequested();
            if (await this.DoThreadSafeFuncAsync(x => x.IsNullOrDisposed(), token).ConfigureAwait(false))
                return;
            await picMugshot.DoThreadSafeAsync(x =>
            {
                try
                {
                    x.SizeMode = x.Image != null && x.Height >= x.Image.Height
                                                 && x.Width >= x.Image.Width
                        ? PictureBoxSizeMode.CenterImage
                        : PictureBoxSizeMode.Zoom;
                }
                catch (ArgumentException) // No other way to catch when the Image is not null, but is disposed
                {
                    x.SizeMode = PictureBoxSizeMode.Zoom;
                }
            }, token).ConfigureAwait(false);
        }

        private async void mnuSpecialKarmaValue_Click(object sender, EventArgs e)
        {
            try
            {
                string strReturn;
                CursorWait objCursorWait = await CursorWait.NewAsync(this, true, GenericToken).ConfigureAwait(false);
                try
                {
                    strReturn = (await CharacterObject.CalculateKarmaValue(
                        GlobalSettings.Language, GlobalSettings.CultureInfo, GenericToken).ConfigureAwait(false)).Item1;
                }
                finally
                {
                    await objCursorWait.DisposeAsync().ConfigureAwait(false);
                }

                Program.ShowScrollableMessageBox(this, strReturn,
                                       await LanguageManager
                                             .GetStringAsync("MessageTitle_KarmaValue", token: GenericToken)
                                             .ConfigureAwait(false),
                                       MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void cmdCyberwareChangeMount_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is Cyberware objModularCyberware))
                    return;
                string strSelectedParentID;
                using (new FetchSafelyFromPool<List<ListItem>>(
                           Utils.ListItemListPool, out List<ListItem> lstModularMounts))
                {
                    lstModularMounts.AddRange(await CharacterObject
                                                    .ConstructModularCyberlimbListAsync(
                                                        objModularCyberware, GenericToken).ConfigureAwait(false));
                    //Mounted cyberware should always be allowed to be dismounted.
                    //Unmounted cyberware requires that a valid mount be present.
                    if (!objModularCyberware.IsModularCurrentlyEquipped
                        && lstModularMounts.All(
                            x => !string.Equals(x.Value.ToString(), "None", StringComparison.Ordinal)))
                    {
                        Program.ShowScrollableMessageBox(this,
                                               await LanguageManager.GetStringAsync("Message_NoValidModularMount", token: GenericToken)
                                                                    .ConfigureAwait(false),
                                               await LanguageManager.GetStringAsync("MessageTitle_NoValidModularMount", token: GenericToken)
                                                                    .ConfigureAwait(false),
                                               MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    string strDescription = await LanguageManager
                                                  .GetStringAsync("MessageTitle_SelectCyberware", token: GenericToken)
                                                  .ConfigureAwait(false);
                    using (ThreadSafeForm<SelectItem> frmPickMount = await ThreadSafeForm<SelectItem>.GetAsync(
                               () => new SelectItem
                               {
                                   Description = strDescription
                               }, GenericToken).ConfigureAwait(false))
                    {
                        frmPickMount.MyForm.SetGeneralItemsMode(lstModularMounts);

                        // Make sure the dialogue window was not canceled.
                        if (await frmPickMount.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                            == DialogResult.Cancel)
                        {
                            return;
                        }

                        strSelectedParentID = frmPickMount.MyForm.SelectedItem;
                    }
                }

                Cyberware objOldParent = objModularCyberware.Parent;
                if (objOldParent != null)
                    await objModularCyberware.ChangeModularEquipAsync(false, token: GenericToken).ConfigureAwait(false);

                if (strSelectedParentID == "None")
                {
                    if (objOldParent != null)
                    {
                        await objOldParent.Children.RemoveAsync(objModularCyberware, token: GenericToken)
                                          .ConfigureAwait(false);

                        await CharacterObject.Cyberware.AddAsync(objModularCyberware, token: GenericToken)
                                             .ConfigureAwait(false);
                    }
                }
                else
                {
                    Cyberware objNewParent = CharacterObject.Cyberware.DeepFindById(strSelectedParentID);
                    if (objNewParent != null)
                    {
                        if (objOldParent != null)
                            await objOldParent.Children.RemoveAsync(objModularCyberware, token: GenericToken)
                                              .ConfigureAwait(false);
                        else
                            await CharacterObject.Cyberware.RemoveAsync(objModularCyberware, token: GenericToken)
                                                 .ConfigureAwait(false);

                        await objNewParent.Children.AddAsync(objModularCyberware, token: GenericToken)
                                          .ConfigureAwait(false);

                        await objModularCyberware.ChangeModularEquipAsync(true, token: GenericToken)
                                                 .ConfigureAwait(false);
                    }
                    else
                    {
                        ThreadSafeObservableCollection<Vehicle> lstVehicles
                            = await CharacterObject.GetVehiclesAsync(GenericToken).ConfigureAwait(false);
                        VehicleMod objNewVehicleModParent
                            = lstVehicles.FindVehicleMod(x => x.InternalId == strSelectedParentID);
                        if (objNewVehicleModParent == null)
                            objNewParent
                                = lstVehicles.FindVehicleCyberware(x => x.InternalId == strSelectedParentID,
                                                                   out objNewVehicleModParent);

                        if (objNewVehicleModParent != null || objNewParent != null)
                        {
                            if (objOldParent != null)
                                await objOldParent.Children.RemoveAsync(objModularCyberware, token: GenericToken)
                                                  .ConfigureAwait(false);
                            else
                                await CharacterObject.Cyberware.RemoveAsync(objModularCyberware, token: GenericToken)
                                                     .ConfigureAwait(false);

                            if (objNewParent != null)
                                await objNewParent.Children.AddAsync(objModularCyberware, token: GenericToken)
                                                  .ConfigureAwait(false);
                            else
                                await objNewVehicleModParent.Cyberware
                                                            .AddAsync(objModularCyberware, token: GenericToken)
                                                            .ConfigureAwait(false);
                        }
                        else if (objOldParent != null)
                        {
                            await objOldParent.Children.RemoveAsync(objModularCyberware, token: GenericToken)
                                              .ConfigureAwait(false);

                            await CharacterObject.Cyberware.AddAsync(objModularCyberware, token: GenericToken)
                                                 .ConfigureAwait(false);
                        }
                    }
                }
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void cmdVehicleCyberwareChangeMount_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is Cyberware objModularCyberware))
                    return;
                string strSelectedParentID;
                using (new FetchSafelyFromPool<List<ListItem>>(
                           Utils.ListItemListPool, out List<ListItem> lstModularMounts))
                {
                    lstModularMounts.AddRange(await CharacterObject
                                                    .ConstructModularCyberlimbListAsync(
                                                        objModularCyberware, GenericToken).ConfigureAwait(false));
                    //Mounted cyberware should always be allowed to be dismounted.
                    //Unmounted cyberware requires that a valid mount be present.
                    if (!objModularCyberware.IsModularCurrentlyEquipped
                        && lstModularMounts.All(
                            x => !string.Equals(x.Value.ToString(), "None", StringComparison.OrdinalIgnoreCase)))
                    {
                        Program.ShowScrollableMessageBox(this,
                                               await LanguageManager.GetStringAsync("Message_NoValidModularMount", token: GenericToken)
                                                                    .ConfigureAwait(false),
                                               await LanguageManager.GetStringAsync("MessageTitle_NoValidModularMount", token: GenericToken)
                                                                    .ConfigureAwait(false),
                                               MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    string strDescription = await LanguageManager.GetStringAsync("MessageTitle_SelectCyberware", token: GenericToken)
                                                                 .ConfigureAwait(false);
                    using (ThreadSafeForm<SelectItem> frmPickMount = await ThreadSafeForm<SelectItem>.GetAsync(
                               () => new SelectItem
                               {
                                   Description = strDescription
                               }, GenericToken).ConfigureAwait(false))
                    {
                        frmPickMount.MyForm.SetGeneralItemsMode(lstModularMounts);

                        // Make sure the dialogue window was not canceled.
                        if (await frmPickMount.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                            == DialogResult.Cancel)
                        {
                            return;
                        }

                        strSelectedParentID = frmPickMount.MyForm.SelectedItem;
                    }
                }

                CharacterObject.Vehicles.FindVehicleCyberware(x => x.InternalId == objModularCyberware.InternalId,
                                                              out VehicleMod objOldParentVehicleMod);
                Cyberware objOldParent = objModularCyberware.Parent;
                if (objOldParent != null)
                    await objModularCyberware.ChangeModularEquipAsync(false, token: GenericToken).ConfigureAwait(false);
                if (strSelectedParentID == "None")
                {
                    if (objOldParent != null)
                        await objOldParent.Children.RemoveAsync(objModularCyberware, GenericToken).ConfigureAwait(false);
                    else
                        await objOldParentVehicleMod.Cyberware.RemoveAsync(objModularCyberware, GenericToken).ConfigureAwait(false);

                    await CharacterObject.Cyberware.AddAsync(objModularCyberware, GenericToken).ConfigureAwait(false);
                }
                else
                {
                    Cyberware objNewParent = CharacterObject.Cyberware.DeepFindById(strSelectedParentID);
                    if (objNewParent != null)
                    {
                        if (objOldParent != null)
                            await objOldParent.Children.RemoveAsync(objModularCyberware, GenericToken).ConfigureAwait(false);
                        else
                            await objOldParentVehicleMod.Cyberware.RemoveAsync(objModularCyberware, GenericToken)
                                                        .ConfigureAwait(false);

                        await objNewParent.Children.AddAsync(objModularCyberware, GenericToken).ConfigureAwait(false);

                        await objModularCyberware.ChangeModularEquipAsync(true, token: GenericToken).ConfigureAwait(false);
                    }
                    else
                    {
                        VehicleMod objNewVehicleModParent
                            = CharacterObject.Vehicles.FindVehicleMod(x => x.InternalId == strSelectedParentID);
                        if (objNewVehicleModParent == null)
                            objNewParent
                                = CharacterObject.Vehicles.FindVehicleCyberware(
                                    x => x.InternalId == strSelectedParentID, out objNewVehicleModParent);

                        if (objNewVehicleModParent != null || objNewParent != null)
                        {
                            if (objOldParent != null)
                                await objOldParent.Children.RemoveAsync(objModularCyberware, GenericToken).ConfigureAwait(false);
                            else
                                await objOldParentVehicleMod.Cyberware.RemoveAsync(objModularCyberware, GenericToken)
                                                            .ConfigureAwait(false);

                            if (objNewParent != null)
                                await objNewParent.Children.AddAsync(objModularCyberware, GenericToken).ConfigureAwait(false);
                            else
                                await objNewVehicleModParent.Cyberware.AddAsync(objModularCyberware, GenericToken)
                                                            .ConfigureAwait(false);
                        }
                        else
                        {
                            if (objOldParent != null)
                                await objOldParent.Children.RemoveAsync(objModularCyberware, GenericToken).ConfigureAwait(false);
                            else
                                await objOldParentVehicleMod.Cyberware.RemoveAsync(objModularCyberware, GenericToken)
                                                            .ConfigureAwait(false);

                            await CharacterObject.Cyberware.AddAsync(objModularCyberware, GenericToken).ConfigureAwait(false);
                        }
                    }
                }
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void cmdContactsExpansionToggle_Click(object sender, EventArgs e)
        {
            try
            {
                Control.ControlCollection lstControls
                    = await panContacts.DoThreadSafeFuncAsync(x => x.Controls, GenericToken).ConfigureAwait(false);
                if (lstControls.Count == 0)
                    return;
                await panContacts.DoThreadSafeAsync(x => x.SuspendLayout(), GenericToken).ConfigureAwait(false);
                try
                {
                    bool toggle = await ((ContactControl) lstControls[0]).GetExpandedAsync(GenericToken)
                                                                         .ConfigureAwait(false);

                    foreach (ContactControl c in lstControls)
                    {
                        await c.SetExpandedAsync(!toggle, GenericToken).ConfigureAwait(false);
                    }
                }
                finally
                {
                    await panContacts.DoThreadSafeAsync(x => x.ResumeLayout(), GenericToken).ConfigureAwait(false);
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void cmdSwapContactOrder_Click(object sender, EventArgs e)
        {
            panContacts.FlowDirection = panContacts.FlowDirection == FlowDirection.LeftToRight
                ? FlowDirection.TopDown
                : FlowDirection.LeftToRight;
        }

        private async void tsWeaponLocationAddWeapon_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                      .ConfigureAwait(false) is Location
                        objLocation))
                    return;
                bool blnAddAgain;
                do
                {
                    blnAddAgain = await AddWeapon(objLocation, GenericToken).ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void tsVehicleLocationAddVehicle_Click(object sender, EventArgs e)
        {
            try
            {
                bool blnAddAgain;
                do
                {
                    blnAddAgain = await AddVehicle(
                        await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                         .ConfigureAwait(false) as Location, GenericToken).ConfigureAwait(false);
                } while (blnAddAgain);
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void tsEditWeaponMount_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is WeaponMount
                        objWeaponMount))
                    return;
                using (ThreadSafeForm<CreateWeaponMount> frmCreateWeaponMount
                       = await ThreadSafeForm<CreateWeaponMount>.GetAsync(
                           () => new CreateWeaponMount(objWeaponMount.Parent, CharacterObject, objWeaponMount),
                           GenericToken).ConfigureAwait(false))
                {
                    if (await frmCreateWeaponMount.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false)
                        == DialogResult.Cancel)
                        return;
                }

                await RequestCharacterUpdate().ConfigureAwait(false);

                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void btnCreateCustomDrug_Click_1(object sender, EventArgs e)
        {
            try
            {
                using (ThreadSafeForm<CreateCustomDrug> form
                       = await ThreadSafeForm<CreateCustomDrug>.GetAsync(
                           () => new CreateCustomDrug(CharacterObject), GenericToken).ConfigureAwait(false))
                {
                    if (await form.ShowDialogSafeAsync(this, GenericToken).ConfigureAwait(false) == DialogResult.Cancel)
                        return;

                    Drug objCustomDrug = form.MyForm.CustomDrug;
                    if (objCustomDrug != null)
                    {
                        try
                        {
                            await CharacterObject.Drugs.AddAsync(objCustomDrug, GenericToken).ConfigureAwait(false);
                        }
                        catch
                        {
                            await objCustomDrug.DisposeAsync().ConfigureAwait(false);
                            throw;
                        }
                    }
                }
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void OpenSourceFromLabel(object sender, EventArgs e)
        {
            try
            {
                await CommonFunctions.OpenPdfFromControl(sender, GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private void pnlAttributes_Layout(object sender, LayoutEventArgs e)
        {
            pnlAttributes.SuspendLayout();
            try
            {
                foreach (Control objAttributeControl in pnlAttributes.Controls)
                {
                    if (pnlAttributes.ClientSize.Width < objAttributeControl.MinimumSize.Height)
                        objAttributeControl.MinimumSize
                            = new Size(pnlAttributes.ClientSize.Width, objAttributeControl.MinimumSize.Height);
                    if (pnlAttributes.ClientSize.Width != objAttributeControl.MaximumSize.Height)
                        objAttributeControl.MaximumSize
                            = new Size(pnlAttributes.ClientSize.Width, objAttributeControl.MaximumSize.Height);
                    if (pnlAttributes.ClientSize.Width > objAttributeControl.MinimumSize.Height)
                        objAttributeControl.MinimumSize
                            = new Size(pnlAttributes.ClientSize.Width, objAttributeControl.MinimumSize.Height);
                }
            }
            finally
            {
                pnlAttributes.ResumeLayout();
            }
        }

        #region Stolen Property Changes

        private async void chkDrugStolen_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treCustomDrugs.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                          .ConfigureAwait(false) is IHasStolenProperty loot))
                    return;
                await ProcessStolenChanged(
                    loot, await chkDrugStolen.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void chkCyberwareStolen_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is IHasStolenProperty loot))
                    return;
                await ProcessStolenChanged(
                    loot,
                    await chkCyberwareStolen.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void chkGearStolen_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken).ConfigureAwait(false)
                        is IHasStolenProperty loot))
                    return;
                await ProcessStolenChanged(
                    loot, await chkGearStolen.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void chkArmorStolen_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken).ConfigureAwait(false)
                        is IHasStolenProperty loot))
                    return;
                await ProcessStolenChanged(
                    loot,
                    await chkArmorStolen.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void chkWeaponStolen_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                      .ConfigureAwait(false) is IHasStolenProperty loot))
                    return;
                await ProcessStolenChanged(
                    loot,
                    await chkWeaponStolen.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async void chkVehicleStolen_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is IHasStolenProperty loot))
                    return;
                await ProcessStolenChanged(
                    loot,
                    await chkVehicleStolen.DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false),
                    GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                // Swallow this
            }
        }

        private async ValueTask ProcessStolenChanged(IHasStolenProperty loot, bool state,
                                                     CancellationToken token = default)
        {
            loot.Stolen = state;
            await RequestCharacterUpdate(token).ConfigureAwait(false);
            await SetDirty(true, token).ConfigureAwait(false);
        }

        #endregion Stolen Property Changes

        private void btnDeleteCustomDrug_Click(object sender, EventArgs e)
        {
            if (!(treCustomDrugs.SelectedNode?.Tag is ICanRemove selectedObject))
                return;
            selectedObject.Remove();
        }

        private async void cboVehicleWeaponFiringMode_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;

            try
            {
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is Weapon
                        objWeapon))
                    return;
                objWeapon.FireMode = await cboVehicleWeaponFiringMode.DoThreadSafeFuncAsync(x => x.SelectedIndex >= 0
                    ? (Weapon.FiringMode) x.SelectedValue
                    : Weapon.FiringMode.DogBrain, GenericToken).ConfigureAwait(false);
                await RefreshSelectedVehicle(GenericToken).ConfigureAwait(false);

                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void chkCyberwareBlackMarketDiscount_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treCyberware.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                        .ConfigureAwait(false) is
                        ICanBlackMarketDiscount objItem))
                    return;
                objItem.DiscountCost = await chkCyberwareBlackMarketDiscount
                                             .DoThreadSafeFuncAsync(x => x.Checked, GenericToken).ConfigureAwait(false);
                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void chkGearBlackMarketDiscount_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treGear.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token: GenericToken)
                                   .ConfigureAwait(false) is
                        ICanBlackMarketDiscount objItem))
                    return;
                objItem.DiscountCost
                    = await chkGearBlackMarketDiscount.DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                      .ConfigureAwait(false);
                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void chkArmorBlackMarketDiscount_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treArmor.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                    .ConfigureAwait(false) is
                        ICanBlackMarketDiscount objItem))
                    return;
                objItem.DiscountCost
                    = await chkArmorBlackMarketDiscount.DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                       .ConfigureAwait(false);
                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void chkWeaponBlackMarketDiscount_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treWeapons.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, token: GenericToken)
                                      .ConfigureAwait(false) is
                        ICanBlackMarketDiscount objItem))
                    return;
                objItem.DiscountCost
                    = await chkWeaponBlackMarketDiscount.DoThreadSafeFuncAsync(x => x.Checked, token: GenericToken)
                                                        .ConfigureAwait(false);
                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void chkVehicleBlackMarketDiscount_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRefreshing)
                return;
            try
            {
                if (!(await treVehicles.DoThreadSafeFuncAsync(x => x.SelectedNode?.Tag, GenericToken)
                                       .ConfigureAwait(false) is
                        ICanBlackMarketDiscount objItem))
                    return;
                objItem.DiscountCost
                    = await chkVehicleBlackMarketDiscount.DoThreadSafeFuncAsync(x => x.Checked, GenericToken)
                                                         .ConfigureAwait(false);
                await RequestCharacterUpdate().ConfigureAwait(false);
                await SetDirty(true).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }

        private async void mnuFileExport_Click(object sender, EventArgs e)
        {
            try
            {
                await DoExport(GenericToken).ConfigureAwait(false);
            }
            catch (OperationCanceledException)
            {
                //swallow this
            }
        }
    }
}
